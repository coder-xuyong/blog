import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e,a as n,b as t,o as l}from"./app-CZXL8Z0T.js";const h={};function p(r,i){return l(),a("div",null,[i[0]||(i[0]=e("p",null,"java 零碎知识点记录",-1)),n(" more "),i[1]||(i[1]=t(`<h2 id="去除科学计数法" tabindex="-1"><a class="header-anchor" href="#去除科学计数法"><span>去除科学计数法</span></a></h2><p>将其转为大精度直接输出<br> 首先，需要将科学计数法转换成一下：<br> 例如：<br> BigDecimal bd = new BigDecimal(&quot;3.40256010353E11&quot;);<br> 然后转换成字符串：<br> String str = bd.toPlainString();<br> 如果这个数字的长度是在int的范围内的话，是可以转换成int类型：<br> int a = Integer.parsInt(str);<br> 如果这个数字的长度不是在Int范围内的话，得到的就不是你想要的数字了！换其他类型</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bg</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//去除科学计数法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="时间戳转为日期格式" tabindex="-1"><a class="header-anchor" href="#时间戳转为日期格式"><span>时间戳转为日期格式</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timeStamp2Date</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> time) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> timeLong </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseLong</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(time);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        SimpleDateFormat</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sdf </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SimpleDateFormat</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//要转换的时间格式</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Date</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        date </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> sdf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sdf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(timeLong));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> sdf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(date);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ParseException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="判断一个字符串是否能转为数字" tabindex="-1"><a class="header-anchor" href="#判断一个字符串是否能转为数字"><span>判断一个字符串是否能转为数字</span></a></h2><p>isNumeric方法</p><h2 id="byte-高位-低位-大端格式-小端格式" tabindex="-1"><a class="header-anchor" href="#byte-高位-低位-大端格式-小端格式"><span>Byte 高位/低位（大端格式/小端格式）</span></a></h2><p>高位/低位（大端格式/小端格式）指的是多字节数据类型在计算机内存中的存储顺序。不同的计算机架构可能采用不同的字节序，这主要取决于硬件设计和所使用的处理器类型。</p><h3 id="大端格式-big-endian" tabindex="-1"><a class="header-anchor" href="#大端格式-big-endian"><span>大端格式（Big-Endian）</span></a></h3><p>在大端格式中，最高位字节（最左边的字节或最重要的字节）存储在最低地址处，而最低位字节（最右边的字节或最不重要的字节）存储在最高地址处。这种排序与人类阅读多位数的习惯相同，从左到右依次是最高位到最低位。例如：</p><p>如果有一个16位的整数0x1234，在大端格式机器上它会被存储为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Memory Address:  0x00    0x01</span></span>
<span class="line"><span>Contents:        0x12    0x34</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小端格式-little-endian" tabindex="-1"><a class="header-anchor" href="#小端格式-little-endian"><span>小端格式（Little-Endian）</span></a></h3><p>在小端格式中，最低位字节存储在最低地址处，而最高位字节存储在最高地址处。也就是说，字节被“倒置”地存储。这种格式对于某些处理器架构来说更高效。例如：</p><p>同样的16位整数0x1234，在小端格式机器上它会被存储为：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Memory Address:  0x00    0x01</span></span>
<span class="line"><span>Contents:        0x34    0x12</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="网络字节序" tabindex="-1"><a class="header-anchor" href="#网络字节序"><span>网络字节序</span></a></h3><p>网络上的通信通常使用大端格式作为标准，称为网络字节序。这意味着在网络编程中，发送方需要将本地的小端格式转换为大端格式，接收方则需要将接收到的大端格式转换回自己的本地格式。为此，许多编程语言提供了专门的函数来处理这样的转换，比如C语言中的<code>htonl()</code>、<code>htons()</code>、<code>ntohl()</code>和<code>ntohs()</code>等。</p><p>了解你的系统是大端还是小端很重要，特别是在进行跨平台开发或者直接操作二进制数据时。如果你不确定系统的字节序，可以通过编写一个简单的程序来检测，例如创建一个多字节数并检查其内存表示。</p>`,20))])}const o=s(h,[["render",p],["__file","jottings.html.vue"]]),g=JSON.parse('{"path":"/posts/java/01-JavaSE/%E6%9C%AA%E5%88%86%E7%B1%BB/jottings.html","title":"java 零碎知识点","lang":"zh-CN","frontmatter":{"title":"java 零碎知识点","icon":"pen-to-square","date":"2023-06-04T00:00:00.000Z","lastUpdated":true,"category":["java"],"tag":["java-basic"],"description":"java 零碎知识点记录","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/posts/java/01-JavaSE/%E6%9C%AA%E5%88%86%E7%B1%BB/jottings.html"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"java 零碎知识点"}],["meta",{"property":"og:description","content":"java 零碎知识点记录"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-07T14:51:43.000Z"}],["meta",{"property":"article:tag","content":"java-basic"}],["meta",{"property":"article:published_time","content":"2023-06-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-07T14:51:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java 零碎知识点\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-02-07T14:51:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"去除科学计数法","slug":"去除科学计数法","link":"#去除科学计数法","children":[]},{"level":2,"title":"时间戳转为日期格式","slug":"时间戳转为日期格式","link":"#时间戳转为日期格式","children":[]},{"level":2,"title":"判断一个字符串是否能转为数字","slug":"判断一个字符串是否能转为数字","link":"#判断一个字符串是否能转为数字","children":[]},{"level":2,"title":"Byte 高位/低位（大端格式/小端格式）","slug":"byte-高位-低位-大端格式-小端格式","link":"#byte-高位-低位-大端格式-小端格式","children":[{"level":3,"title":"大端格式（Big-Endian）","slug":"大端格式-big-endian","link":"#大端格式-big-endian","children":[]},{"level":3,"title":"小端格式（Little-Endian）","slug":"小端格式-little-endian","link":"#小端格式-little-endian","children":[]},{"level":3,"title":"网络字节序","slug":"网络字节序","link":"#网络字节序","children":[]}]}],"git":{"createdTime":1734876211000,"updatedTime":1738939903000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":4,"url":"https://github.com/XuYong"},{"name":"erye0","username":"erye0","email":"1299461580@qq.com","commits":1,"url":"https://github.com/erye0"},{"name":"coder-xuyong","username":"coder-xuyong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/coder-xuyong"}]},"readingTime":{"minutes":2.55,"words":764},"filePathRelative":"posts/java/01-JavaSE/未分类/jottings.md","localizedDate":"2023年6月4日","excerpt":"<p>java 零碎知识点记录</p>\\n","autoDesc":true}');export{o as comp,g as data};
