import{_ as a,c as s,b as l,o as t}from"./app-SKlWjzij.js";const i={};function r(o,e){return t(),s("div",null,e[0]||(e[0]=[l('<h1 id="《hbase-a-nosql-database》笔记" tabindex="-1"><a class="header-anchor" href="#《hbase-a-nosql-database》笔记"><span>《HBase: A NoSQL database》笔记</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>HBase 是一种 NoSQL 数据库，它是Java版本的 Google’s Big Table 实现，它原本是 Hadoop 的子项目，现在已独立出来，并成为 apache 的顶级项目。</p><p>HBase 的设计目标是用于存储大规模数据集。HBase 是列式数据库，与传统行式数据库相比，其非常适合用于存储稀疏性的数据。</p><p>HBase 是基于 HDFS 实现的。</p><h2 id="hbase-和历史" tabindex="-1"><a class="header-anchor" href="#hbase-和历史"><span>HBase 和历史</span></a></h2><p>HBase 关键特性：</p><ul><li>水平扩展</li><li>分区容错性</li><li>支持并行处理</li><li>支持 HDFS 和 MapReduce</li><li>近实时查询</li><li>适用于存储大规模数据集</li><li>适用于存储稀疏型数据（宽表）</li><li>表的动态负载均衡</li><li>对于大规模的查询，支持块缓存和布隆过滤器</li></ul><p>HBase 发展历史</p><p>2007 - Mike Cafarella 发布 BigTable 的开源实现——HBase</p><p>2008 ~ 2010 - HBase 成为 Apache 顶级项目。</p><h2 id="hbase-数据结构和架构" tabindex="-1"><a class="header-anchor" href="#hbase-数据结构和架构"><span>HBase 数据结构和架构</span></a></h2><p>HBase 表可以用于 MapReduce 任务的输入、输出对象。</p><p>HBase 由行、列族、列、时间戳组成。</p><p>HBase 表会被分成多个分区，每个分区会定义起始key、结束key。它们被存于 HDFS 文件中。</p><p>HBase 的架构通常为一个 master server，多个 region server，以及 ZooKeeper 集群。</p><ul><li><strong>master server</strong><ul><li>在 ZooKeeper 的帮助下，为分区分配 region server，控制 region server 的负载均衡。</li><li>负责 schema 的变更</li><li>管理和监控 Hadoop 集群</li></ul></li><li><strong>region server</strong><ul><li>region server 负责处理来自客户端的 CRUD 操作</li><li>region server 包括内存存储和 HFile</li><li>region server 运行在 HDFS 的数据节点上</li><li>region server 有四个核心组件：Block cache（读缓存）、MemStore（写缓存）、WAL、HFile（存储行数据，键值对结构）</li></ul></li><li>Zookeeper <ul><li>当 region server 宕机并重新工作时，HBase 会使用 ZooKeeper 作为协调工具，对其进行恢复</li><li>Zookeeper 是客户端和 master server 的中心，它维护着 master server 和 region server 注册的元数据信息。例如：有多少有效的 region server；任意 region server 持有哪些 data node</li><li>ZooKeeper 可以用于追踪服务器错误</li></ul></li></ul><h2 id="hbase-和大数据" tabindex="-1"><a class="header-anchor" href="#hbase-和大数据"><span>HBase 和大数据</span></a></h2><p>HBase 相比于其他 NoSQL，最显著的优势在于，它属于 Hadoop 生态体系中的重要一环，被广泛用于大数据领域。但是，近些年，有 MongoDB、Cassandra 等一些数据库挑战着其地位。</p><h2 id="hbase-的应用" tabindex="-1"><a class="header-anchor" href="#hbase-的应用"><span>HBase 的应用</span></a></h2><p>Facebook 的消息平台使用 HBase 存储数据，每月产生约 13.5 亿条信息。</p><p>HBase 还被用于存储各种海量操作数据。</p><h2 id="hbase-的挑战和限制" tabindex="-1"><a class="header-anchor" href="#hbase-的挑战和限制"><span>HBase 的挑战和限制</span></a></h2><p>HBase 采用主从架构，一旦 master server 不可用，需要很长时间才能恢复。</p><p>HBase 不支持二级索引。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://www.researchgate.net/publication/317399857_HBase_A_NoSQL_Database" target="_blank" rel="noopener noreferrer">HBase: A NoSQL Database</a></li></ul>',27)]))}const p=a(i,[["render",r],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/pages/b2f10e/","title":"《HBase A NoSQL database》笔记","lang":"zh-CN","frontmatter":{"title":"《HBase A NoSQL database》笔记","date":"2023-09-05T19:52:01.000Z","order":1,"categories":["笔记","分布式","分布式存储"],"tags":["分布式","分布式存储","HBASE"],"permalink":"/pages/b2f10e/","description":"《HBase: A NoSQL database》笔记 简介 HBase 是一种 NoSQL 数据库，它是Java版本的 Google’s Big Table 实现，它原本是 Hadoop 的子项目，现在已独立出来，并成为 apache 的顶级项目。 HBase 的设计目标是用于存储大规模数据集。HBase 是列式数据库，与传统行式数据库相比，其非常适...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/b2f10e/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"《HBase A NoSQL database》笔记"}],["meta",{"property":"og:description","content":"《HBase: A NoSQL database》笔记 简介 HBase 是一种 NoSQL 数据库，它是Java版本的 Google’s Big Table 实现，它原本是 Hadoop 的子项目，现在已独立出来，并成为 apache 的顶级项目。 HBase 的设计目标是用于存储大规模数据集。HBase 是列式数据库，与传统行式数据库相比，其非常适..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"分布式存储"}],["meta",{"property":"article:tag","content":"HBASE"}],["meta",{"property":"article:published_time","content":"2023-09-05T19:52:01.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"《HBase A NoSQL database》笔记\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-09-05T19:52:01.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"HBase 和历史","slug":"hbase-和历史","link":"#hbase-和历史","children":[]},{"level":2,"title":"HBase 数据结构和架构","slug":"hbase-数据结构和架构","link":"#hbase-数据结构和架构","children":[]},{"level":2,"title":"HBase 和大数据","slug":"hbase-和大数据","link":"#hbase-和大数据","children":[]},{"level":2,"title":"HBase 的应用","slug":"hbase-的应用","link":"#hbase-的应用","children":[]},{"level":2,"title":"HBase 的挑战和限制","slug":"hbase-的挑战和限制","link":"#hbase-的挑战和限制","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1749521666000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":2.33,"words":698},"filePathRelative":"posts/99.笔记/15.分布式/22.分布式存储/01.hbase-a-nosql-database.md","localizedDate":"2023年9月5日","excerpt":"\\n<h2>简介</h2>\\n<p>HBase 是一种 NoSQL 数据库，它是Java版本的 Google’s Big Table 实现，它原本是 Hadoop 的子项目，现在已独立出来，并成为 apache 的顶级项目。</p>\\n<p>HBase 的设计目标是用于存储大规模数据集。HBase 是列式数据库，与传统行式数据库相比，其非常适合用于存储稀疏性的数据。</p>\\n<p>HBase 是基于 HDFS 实现的。</p>\\n<h2>HBase 和历史</h2>\\n<p>HBase 关键特性：</p>\\n<ul>\\n<li>水平扩展</li>\\n<li>分区容错性</li>\\n<li>支持并行处理</li>\\n<li>支持 HDFS 和 MapReduce</li>\\n<li>近实时查询</li>\\n<li>适用于存储大规模数据集</li>\\n<li>适用于存储稀疏型数据（宽表）</li>\\n<li>表的动态负载均衡</li>\\n<li>对于大规模的查询，支持块缓存和布隆过滤器</li>\\n</ul>","autoDesc":true}');export{p as comp,h as data};
