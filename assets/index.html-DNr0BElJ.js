import{_ as t,c as r,b as i,o as n}from"./app-kzyIs9AF.js";const a={};function o(l,e){return n(),r("div",null,e[0]||(e[0]=[i('<h1 id="图" tabindex="-1"><a class="header-anchor" href="#图"><span>图</span></a></h1><p>在计算机科学中，一个图就是一些<em>顶点</em>的集合，这些顶点通过一系列<em>边</em>结对（连接）。顶点用圆圈表示，边就是这些圆圈之间的连线。顶点之间通过边连接。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/data-structure/graph/graph.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="什么是图" tabindex="-1"><a class="header-anchor" href="#什么是图"><span>什么是图</span></a></h2><ul><li><strong>阶（Order）</strong> - 图 G 中点集 V 的大小称作图 G 的阶。</li><li><strong>子图（Sub-Graph）</strong> - 当图 G&#39;=(V&#39;,E&#39;)其中 V‘包含于 V，E’包含于 E，则 G&#39;称作图 G=(V,E)的子图。每个图都是本身的子图。</li><li>生成子图（Spanning Sub-Graph） - 指满足条件 V(G&#39;) = V(G)的 G 的子图 G&#39;。</li><li>导出子图（Induced Subgraph） - 以图 G 的顶点集 V 的<a href="https://baike.baidu.com/item/%E9%9D%9E%E7%A9%BA%E5%AD%90%E9%9B%86/10180460" target="_blank" rel="noopener noreferrer">非空子集</a>V1 为顶点集，以两端点均在 V1 中的全体边为边集的 G 的子图，称为 V1 导出的导出子图；以图 G 的边集 E 的非空子集 E1 为边集，以 E1 中边关联的顶点的全体为顶点集的 G 的子图，称为 E1 导出的导出子图。</li><li><strong>有向图</strong> - 如果给图的每条边规定一个方向，那么得到的图称为有向图。</li><li><strong>无向图</strong> - 边没有方向的图称为无向图。</li><li><strong>度（Degree）</strong> - 一个顶点的度是指与该顶点相关联的边的条数，顶点 v 的度记作 d(v)。</li><li><strong>入度（In-degree）<strong>和</strong>出度（Out-degree）</strong> - 对于有向图来说，一个顶点的度可细分为入度和出度。一个顶点的入度是指与其关联的各边之中，以其为终点的边数；出度则是相对的概念，指以该顶点为起点的边数。</li><li><strong>自环（Loop）</strong> - 若一条边的两个顶点为同一顶点，则此边称作自环。</li><li>路径（Path） - 从 u 到 v 的一条路径是指一个序列 v0,e1,v1,e2,v2,...ek,vk，其中 ei 的顶点为 vi 及 vi - 1，k 称作路径的长度。如果它的起止顶点相同，该路径是“闭”的，反之，则称为“开”的。一条路径称为一简单路径(simple path)，如果路径中除起始与终止<a href="https://baike.baidu.com/item/%E9%A1%B6%E7%82%B9" target="_blank" rel="noopener noreferrer">顶点</a>可以重合外，所有顶点两两不等。</li><li><strong>行迹（Trace）</strong> - 如果路径 P(u,v)中的边各不相同，则该路径称为 u 到 v 的一条行迹。闭的行迹称作回路（Circuit）。</li><li><strong>轨迹（Track）</strong> - 如果路径 P(u,v)中的顶点各不相同，则该路径称为 u 到 v 的一条轨迹。闭的轨迹称作圈（Cycle）。</li><li><strong>桥（Bridge）</strong> - 若去掉一条边，便会使得整个图不连通，该边称为<a href="https://baike.baidu.com/item/%E6%A1%A5" target="_blank" rel="noopener noreferrer">桥</a>。</li></ul><p>如果图的边没有方向性，则被成为无向图。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20220314093554.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="图的基本操作" tabindex="-1"><a class="header-anchor" href="#图的基本操作"><span>图的基本操作</span></a></h2><ul><li>创建一个图结构 - CreateGraph(G)</li><li>检索给定顶点 - LocateVex(G,elem)</li><li>获取图中某个顶点 - GetVex(G,v)</li><li>为图中顶点赋值 - PutVex(G,v,value)</li><li>返回第一个邻接点 - FirstAdjVex(G,v)</li><li>返回下一个邻接点 - NextAdjVex(G,v,w)</li><li>插入一个顶点 - InsertVex(G,v)</li><li>删除一个顶点 - DeleteVex(G,v)</li><li>插入一条边 - InsertEdge(G,v,w)</li><li>删除一条边 - DeleteEdge(G,v,w)</li><li>遍历图 - Traverse(G,v)</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://time.geekbang.org/column/intro/100017301" target="_blank" rel="noopener noreferrer">数据结构与算法之美</a></li></ul>',11)]))}const s=t(a,[["render",o],["__file","index.html.vue"]]),p=JSON.parse(`{"path":"/pages/5dd75b/","title":"图","lang":"zh-CN","frontmatter":{"title":"图","date":"2015-03-24T15:31:13.000Z","order":5,"categories":["数据结构和算法"],"tags":["数据结构和算法","图"],"permalink":"/pages/5dd75b/","description":"图 在计算机科学中，一个图就是一些顶点的集合，这些顶点通过一系列边结对（连接）。顶点用圆圈表示，边就是这些圆圈之间的连线。顶点之间通过边连接。 imgimg 什么是图 阶（Order） - 图 G 中点集 V 的大小称作图 G 的阶。 子图（Sub-Graph） - 当图 G'=(V',E')其中 V‘包含于 V，E’包含于 E，则 G'称作图 G=(...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/5dd75b/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"图"}],["meta",{"property":"og:description","content":"图 在计算机科学中，一个图就是一些顶点的集合，这些顶点通过一系列边结对（连接）。顶点用圆圈表示，边就是这些圆圈之间的连线。顶点之间通过边连接。 imgimg 什么是图 阶（Order） - 图 G 中点集 V 的大小称作图 G 的阶。 子图（Sub-Graph） - 当图 G'=(V',E')其中 V‘包含于 V，E’包含于 E，则 G'称作图 G=(..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/cs/data-structure/graph/graph.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"数据结构和算法"}],["meta",{"property":"article:tag","content":"图"}],["meta",{"property":"article:published_time","content":"2015-03-24T15:31:13.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"图\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/cs/data-structure/graph/graph.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20220314093554.jpg\\"],\\"datePublished\\":\\"2015-03-24T15:31:13.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"什么是图","slug":"什么是图","link":"#什么是图","children":[]},{"level":2,"title":"图的基本操作","slug":"图的基本操作","link":"#图的基本操作","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1749521666000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":2.8,"words":839},"filePathRelative":"posts/11.数据结构和算法/05.图.md","localizedDate":"2015年3月24日","excerpt":"\\n<p>在计算机科学中，一个图就是一些<em>顶点</em>的集合，这些顶点通过一系列<em>边</em>结对（连接）。顶点用圆圈表示，边就是这些圆圈之间的连线。顶点之间通过边连接。</p>\\n<figure><img src=\\"https://raw.githubusercontent.com/dunwu/images/master/cs/data-structure/graph/graph.png\\" alt=\\"img\\" tabindex=\\"0\\" loading=\\"lazy\\"><figcaption>img</figcaption></figure>\\n<h2>什么是图</h2>\\n<ul>\\n<li><strong>阶（Order）</strong> - 图 G 中点集 V 的大小称作图 G 的阶。</li>\\n<li><strong>子图（Sub-Graph）</strong> - 当图 G'=(V',E')其中 V‘包含于 V，E’包含于 E，则 G'称作图 G=(V,E)的子图。每个图都是本身的子图。</li>\\n<li>生成子图（Spanning Sub-Graph） - 指满足条件 V(G') = V(G)的 G 的子图 G'。</li>\\n<li>导出子图（Induced Subgraph） - 以图 G 的顶点集 V 的<a href=\\"https://baike.baidu.com/item/%E9%9D%9E%E7%A9%BA%E5%AD%90%E9%9B%86/10180460\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">非空子集</a>V1 为顶点集，以两端点均在 V1 中的全体边为边集的 G 的子图，称为 V1 导出的导出子图；以图 G 的边集 E 的非空子集 E1 为边集，以 E1 中边关联的顶点的全体为顶点集的 G 的子图，称为 E1 导出的导出子图。</li>\\n<li><strong>有向图</strong> - 如果给图的每条边规定一个方向，那么得到的图称为有向图。</li>\\n<li><strong>无向图</strong> - 边没有方向的图称为无向图。</li>\\n<li><strong>度（Degree）</strong> - 一个顶点的度是指与该顶点相关联的边的条数，顶点 v 的度记作 d(v)。</li>\\n<li><strong>入度（In-degree）<strong>和</strong>出度（Out-degree）</strong> - 对于有向图来说，一个顶点的度可细分为入度和出度。一个顶点的入度是指与其关联的各边之中，以其为终点的边数；出度则是相对的概念，指以该顶点为起点的边数。</li>\\n<li><strong>自环（Loop）</strong> - 若一条边的两个顶点为同一顶点，则此边称作自环。</li>\\n<li>路径（Path） - 从 u 到 v 的一条路径是指一个序列 v0,e1,v1,e2,v2,...ek,vk，其中 ei 的顶点为 vi 及 vi - 1，k 称作路径的长度。如果它的起止顶点相同，该路径是“闭”的，反之，则称为“开”的。一条路径称为一简单路径(simple path)，如果路径中除起始与终止<a href=\\"https://baike.baidu.com/item/%E9%A1%B6%E7%82%B9\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">顶点</a>可以重合外，所有顶点两两不等。</li>\\n<li><strong>行迹（Trace）</strong> - 如果路径 P(u,v)中的边各不相同，则该路径称为 u 到 v 的一条行迹。闭的行迹称作回路（Circuit）。</li>\\n<li><strong>轨迹（Track）</strong> - 如果路径 P(u,v)中的顶点各不相同，则该路径称为 u 到 v 的一条轨迹。闭的轨迹称作圈（Cycle）。</li>\\n<li><strong>桥（Bridge）</strong> - 若去掉一条边，便会使得整个图不连通，该边称为<a href=\\"https://baike.baidu.com/item/%E6%A1%A5\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">桥</a>。</li>\\n</ul>","autoDesc":true}`);export{s as comp,p as data};
