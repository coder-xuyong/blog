import{_ as t,c as n,b as i,o as a}from"./app-B1Q36Bj7.js";const s={};function l(r,e){return a(),n("div",null,e[0]||(e[0]=[i(`<h1 id="spring-bean-作用域" tabindex="-1"><a class="header-anchor" href="#spring-bean-作用域"><span>Spring Bean 作用域</span></a></h1><h2 id="spring-bean-作用域-1" tabindex="-1"><a class="header-anchor" href="#spring-bean-作用域-1"><span>Spring Bean 作用域</span></a></h2><table><thead><tr><th>来源</th><th>说明</th></tr></thead><tbody><tr><td>singleton</td><td>默认 Spring Bean 作用域，一个 BeanFactory 有且仅有一个实例</td></tr><tr><td>prototype</td><td>原型作用域，每次依赖查找和依赖注入生成新 Bean 对象</td></tr><tr><td>request</td><td>将 Spring Bean 存储在 ServletRequest 上下文中</td></tr><tr><td>session</td><td>将 Spring Bean 存储在 HttpSession 中</td></tr><tr><td>application</td><td>将 Spring Bean 存储在 ServletContext 中</td></tr></tbody></table><h2 id="singleton-bean-作用域" tabindex="-1"><a class="header-anchor" href="#singleton-bean-作用域"><span>&quot;singleton&quot; Bean 作用域</span></a></h2><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20221221170833.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="prototype-bean-作用域" tabindex="-1"><a class="header-anchor" href="#prototype-bean-作用域"><span>&quot;prototype&quot; Bean 作用域</span></a></h2><p>Spring 容器没有办法管理 prototype Bean 的完整生命周期，也没有办法记录实例的存在。销毁回调方法将不会执行，可以利用 <code>BeanPostProcessor</code> 进行清扫工作。</p><h2 id="request-bean-作用域" tabindex="-1"><a class="header-anchor" href="#request-bean-作用域"><span>&quot;request&quot; Bean 作用域</span></a></h2><ul><li>配置 <ul><li>XML - <code>&lt;bean class=&quot;...&quot; scope = “request&quot; /&gt;</code></li><li>Java 注解 - <code>@RequestScope</code> 或 <code>@Scope(WebApplicationContext.SCOPE_REQUEST)</code></li></ul></li><li>实现 <ul><li>API - RequestScope</li></ul></li></ul><h2 id="session-bean-作用域" tabindex="-1"><a class="header-anchor" href="#session-bean-作用域"><span>&quot;session&quot; Bean 作用域</span></a></h2><ul><li>配置 <ul><li>XML - <code>&lt;bean class=&quot;...&quot; scope = “session&quot; /&gt;</code></li><li>Java 注解 - <code>@SessionScope</code> 或 <code>@Scope(WebApplicationContext.SCOPE_SESSION)</code></li></ul></li><li>实现 <ul><li>API - SessionScope</li></ul></li></ul><h2 id="application-bean-作用域" tabindex="-1"><a class="header-anchor" href="#application-bean-作用域"><span>&quot;application&quot; Bean 作用域</span></a></h2><ul><li>配置 <ul><li>XML - <code>&lt;bean class=&quot;...&quot; scope = “application&quot; /&gt;</code></li><li>Java 注解 - <code>@ApplicationScope</code> 或 <code>@Scope(WebApplicationContext.SCOPE_APPLICATION)</code></li></ul></li><li>实现 <ul><li>API - ServletContextScope</li></ul></li></ul><h2 id="自定义-bean-作用域" tabindex="-1"><a class="header-anchor" href="#自定义-bean-作用域"><span>自定义 Bean 作用域</span></a></h2><ul><li><p>实现 Scope</p><ul><li><code>org.springframework.beans.factory.config.Scope</code></li></ul></li><li><p>注册 Scope</p><ul><li>API - <code>org.springframework.beans.factory.config.ConfigurableBeanFactory#registerScope</code></li></ul></li><li><p>配置</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bean</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;org.springframework.beans.factory.config.CustomScopeConfigurer&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scopes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">entry</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;...&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">entry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">map</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">property</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><p>Spring 內建的 Bean 作用域有几种？</p><p>singleton、prototype、request、session、application 以及 websocket</p><p>singleton Bean 是否在一个应用是唯一的？</p><p>否。singleton bean 仅在当前 Spring IoC 容器（BeanFactory）中是单例对象。</p><p>application Bean 是否可以被其他方案替代？</p><p>可以的，实际上，“application” Bean 与“singleton” Bean 没有本质区别</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans" target="_blank" rel="noopener noreferrer">Spring 官方文档之 Core Technologies</a></li><li><a href="https://time.geekbang.org/course/intro/265" target="_blank" rel="noopener noreferrer">《小马哥讲 Spring 核心编程思想》</a></li></ul>`,24)]))}const o=t(s,[["render",l],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/pages/8289f5/","title":"Spring Bean 作用域","lang":"zh-CN","frontmatter":{"title":"Spring Bean 作用域","date":"2022-12-21T11:42:00.000Z","order":6,"categories":["Java","框架","Spring","Spring核心"],"tags":["Java","框架","Spring","Bean"],"permalink":"/pages/8289f5/","description":"Spring Bean 作用域 Spring Bean 作用域 \\"singleton\\" Bean 作用域 \\"prototype\\" Bean 作用域 Spring 容器没有办法管理 prototype Bean 的完整生命周期，也没有办法记录实例的存在。销毁回调方法将不会执行，可以利用 BeanPostProcessor 进行清扫工作。 \\"request...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/8289f5/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"Spring Bean 作用域"}],["meta",{"property":"og:description","content":"Spring Bean 作用域 Spring Bean 作用域 \\"singleton\\" Bean 作用域 \\"prototype\\" Bean 作用域 Spring 容器没有办法管理 prototype Bean 的完整生命周期，也没有办法记录实例的存在。销毁回调方法将不会执行，可以利用 BeanPostProcessor 进行清扫工作。 \\"request..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/snap/20221221170833.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-18T09:06:43.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Bean"}],["meta",{"property":"article:published_time","content":"2022-12-21T11:42:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-18T09:06:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Bean 作用域\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20221221170833.png\\"],\\"datePublished\\":\\"2022-12-21T11:42:00.000Z\\",\\"dateModified\\":\\"2025-02-18T09:06:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"Spring Bean 作用域","slug":"spring-bean-作用域-1","link":"#spring-bean-作用域-1","children":[]},{"level":2,"title":"\\"singleton\\" Bean 作用域","slug":"singleton-bean-作用域","link":"#singleton-bean-作用域","children":[]},{"level":2,"title":"\\"prototype\\" Bean 作用域","slug":"prototype-bean-作用域","link":"#prototype-bean-作用域","children":[]},{"level":2,"title":"\\"request\\" Bean 作用域","slug":"request-bean-作用域","link":"#request-bean-作用域","children":[]},{"level":2,"title":"\\"session\\" Bean 作用域","slug":"session-bean-作用域","link":"#session-bean-作用域","children":[]},{"level":2,"title":"\\"application\\" Bean 作用域","slug":"application-bean-作用域","link":"#application-bean-作用域","children":[]},{"level":2,"title":"自定义 Bean 作用域","slug":"自定义-bean-作用域","link":"#自定义-bean-作用域","children":[]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1735573878000,"updatedTime":1739869603000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":2,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":1.34,"words":403},"filePathRelative":"posts/01.Java/13.框架/01.Spring/01.Spring核心/06.SpringBean作用域.md","localizedDate":"2022年12月21日","excerpt":"\\n<h2>Spring Bean 作用域</h2>\\n<table>\\n<thead>\\n<tr>\\n<th>来源</th>\\n<th>说明</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td>singleton</td>\\n<td>默认 Spring Bean 作用域，一个 BeanFactory 有且仅有一个实例</td>\\n</tr>\\n<tr>\\n<td>prototype</td>\\n<td>原型作用域，每次依赖查找和依赖注入生成新 Bean 对象</td>\\n</tr>\\n<tr>\\n<td>request</td>\\n<td>将 Spring Bean 存储在 ServletRequest 上下文中</td>\\n</tr>\\n<tr>\\n<td>session</td>\\n<td>将 Spring Bean 存储在 HttpSession 中</td>\\n</tr>\\n<tr>\\n<td>application</td>\\n<td>将 Spring Bean 存储在 ServletContext 中</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{o as comp,d as data};
