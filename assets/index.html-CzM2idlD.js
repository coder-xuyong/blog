import{_ as e,c as a,b as l,o as i}from"./app-D2RqNzS0.js";const n={};function o(r,t){return i(),a("div",null,t[0]||(t[0]=[l('<h1 id="jvm-体系结构" tabindex="-1"><a class="header-anchor" href="#jvm-体系结构"><span>JVM 体系结构</span></a></h1><blockquote><p>JVM 能跨平台工作，主要是由于 JVM 屏蔽了与各个计算机平台相关的软件、硬件之间的差异。</p></blockquote><h2 id="jvm-简介" tabindex="-1"><a class="header-anchor" href="#jvm-简介"><span>JVM 简介</span></a></h2><h3 id="计算机体系结构" tabindex="-1"><a class="header-anchor" href="#计算机体系结构"><span>计算机体系结构</span></a></h3><p>真实的计算机体系结构的核心部分包含：</p><ul><li>指令集</li><li>计算单元（CPU）</li><li>寻址方式</li><li>寄存器</li><li>存储单元</li></ul><h3 id="jvm-体系结构简介" tabindex="-1"><a class="header-anchor" href="#jvm-体系结构简介"><span>JVM 体系结构简介</span></a></h3><p>JVM 体系结构与计算机体系结构相似，它的核心部分包含：</p><ul><li>JVM 指令集</li><li>类加载器</li><li>执行引擎 - 相当于 JVM 的 CPU</li><li>内存区 - JVM 的存储</li><li>本地方法调用 - 调用 C/C++ 实现的本地方法</li></ul><h2 id="hotspot-架构" tabindex="-1"><a class="header-anchor" href="#hotspot-架构"><span>Hotspot 架构</span></a></h2><p>Hotspot 是最流行的 JVM。</p><p>Java 虚拟机的主要组件，包括<strong>类加载器</strong>、<strong>运行时数据区</strong>和<strong>执行引擎</strong>。</p><p>Hotspot 虚拟机拥有一个架构，它支持强大特性和能力的基础平台，支持实现高性能和强大的可伸缩性的能力。举个例子，Hotspot 虚拟机 JIT 编译器生成动态的优化，换句话说，它们在 Java 应用执行期做出优化，为底层系统架构生成高性能的本地机器指令。另外，经过它的运行时环境和多线程垃圾回收成熟的进化和连续的设计， Hotspot 虚拟机在高可用计算系统上产出了高伸缩性。</p><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-hotspot-architecture.png"></div><h3 id="hotspot-关键组件" tabindex="-1"><a class="header-anchor" href="#hotspot-关键组件"><span>Hotspot 关键组件</span></a></h3><p>Java 虚拟机有三个组件关注着什么时候进行性能优化，堆空间是对象所存储的地方，这个区域被启动时选择的垃圾回收器管理，大部分调优选项与调整堆大小和根据你的情况选择最适当的垃圾收集器相关。即时编译器对性能也有很大的影响，但是使用新版本的 Java 虚拟机时很少需要调整。</p><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javacore/jvm/jvm-hotspot-key-components.png"></div><h3 id="性能指标" tabindex="-1"><a class="header-anchor" href="#性能指标"><span>性能指标</span></a></h3><p>Java 虚拟机的性能指标主要有两点：</p><ul><li><strong>停顿时间</strong> - 响应延迟是指一个应用回应一个请求的速度有多快。对关注响应能力的应用来说，长暂停时间是不可接受的，重点是在短的时间周期内能做出响应。 <ul><li>桌面 UI 响应事件的速度</li><li>网站返回网页的速度</li><li>数据查询返回的速度</li></ul></li><li><strong>吞吐量</strong> - 吞吐量关注在特定的时间周期内一个应用的工作量的最大值。对关注吞吐量的应用来说长暂停时间是可以接受的。由于高吞吐量的应用关注的基准在更长周期时间上，所以快速响应时间不在考虑之内。 <ul><li>给定时间内完成事务的数量</li><li>一小时内批处理程序完成的工作数量</li><li>一小时内数据查询完成的数量</li></ul></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://book.douban.com/subject/34907497/" target="_blank" rel="noopener noreferrer">《深入理解 Java 虚拟机》</a></li></ul>',22)]))}const p=e(n,[["render",o],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/pages/08f153/","title":"JVM 体系结构","lang":"zh-CN","frontmatter":{"title":"JVM 体系结构","date":"2021-05-24T15:41:47.000Z","order":1,"categories":["Java","JavaSE","JVM"],"tags":["Java","JavaSE","JVM"],"permalink":"/pages/08f153/","description":"JVM 体系结构 JVM 能跨平台工作，主要是由于 JVM 屏蔽了与各个计算机平台相关的软件、硬件之间的差异。 JVM 简介 计算机体系结构 真实的计算机体系结构的核心部分包含： 指令集 计算单元（CPU） 寻址方式 寄存器 存储单元 JVM 体系结构简介 JVM 体系结构与计算机体系结构相似，它的核心部分包含： JVM 指令集 类加载器 执行引擎 -...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/08f153/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"JVM 体系结构"}],["meta",{"property":"og:description","content":"JVM 体系结构 JVM 能跨平台工作，主要是由于 JVM 屏蔽了与各个计算机平台相关的软件、硬件之间的差异。 JVM 简介 计算机体系结构 真实的计算机体系结构的核心部分包含： 指令集 计算单元（CPU） 寻址方式 寄存器 存储单元 JVM 体系结构简介 JVM 体系结构与计算机体系结构相似，它的核心部分包含： JVM 指令集 类加载器 执行引擎 -..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-04T03:11:59.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2021-05-24T15:41:47.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-04T03:11:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM 体系结构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-05-24T15:41:47.000Z\\",\\"dateModified\\":\\"2025-03-04T03:11:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"JVM 简介","slug":"jvm-简介","link":"#jvm-简介","children":[{"level":3,"title":"计算机体系结构","slug":"计算机体系结构","link":"#计算机体系结构","children":[]},{"level":3,"title":"JVM 体系结构简介","slug":"jvm-体系结构简介","link":"#jvm-体系结构简介","children":[]}]},{"level":2,"title":"Hotspot 架构","slug":"hotspot-架构","link":"#hotspot-架构","children":[{"level":3,"title":"Hotspot 关键组件","slug":"hotspot-关键组件","link":"#hotspot-关键组件","children":[]},{"level":3,"title":"性能指标","slug":"性能指标","link":"#性能指标","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1741057919000,"updatedTime":1741057919000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":2.56,"words":767},"filePathRelative":"posts/01.Java/01.JavaSE/06.JVM/01.JVM体系结构.md","localizedDate":"2021年5月24日","excerpt":"\\n<blockquote>\\n<p>JVM 能跨平台工作，主要是由于 JVM 屏蔽了与各个计算机平台相关的软件、硬件之间的差异。</p>\\n</blockquote>\\n<h2>JVM 简介</h2>\\n<h3>计算机体系结构</h3>\\n<p>真实的计算机体系结构的核心部分包含：</p>\\n<ul>\\n<li>指令集</li>\\n<li>计算单元（CPU）</li>\\n<li>寻址方式</li>\\n<li>寄存器</li>\\n<li>存储单元</li>\\n</ul>\\n<h3>JVM 体系结构简介</h3>\\n<p>JVM 体系结构与计算机体系结构相似，它的核心部分包含：</p>\\n<ul>\\n<li>JVM 指令集</li>\\n<li>类加载器</li>\\n<li>执行引擎 - 相当于 JVM 的 CPU</li>\\n<li>内存区 - JVM 的存储</li>\\n<li>本地方法调用 - 调用 C/C++ 实现的本地方法</li>\\n</ul>","autoDesc":true}');export{p as comp,c as data};
