import{_ as t,c as r,b as a,o}from"./app-jHLa_8Nm.js";const i={};function n(p,e){return o(),r("div",null,e[0]||(e[0]=[a('<h1 id="逻辑时钟" tabindex="-1"><a class="header-anchor" href="#逻辑时钟"><span>逻辑时钟</span></a></h1><h2 id="什么是逻辑时钟" tabindex="-1"><a class="header-anchor" href="#什么是逻辑时钟"><span>什么是逻辑时钟</span></a></h2><p>1978 年，Lamport 在 <a href="https://lamport.azurewebsites.net/pubs/time-clocks.pdf" target="_blank" rel="noopener noreferrer"><strong>Time, Clocks, and the Ordering of Events in a Distributed System</strong></a> 中提出了逻辑时钟的概念，来解决分布式系统中区分事件发生的时序问题。</p><p><strong>逻辑时钟指的是分布式系统中用于区分事件的发生顺序的时间机制</strong>。</p><h2 id="为什么需要逻辑时钟" tabindex="-1"><a class="header-anchor" href="#为什么需要逻辑时钟"><span>为什么需要逻辑时钟</span></a></h2><p>对于程序来说，时间维度非常重要，很多业务逻辑都依赖于时间。常见的场景有：</p><ul><li>某个请求是否超时了？</li><li>某项服务 P99 的响应时间是多少？</li><li>在过去五分钟，服务平均每秒处理多少个查询？</li><li>用户在我们的网站上浏览花了多段时间？</li><li>这篇文章什么时候发表？</li><li>在什么时间发送提醒邮件？</li><li>这个缓存条目何时过期？</li><li>日志文件中错误消息的时间戳是多少？</li></ul><p>为了让多节点的系统时间保持同步，需要有一个对表机制，来保证各节点的时间一致。一种常见方法是使用 <a href="https://en.wikipedia.org/wiki/Network_Time_Protocol" target="_blank" rel="noopener noreferrer">NTP</a>，它的工作机制是使用专门的高精度时间服务器来作为基准，调整服务器的本地时间。即使使用了 NTP，也难免存在微小的误差，在有些场景中（如金融）是不能接受的。</p><p>在分布式系统中，由于跨节点通信不可能即时完成，因此在多节点上难以确定事件的先后顺序。而逻辑时钟就是一种定义时序先后顺序的方案。</p><h2 id="全序与偏序" tabindex="-1"><a class="header-anchor" href="#全序与偏序"><span>全序与偏序</span></a></h2><h3 id="什么是偏序" tabindex="-1"><a class="header-anchor" href="#什么是偏序"><span>什么是偏序</span></a></h3><p>设 R 是集合 A 上的一个二元关系，若 R 满足：</p><p>（1）自反性：对任意 <code>x∈A</code>，有 <code>xRx</code>；</p><p>（2）反对称性（即<a href="https://www.zhihu.com/search?q=%E5%8F%8D%E5%AF%B9%E7%A7%B0%E5%85%B3%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A555298363%7D" target="_blank" rel="noopener noreferrer">反对称关系</a>）：对任意 <code>x,y∈A</code>，若 <code>xRy</code>，且 <code>yRx</code>，则 <code>x=y</code>；</p><p>（3）传递性：对任意 <code>x,y,z∈A</code>，若 <code>xRy</code>，且 <code>yRz</code>，则 <code>xRz</code>。</p><p>则称 R 为 A 上的偏序关系。</p><h3 id="什么是全序" tabindex="-1"><a class="header-anchor" href="#什么是全序"><span>什么是全序</span></a></h3><p>设集合 X 上有一全序关系，如果我们把这种关系用 ≤ 表述，则下列陈述对于 X 中的所有 a, b 和 c 成立：</p><p>如果 a ≤ b 且 b ≤ a 则 a = b（<a href="https://www.zhihu.com/search?q=%E5%8F%8D%E5%AF%B9%E7%A7%B0%E6%80%A7&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A555298363%7D" target="_blank" rel="noopener noreferrer">反对称性</a>）</p><p>如果 a ≤ b 且 b ≤ c 则 a ≤ c（<a href="https://www.zhihu.com/search?q=%E4%BC%A0%E9%80%92%E6%80%A7&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A555298363%7D" target="_blank" rel="noopener noreferrer">传递性</a>）</p><p>a ≤ b 或 b ≤ a (完全性)</p><p><strong>注意</strong>：</p><p>完全性本身也包括了<a href="https://www.zhihu.com/search?q=%E8%87%AA%E5%8F%8D%E6%80%A7&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A555298363%7D" target="_blank" rel="noopener noreferrer">自反性</a>。 所以，全序关系必是<a href="https://www.zhihu.com/search?q=%E5%81%8F%E5%BA%8F%E5%85%B3%E7%B3%BB&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A555298363%7D" target="_blank" rel="noopener noreferrer">偏序关系</a>。</p><h3 id="时序的关键" tabindex="-1"><a class="header-anchor" href="#时序的关键"><span>时序的关键</span></a></h3><p>**两个事件可以建立因果（时序）关系的前提是：两个事件之间是否发生过信息传递。**在分布式系统中，进程间通信的手段（共享内存、消息发送等）都属于信息传递，如果两个进程间没有任何交互，实际上他们之间内部事件的时序也无关紧要。但是有交互的情况下，特别是多个节点的要保持同一副本的情况下，事件的时序非常重要。</p><h2 id="逻辑时钟-1" tabindex="-1"><a class="header-anchor" href="#逻辑时钟-1"><span>逻辑时钟</span></a></h2><p>分布式系统中按是否存在节点交互可分为三类事件，一类发生于节点内部，二是发送事件，三是接收事件。Lamport 时间戳原理如下：</p><figure><img src="https://pic2.zhimg.com/80/v2-8f34d242db587edc776d863de2565845_720w.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><em>图 1: Lamport timestamps space time (图片来源: wikipedia)</em></p><ol><li>每个事件对应一个 Lamport 时间戳，初始值为 0</li><li>如果事件在节点内发生，时间戳加 1</li><li>如果事件属于发送事件，时间戳加 1 并在消息中带上该时间戳</li><li>如果事件属于接收事件，时间戳 = Max(本地时间戳，消息中的时间戳) + 1</li></ol><p>假设有事件 a、b，C(a)、C(b)分别表示事件 a、b 对应的 Lamport 时间戳，如果 a-&gt;b,则 C(a) &lt; C(b)，a 发生在 b 之前(happened before)，例如图 1 中有 C1 -&gt; B1。通过该定义，事件集中 Lamport 时间戳不等的事件可进行比较，我们获得事件的<a href="https://en.wikipedia.org/wiki/Partially_ordered_set#Formal_definition" target="_blank" rel="noopener noreferrer">偏序关系</a>(partial order)。</p><p>如果 C(a) = C(b)，那 a、b 事件的顺序又是怎样的？假设 a、b 分别在节点 P、Q 上发生，Pi、Qj 分别表示我们给 P、Q 的编号，如果 C(a) = C(b) 并且 Pi &lt; Qj，同样定义为 a 发生在 b 之前，记作 a =&gt; b。假如我们对图 1 的 A、B、C 分别编号 Ai = 1、Bj = 2、Ck = 3，因 C(B4) = C(C3) 并且 Bj &lt; Ck，则 B4 =&gt; C3。</p><p>通过以上定义，我们可以对所有事件排序、获得事件的<a href="https://en.wikipedia.org/wiki/Total_order" target="_blank" rel="noopener noreferrer">全序关系</a>(total order)。上图例子，我们可以从 C1 到 A4 进行排序。</p><h2 id="向量时钟" tabindex="-1"><a class="header-anchor" href="#向量时钟"><span>向量时钟</span></a></h2><p>Lamport 时间戳帮助我们得到事件顺序关系，但还有一种顺序关系不能用 Lamport 时间戳很好地表示出来，那就是同时发生关系(concurrent)(4)。例如图 1 中事件 B4 和事件 C3 没有因果关系，属于同时发生事件，但 Lamport 时间戳定义两者有先后顺序。</p><p>Vector clock 是在 Lamport 时间戳基础上演进的另一种逻辑时钟方法，它通过 vector 结构不但记录本节点的 Lamport 时间戳，同时也记录了其他节点的 Lamport 时间戳(5)(6)。Vector clock 的原理与 Lamport 时间戳类似，使用图例如下：</p><figure><img src="https://pic3.zhimg.com/80/v2-2613ec2d7fd0fd6d7d936731306cb432_720w.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><em>图 2: Vector clock space time (图片来源: wikipedia)</em></p><p>假设有事件 a、b 分别在节点 P、Q 上发生，Vector clock 分别为 Ta、Tb，如果 Tb[Q] &gt; Ta[Q] 并且 Tb[P] &gt;= Ta[P]，则 a 发生于 b 之前，记作 a -&gt; b。到目前为止还和 Lamport 时间戳差别不大，那 Vector clock 怎么判别同时发生关系呢？</p><p>如果 Tb[Q] &gt; Ta[Q] 并且 Tb[P] &lt; Ta[P]，则认为 a、b 同时发生，记作 a &lt;-&gt; b。例如图 2 中节点 B 上的第 4 个事件 (A:2，B:4，C:1) 与节点 C 上的第 2 个事件 (B:3，C:2) 没有因果关系、属于同时发生事件。</p><h2 id="版本时钟" tabindex="-1"><a class="header-anchor" href="#版本时钟"><span>版本时钟</span></a></h2><p>基于 Vector clock 我们可以获得任意两个事件的顺序关系，结果或为先后顺序或为同时发生，识别事件顺序在工程实践中有很重要的引申应用，最常见的应用是发现数据冲突(detect conflict)。</p><p>分布式系统中数据一般存在多个副本(replication)，多个副本可能被同时更新，这会引起副本间数据不一致[7]，Version vector 的实现与 Vector clock 非常类似[8]，目的用于发现数据冲突[9]。下面通过一个例子说明 Version vector 的用法[10]：</p><figure><img src="https://pic2.zhimg.com/80/v2-e88cec85c18803dbd6f0f18ae72ea721_720w.webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><em>图 3: Version vector</em></p><ul><li>client 端写入数据，该请求被 Sx 处理并创建相应的 vector ([Sx, 1])，记为数据 D1</li><li>第 2 次请求也被 Sx 处理，数据修改为 D2，vector 修改为([Sx, 2])</li><li>第 3、第 4 次请求分别被 Sy、Sz 处理，client 端先读取到 D2，然后 D3、D4 被写入 Sy、Sz</li><li>第 5 次更新时 client 端读取到 D2、D3 和 D4 3 个数据版本，通过类似 Vector clock 判断同时发生关系的方法可判断 D3、D4 存在数据冲突，最终通过一定方法解决数据冲突并写入 D5</li></ul><p>Vector clock 只用于发现数据冲突，不能解决数据冲突。如何解决数据冲突因场景而异，具体方法有以最后更新为准(last write win)，或将冲突的数据交给 client 由 client 端决定如何处理，或通过 quorum 决议事先避免数据冲突的情况发生(11)。</p><p>由于记录了所有数据在所有节点上的逻辑时钟信息，Vector clock 和 Version vector 在实际应用中可能面临的一个问题是 vector 过大，用于数据管理的元数据(meta data)甚至大于数据本(12)。</p><p>解决该问题的方法是使用 server id 取代 client id 创建 vector (因为 server 的数量相对 client 稳定)，或设定最大的 size、如果超过该 size 值则淘汰最旧的 vector 信息(10)(13)。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://lamport.azurewebsites.net/pubs/time-clocks.pdf" target="_blank" rel="noopener noreferrer"><strong>Time, Clocks, and the Ordering of Events in a Distributed System</strong></a>，<a href="https://cloud.tencent.com/developer/article/1163428" target="_blank" rel="noopener noreferrer"><strong>译文</strong></a>，<a href="https://zhuanlan.zhihu.com/p/56146800" target="_blank" rel="noopener noreferrer"><strong>解读</strong></a> - Lamport 介绍 happened before、偏序关系（partial ordering）、逻辑时钟（Logical Clocks）概念，提出解决分布式系统中区分事件发生的时序问题的方法。</li><li><a href="http://courses.csail.mit.edu/6.852/01/papers/VirtTime_GlobState.pdf" target="_blank" rel="noopener noreferrer"><strong>Virtual Time and Global States of Distributed Systems</strong></a>，<a href="https://zhuanlan.zhihu.com/p/56886156" target="_blank" rel="noopener noreferrer"><strong>解读</strong></a> - 逻辑时钟无法描述事件的因果关系。本文提出了向量时钟，这种算法利用了向量这种数据结构将全局各个进程的逻辑时间戳广播给各个进程，通过向量时间戳就能够比较任意两个事件的因果关系。</li><li><a href="https://zhuanlan.zhihu.com/p/23278509" target="_blank" rel="noopener noreferrer">分布式系统理论基础 - 时间、时钟和事件顺序</a></li></ul>',51)]))}const l=t(i,[["render",n],["__file","index.html.vue"]]),s=JSON.parse('{"path":"/pages/143313/","title":"逻辑时钟","lang":"zh-CN","frontmatter":{"title":"逻辑时钟","date":"2024-04-28T22:02:18.000Z","order":2,"categories":["分布式","分布式理论"],"tags":["分布式","理论","逻辑时钟","全序","偏序"],"permalink":"/pages/143313/","description":"逻辑时钟 什么是逻辑时钟 1978 年，Lamport 在 Time, Clocks, and the Ordering of Events in a Distributed System 中提出了逻辑时钟的概念，来解决分布式系统中区分事件发生的时序问题。 逻辑时钟指的是分布式系统中用于区分事件的发生顺序的时间机制。 为什么需要逻辑时钟 对于程序来说，...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/143313/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"逻辑时钟"}],["meta",{"property":"og:description","content":"逻辑时钟 什么是逻辑时钟 1978 年，Lamport 在 Time, Clocks, and the Ordering of Events in a Distributed System 中提出了逻辑时钟的概念，来解决分布式系统中区分事件发生的时序问题。 逻辑时钟指的是分布式系统中用于区分事件的发生顺序的时间机制。 为什么需要逻辑时钟 对于程序来说，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://pic2.zhimg.com/80/v2-8f34d242db587edc776d863de2565845_720w.webp"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"分布式"}],["meta",{"property":"article:tag","content":"理论"}],["meta",{"property":"article:tag","content":"逻辑时钟"}],["meta",{"property":"article:tag","content":"全序"}],["meta",{"property":"article:tag","content":"偏序"}],["meta",{"property":"article:published_time","content":"2024-04-28T22:02:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"逻辑时钟\\",\\"image\\":[\\"https://pic2.zhimg.com/80/v2-8f34d242db587edc776d863de2565845_720w.webp\\",\\"https://pic3.zhimg.com/80/v2-2613ec2d7fd0fd6d7d936731306cb432_720w.webp\\",\\"https://pic2.zhimg.com/80/v2-e88cec85c18803dbd6f0f18ae72ea721_720w.webp\\"],\\"datePublished\\":\\"2024-04-28T22:02:18.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"什么是逻辑时钟","slug":"什么是逻辑时钟","link":"#什么是逻辑时钟","children":[]},{"level":2,"title":"为什么需要逻辑时钟","slug":"为什么需要逻辑时钟","link":"#为什么需要逻辑时钟","children":[]},{"level":2,"title":"全序与偏序","slug":"全序与偏序","link":"#全序与偏序","children":[{"level":3,"title":"什么是偏序","slug":"什么是偏序","link":"#什么是偏序","children":[]},{"level":3,"title":"什么是全序","slug":"什么是全序","link":"#什么是全序","children":[]},{"level":3,"title":"时序的关键","slug":"时序的关键","link":"#时序的关键","children":[]}]},{"level":2,"title":"逻辑时钟","slug":"逻辑时钟-1","link":"#逻辑时钟-1","children":[]},{"level":2,"title":"向量时钟","slug":"向量时钟","link":"#向量时钟","children":[]},{"level":2,"title":"版本时钟","slug":"版本时钟","link":"#版本时钟","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1749521666000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":7.73,"words":2318},"filePathRelative":"posts/15.分布式/01.分布式理论/02.逻辑时钟.md","localizedDate":"2024年4月28日","excerpt":"\\n<h2>什么是逻辑时钟</h2>\\n<p>1978 年，Lamport 在 <a href=\\"https://lamport.azurewebsites.net/pubs/time-clocks.pdf\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><strong>Time, Clocks, and the Ordering of Events in a Distributed System</strong></a> 中提出了逻辑时钟的概念，来解决分布式系统中区分事件发生的时序问题。</p>\\n<p><strong>逻辑时钟指的是分布式系统中用于区分事件的发生顺序的时间机制</strong>。</p>","autoDesc":true}');export{l as comp,s as data};
