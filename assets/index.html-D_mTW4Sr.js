import{_ as t,c as r,b as a,o as l}from"./app-BFfpq37r.js";const i={};function n(o,e){return l(),r("div",null,e[0]||(e[0]=[a('<h1 id="如何设计系统" tabindex="-1"><a class="header-anchor" href="#如何设计系统"><span>如何设计系统</span></a></h1><h2 id="系统设计过程" tabindex="-1"><a class="header-anchor" href="#系统设计过程"><span>系统设计过程</span></a></h2><h3 id="步骤一、约束和用例" tabindex="-1"><a class="header-anchor" href="#步骤一、约束和用例"><span>步骤一、约束和用例</span></a></h3><p>对于任何系统设计，第一件应该做的事是：阐明系统的约束并确定系统需要满足哪些用例。</p><p>永远不要假设没有明确说明的事情。一定要尽力收集、理解需求，并设计一个很好地涵盖这些要求的解决方案。</p><p>例如，URL 缩短服务可能只为几千个用户提供服务，但每个用户都可能共享数百万个 URL。它可能旨在处理对缩短的 URL 的数百万次点击或数十次点击。该服务可能必须提供有关每个缩短的 URL 的大量统计信息（这会增加您的数据大小），或者可能根本不需要统计信息。</p><p>您还必须考虑预期会发生的用例。您的系统将根据其预期功能进行设计。不要忘记确保你知道面试官一开始没有告诉你的所有要求。</p><h3 id="步骤二、顶层设计" tabindex="-1"><a class="header-anchor" href="#步骤二、顶层设计"><span>步骤二、顶层设计</span></a></h3><p>一旦确定了要设计的系统的范围，接下来就要做顶层设计：概述系统架构中所需的所有重要组件。</p><p>此时，应该绘制出主要组件以及它们之间的连接。通常，这种顶层设计是基于主流技术的组合。这就要求设计必须熟悉这些技术，了解其利弊以及适合使用的场景。</p><h3 id="步骤三、分析瓶颈" tabindex="-1"><a class="header-anchor" href="#步骤三、分析瓶颈"><span>步骤三、分析瓶颈</span></a></h3><p>顶层设计很可能会遇到一个或多个瓶颈。这完全没问题，不要指望一个新系统可以立即处理世界上的所有负载。它只需要可扩展，以便您能够使用一些标准工具和技术对其进行改进。</p><p>现在有了顶层设计，就要考虑这些组件在系统扩展时面临的瓶颈。也许，系统需要一个负载均衡器和集群来处理用户请求。或者，由于数据容量庞大，以至于需要将数据库分库分表（分布在多台机器上）。这些方案有什么利弊，是否适用？数据库是否太慢，是否需要一些内存缓存？</p><p>通常每个解决方案都是某种权衡和取舍。改变某事会使其他事情恶化。然而，重要的是能够讨论这些权衡，并根据定义的约束和用例来衡量它们对系统的影响。</p><p>一旦分析清楚核心瓶颈，就可以着手在下一步中去解决它们。</p><h3 id="步骤四、扩展设计" tabindex="-1"><a class="header-anchor" href="#步骤四、扩展设计"><span>步骤四、扩展设计</span></a></h3><p>首先，你需要了解以下技术手段：</p><ul><li>垂直扩展</li><li>水平罗占</li><li>缓存</li><li>负载均衡</li><li>数据库复制</li><li>数据库分区</li><li>异步</li><li>NoSql</li></ul><p>在系统设计方面，回顾现实中的架构非常有用。注意使用了哪些技术。继续研究每一项新技术，看看它解决了什么问题，它的替代品是什么，它擅长的地方，以及失败的地方。</p><p>一切都是权衡的结果——这是系统设计中最基本的概念之一。</p><p>一些推荐的学习资料</p><ul><li><a href="http://highscalability.com/blog/2017/10/23/one-model-at-a-time-integrating-and-running-deep-learning-mo.html" target="_blank" rel="noopener noreferrer">生产中的深度学习</a>：关于 EyeEm 如何构建在大量图像上运行多个深度学习模型的生产系统的精彩故事</li><li><a href="http://highscalability.com/blog/2016/10/12/lessons-learned-from-scaling-uber-to-2000-engineers-1000-ser.html" target="_blank" rel="noopener noreferrer">Uber</a>：一篇关于 Uber 如何快速扩展的好文章，关于将您的服务分解为分布在许多存储库中的许多微服务。</li><li><a href="http://highscalability.com/blog/2016/6/27/how-facebook-live-streams-to-800000-simultaneous-viewers.html" target="_blank" rel="noopener noreferrer">Facebook</a>：Facebook 如何在直播中同时处理 800,000 名观众</li><li><a href="http://highscalability.com/blog/2016/6/15/the-image-optimization-technology-that-serves-millions-of-re.html" target="_blank" rel="noopener noreferrer">Kraken.io</a>：如何大规模缩放图像优化，本文将更详细地看一些具体使用的硬件方案，以及部署、监控等重要方面</li><li><a href="http://highscalability.com/blog/2016/4/20/how-twitter-handles-3000-images-per-second.html" target="_blank" rel="noopener noreferrer">Twitter</a>：Twitter 如何处理每秒 3,000 张图片上传以及为什么它使用的旧方式现在行不通</li><li>最后，Twitter 子组件的一些很好的例子：存储数据（<a href="https://www.youtube.com/watch?v=5cKTP36HVgI" target="_blank" rel="noopener noreferrer">video</a> | <a href="http://highscalability.com/blog/2011/12/19/how-twitter-stores-250-million-tweets-a-day-using-mysql.html" target="_blank" rel="noopener noreferrer">text</a>）和时间轴（<a href="http://www.infoq.com/presentations/Twitter-Timeline-Scalability" target="_blank" rel="noopener noreferrer">video</a> | <a href="http://highscalability.com/blog/2013/7/8/the-architecture-twitter-uses-to-deal-with-150m-active-users.html" target="_blank" rel="noopener noreferrer">text</a>）。</li><li>有关更高级的示例，请查看 Google、Youtube（<a href="https://www.youtube.com/watch?v=w5WVu624fY8" target="_blank" rel="noopener noreferrer">video</a> | <a href="http://highscalability.com/youtube-architecture" target="_blank" rel="noopener noreferrer">text</a>）、<a href="http://highscalability.com/blog/2012/2/13/tumblr-architecture-15-billion-page-views-a-month-and-harder.html" target="_blank" rel="noopener noreferrer">Tumblr</a>、<a href="http://highscalability.com/blog/2009/8/5/stack-overflow-architecture.html" target="_blank" rel="noopener noreferrer">StackOverflow</a> 和 <a href="http://highscalability.com/blog/2011/11/29/datasift-architecture-realtime-datamining-at-120000-tweets-p.html" target="_blank" rel="noopener noreferrer">Datashift</a> 上的这些帖子。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://github.com/donnemartin/system-design-primer" target="_blank" rel="noopener noreferrer">system-design-primer</a></li><li><a href="https://www.hiredintech.com/courses/system-design" target="_blank" rel="noopener noreferrer">System Design for Tech Interviews</a></li></ul>',24)]))}const p=t(i,[["render",n],["__file","index.html.vue"]]),s=JSON.parse('{"path":"/pages/0a89f3/","title":"如何设计系统","lang":"zh-CN","frontmatter":{"title":"如何设计系统","date":"2021-11-08T08:15:33.000Z","order":0,"categories":["设计","架构","综合"],"tags":["架构","设计"],"permalink":"/pages/0a89f3/","description":"如何设计系统 系统设计过程 步骤一、约束和用例 对于任何系统设计，第一件应该做的事是：阐明系统的约束并确定系统需要满足哪些用例。 永远不要假设没有明确说明的事情。一定要尽力收集、理解需求，并设计一个很好地涵盖这些要求的解决方案。 例如，URL 缩短服务可能只为几千个用户提供服务，但每个用户都可能共享数百万个 URL。它可能旨在处理对缩短的 URL 的数...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/0a89f3/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"如何设计系统"}],["meta",{"property":"og:description","content":"如何设计系统 系统设计过程 步骤一、约束和用例 对于任何系统设计，第一件应该做的事是：阐明系统的约束并确定系统需要满足哪些用例。 永远不要假设没有明确说明的事情。一定要尽力收集、理解需求，并设计一个很好地涵盖这些要求的解决方案。 例如，URL 缩短服务可能只为几千个用户提供服务，但每个用户都可能共享数百万个 URL。它可能旨在处理对缩短的 URL 的数..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"架构"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:published_time","content":"2021-11-08T08:15:33.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"如何设计系统\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-08T08:15:33.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"系统设计过程","slug":"系统设计过程","link":"#系统设计过程","children":[{"level":3,"title":"步骤一、约束和用例","slug":"步骤一、约束和用例","link":"#步骤一、约束和用例","children":[]},{"level":3,"title":"步骤二、顶层设计","slug":"步骤二、顶层设计","link":"#步骤二、顶层设计","children":[]},{"level":3,"title":"步骤三、分析瓶颈","slug":"步骤三、分析瓶颈","link":"#步骤三、分析瓶颈","children":[]},{"level":3,"title":"步骤四、扩展设计","slug":"步骤四、扩展设计","link":"#步骤四、扩展设计","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1746520802000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":3,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":3.98,"words":1193},"filePathRelative":"posts/03.design/01.架构/00.综合/00.如何设计系统.md","localizedDate":"2021年11月8日","excerpt":"\\n<h2>系统设计过程</h2>\\n<h3>步骤一、约束和用例</h3>\\n<p>对于任何系统设计，第一件应该做的事是：阐明系统的约束并确定系统需要满足哪些用例。</p>\\n<p>永远不要假设没有明确说明的事情。一定要尽力收集、理解需求，并设计一个很好地涵盖这些要求的解决方案。</p>\\n<p>例如，URL 缩短服务可能只为几千个用户提供服务，但每个用户都可能共享数百万个 URL。它可能旨在处理对缩短的 URL 的数百万次点击或数十次点击。该服务可能必须提供有关每个缩短的 URL 的大量统计信息（这会增加您的数据大小），或者可能根本不需要统计信息。</p>\\n<p>您还必须考虑预期会发生的用例。您的系统将根据其预期功能进行设计。不要忘记确保你知道面试官一开始没有告诉你的所有要求。</p>","autoDesc":true}');export{p as comp,s as data};
