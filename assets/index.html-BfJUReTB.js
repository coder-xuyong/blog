import{_ as s,c as a,b as n,o as l}from"./app-B3w6zkhK.js";const h={};function t(e,i){return l(),a("div",null,i[0]||(i[0]=[n(`<h1 id="jmh-快速入门" tabindex="-1"><a class="header-anchor" href="#jmh-快速入门"><span>JMH 快速入门</span></a></h1><h2 id="基准测试简介" tabindex="-1"><a class="header-anchor" href="#基准测试简介"><span>基准测试简介</span></a></h2><h3 id="什么是基准测试" tabindex="-1"><a class="header-anchor" href="#什么是基准测试"><span>什么是基准测试</span></a></h3><p>基准测试是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。</p><p>现代软件常常都把高性能作为目标。那么，何为高性能，性能就是快，更快吗？显然，如果没有一个量化的标准，难以衡量性能的好坏。</p><p>不同的基准测试其具体内容和范围也存在很大的不同。如果是专业的性能工程师，更加熟悉的可能是类似 SPEC 提供的工业标准的系统级测试；而对于大多数 Java 开发者，更熟悉的则是范围相对较小、关注点更加细节的微基准测试（Micro-Benchmark）。何谓 Micro Benchmark 呢？ 简单地说就是在 method 层面上的 benchmark，精度可以精确到 <strong>微秒级</strong>。</p><h3 id="何时需要微基准测试" tabindex="-1"><a class="header-anchor" href="#何时需要微基准测试"><span>何时需要微基准测试</span></a></h3><p>微基准测试大多是 API 级别的性能测试。</p><p>微基准测试的适用场景：</p><ul><li>如果开发公共类库、中间件，会被其他模块经常调用的 API。</li><li>对于性能，如响应延迟、吞吐量有严格要求的核心 API。</li></ul><h2 id="jmh-简介" tabindex="-1"><a class="header-anchor" href="#jmh-简介"><span>JMH 简介</span></a></h2><p><a href="http://openjdk.java.net/projects/code-tools/jmh/" target="_blank" rel="noopener noreferrer">JMH(即 Java Microbenchmark Harness)</a>，是目前主流的微基准测试框架。JMH 是由 Hotspot JVM 团队专家开发的，除了支持完整的基准测试过程，包括预热、运行、统计和报告等，还支持 Java 和其他 JVM 语言。更重要的是，它针对 Hotspot JVM 提供了各种特性，以保证基准测试的正确性，整体准确性大大优于其他框架，并且，JMH 还提供了用近乎白盒的方式进行 Profiling 等工作的能力。</p><h3 id="为什么需要-jmh" tabindex="-1"><a class="header-anchor" href="#为什么需要-jmh"><span>为什么需要 JMH</span></a></h3><h4 id="死码消除" tabindex="-1"><a class="header-anchor" href="#死码消除"><span>死码消除</span></a></h4><p>所谓死码，是指注释的代码，不可达的代码块，可达但不被使用的代码等等 。</p><h4 id="常量折叠与常量传播" tabindex="-1"><a class="header-anchor" href="#常量折叠与常量传播"><span>常量折叠与常量传播</span></a></h4><p><a href="https://zh.wikipedia.org/wiki/%E5%B8%B8%E6%95%B8%E6%8A%98%E7%96%8A#%E5%B8%B8%E6%95%B8%E5%82%B3%E6%92%AD" target="_blank" rel="noopener noreferrer">常量折叠</a> (Constant folding) 是一个在编译时期简化常数的一个过程，常数在表示式中仅仅代表一个简单的数值，就像是整数 <code>2</code>，若是一个变数从未被修改也可作为常数，或者直接将一个变数被明确地被标注为常数，例如下面的描述：</p><h3 id="jmh-的注意点" tabindex="-1"><a class="header-anchor" href="#jmh-的注意点"><span>JMH 的注意点</span></a></h3><ul><li>测试前需要预热。</li><li>防止无用代码进入测试方法中。</li><li>并发测试。</li><li>测试结果呈现。</li></ul><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><ol><li>当你已经找出了热点函数，而需要对热点函数进行进一步的优化时，就可以使用 JMH 对优化的效果进行定量的分析。</li><li>想定量地知道某个函数需要执行多长时间，以及执行时间和输入 n 的相关性</li><li>一个函数有两种不同实现（例如 JSON 序列化/反序列化有 Jackson 和 Gson 实现），不知道哪种实现性能更好</li></ol><h3 id="jmh-概念" tabindex="-1"><a class="header-anchor" href="#jmh-概念"><span>JMH 概念</span></a></h3><ul><li><code>Iteration</code> - iteration 是 JMH 进行测试的最小单位，包含一组 invocations。</li><li><code>Invocation</code> - 一次 benchmark 方法调用。</li><li><code>Operation</code> - benchmark 方法中，被测量操作的执行。如果被测试的操作在 benchmark 方法中循环执行，可以使用<code>@OperationsPerInvocation</code>表明循环次数，使测试结果为单次 operation 的性能。</li><li><code>Warmup</code> - 在实际进行 benchmark 前先进行预热。因为某个函数被调用多次之后，JIT 会对其进行编译，通过预热可以使测量结果更加接近真实情况。</li></ul><h2 id="jmh-快速入门-1" tabindex="-1"><a class="header-anchor" href="#jmh-快速入门-1"><span>JMH 快速入门</span></a></h2><h3 id="添加-maven-依赖" tabindex="-1"><a class="header-anchor" href="#添加-maven-依赖"><span>添加 maven 依赖</span></a></h3><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.openjdk.jmh&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;jmh-core&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;\${jmh.version}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.openjdk.jmh&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;jmh-generator-annprocess&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;\${jmh.version}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;provided&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="测试代码" tabindex="-1"><a class="header-anchor" href="#测试代码"><span>测试代码</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.openjdk.jmh.annotations.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.openjdk.jmh.runner.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.concurrent.TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">BenchmarkMode</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Mode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Throughput</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Warmup</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">iterations</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Measurement</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">iterations</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> time</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> timeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Threads</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Fork</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">OutputTimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TimeUnit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">MILLISECONDS</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StringBuilderBenchmark</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Benchmark</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testStringAdd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            a </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> i;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // System.out.println(a);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Benchmark</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testStringBuilderAdd</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        StringBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sb</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> StringBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; i++) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            sb</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(i);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // System.out.println(sb.toString());</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RunnerException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Options</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> options</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> OptionsBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">include</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">StringBuilderBenchmark</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSimpleName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">output</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;d:/Benchmark.log&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Runner</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(options).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="执行-jmh" tabindex="-1"><a class="header-anchor" href="#执行-jmh"><span>执行 JMH</span></a></h3><h4 id="命令行" tabindex="-1"><a class="header-anchor" href="#命令行"><span>命令行</span></a></h4><p>（1）初始化 <strong>benchmarking</strong> 工程</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> archetype:generate</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          -DinteractiveMode=false</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          -DarchetypeGroupId=org.openjdk.jmh</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          -DarchetypeArtifactId=jmh-java-benchmark-archetype</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          -DgroupId=org.sample</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          -DartifactId=test</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\</span></span>
<span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">          -Dversion=1.0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>（2）构建 benchmark</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">cd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> test/</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">mvn</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> clean</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> install</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>（3）运行 benchmark</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">java</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -jar</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> target/benchmarks.jar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="执行-main-方法" tabindex="-1"><a class="header-anchor" href="#执行-main-方法"><span>执行 main 方法</span></a></h4><p>执行 main 方法，耐心等待测试结果，最终会生成一个测试报告，内容大致如下；</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># JMH version: 1.22</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># VM invoker: C:\\Program Files\\Java\\jdk1.8.0_181\\jre\\bin\\java.exe</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># VM options: -javaagent:D:\\Program Files\\JetBrains\\IntelliJ IDEA 2019.2.3\\lib\\idea_rt.jar=58635:D:\\Program Files\\JetBrains\\IntelliJ IDEA 2019.2.3\\bin -Dfile.encoding=UTF-8</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup: 3 iterations, 10 s each</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Measurement: 10 iterations, 5 s each</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Timeout: 10 min per iteration</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Threads: 8 threads, will synchronize iterations</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Benchmark mode: Throughput, ops/time</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Benchmark: io.github.dunwu.javatech.jmh.StringBuilderBenchmark.testStringAdd</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Run progress: 0.00% complete, ETA 00:05:20</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Fork: 1 of 2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup Iteration   1: 21803.050 ops/ms</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup Iteration   2: 22501.860 ops/ms</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup Iteration   3: 20953.944 ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   1:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21627.645</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   2:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21215.269</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   3:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 20863.282</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   4:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21617.715</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   5:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21695.645</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   6:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21886.784</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   7:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21986.899</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   8:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22389.540</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   9:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22507.313</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  10:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22124.133</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Run progress: 25.00% complete, ETA 00:04:02</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Fork: 2 of 2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup Iteration   1: 22262.108 ops/ms</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup Iteration   2: 21567.804 ops/ms</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup Iteration   3: 21787.002 ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   1:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21598.970</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   2:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22486.133</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   3:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22157.834</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   4:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22321.827</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   5:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22477.063</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   6:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22154.760</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   7:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 21561.095</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   8:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22194.863</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   9:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22493.844</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  10:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22568.078</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Result</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;io.github.dunwu.javatech.jmh.StringBuilderBenchmark.testStringAdd&quot;:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  21996.435</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ±</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">99.9%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">412.955</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [Average]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">min,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> avg,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (20863.282, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">21996.435,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 22568.078</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), stdev = 475.560</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  CI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (99.9%): [21583.480, 22409.390] (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assumes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> normal</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> distribution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># JMH version: 1.22</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># VM version: JDK 1.8.0_181, Java HotSpot(TM) 64-Bit Server VM, 25.181-b13</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># VM invoker: C:\\Program Files\\Java\\jdk1.8.0_181\\jre\\bin\\java.exe</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># VM options: -javaagent:D:\\Program Files\\JetBrains\\IntelliJ IDEA 2019.2.3\\lib\\idea_rt.jar=58635:D:\\Program Files\\JetBrains\\IntelliJ IDEA 2019.2.3\\bin -Dfile.encoding=UTF-8</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup: 3 iterations, 10 s each</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Measurement: 10 iterations, 5 s each</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Timeout: 10 min per iteration</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Threads: 8 threads, will synchronize iterations</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Benchmark mode: Throughput, ops/time</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Benchmark: io.github.dunwu.javatech.jmh.StringBuilderBenchmark.testStringBuilderAdd</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Run progress: 50.00% complete, ETA 00:02:41</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Fork: 1 of 2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup Iteration   1: 241500.886 ops/ms</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup Iteration   2: 134206.032 ops/ms</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup Iteration   3: 86907.846 ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   1:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 86143.339</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   2:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 74725.356</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   3:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 72316.121</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   4:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 77319.716</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   5:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 83469.256</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   6:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 87712.360</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   7:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 79421.899</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   8:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 80867.839</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   9:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 82619.163</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  10:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 87026.928</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Run progress: 75.00% complete, ETA 00:01:20</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Fork: 2 of 2</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup Iteration   1: 228342.337 ops/ms</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup Iteration   2: 124737.248 ops/ms</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Warmup Iteration   3: 82598.851 ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   1:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 86877.318</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   2:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 89388.624</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   3:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 88523.558</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   4:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 87547.332</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   5:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 88376.087</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   6:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 88848.837</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   7:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 85998.124</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   8:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 86796.998</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   9:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 87994.726</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Iteration</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  10:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 87784.453</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Result</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;io.github.dunwu.javatech.jmh.StringBuilderBenchmark.testStringBuilderAdd&quot;:</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  84487.902</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ±</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">99.9%</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">4355.525</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ops/ms</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [Average]</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">min,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> avg,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> max</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (72316.121, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">84487.902,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 89388.624</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), stdev = 5015.829</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  CI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (99.9%): [80132.377, 88843.427] (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assumes</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> normal</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> distribution</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># Run complete. Total time: 00:05:23</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">REMEMBER:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> The</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> numbers</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> below</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> are</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> just</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> data.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> To</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> gain</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reusable</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> insights,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> you</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> need</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> follow</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> up</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">why</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> numbers</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> are</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> way</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> they</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> are.</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> Use</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> profilers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (see </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">-prof,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -lprof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), design factorial</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">experiments,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> perform</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> baseline</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> and</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> negative</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tests</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> that</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> provide</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> experimental</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> control,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> make</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sure</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> benchmarking</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> environment</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> is</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> safe</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> on</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> JVM/OS/HW</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> level,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ask</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> for</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> reviews</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> domain</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> experts.</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Do</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> not</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> assume</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> the</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> numbers</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tell</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> you</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> what</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> you</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> want</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> them</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> tell.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Benchmark</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">                                     Mode</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  Cnt</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      Score</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">      Error</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">   Units</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">StringBuilderBenchmark.testStringAdd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">         thrpt</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   20</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  21996.435</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ±</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  412.955</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ops/ms</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">StringBuilderBenchmark.testStringBuilderAdd</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  thrpt</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">   20</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">  84487.902</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> ±</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4355.525</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  ops/ms</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="jmh-api" tabindex="-1"><a class="header-anchor" href="#jmh-api"><span>JMH API</span></a></h2><p>下面来了解一下 jmh 常用 API</p><h3 id="benchmarkmode" tabindex="-1"><a class="header-anchor" href="#benchmarkmode"><span>@BenchmarkMode</span></a></h3><p>基准测试类型。这里选择的是 <code>Throughput</code> 也就是吞吐量。根据源码点进去，每种类型后面都有对应的解释，比较好理解，吞吐量会得到单位时间内可以进行的操作数。</p><ul><li><code>Throughput</code> - 整体吞吐量，例如“1 秒内可以执行多少次调用”。</li><li><code>AverageTime</code> - 调用的平均时间，例如“每次调用平均耗时 xxx 毫秒”。</li><li><code>SampleTime</code> - 随机取样，最后输出取样结果的分布，例如“99%的调用在 xxx 毫秒以内，99.99%的调用在 xxx 毫秒以内”</li><li><code>SingleShotTime</code> - 以上模式都是默认一次 iteration 是 1s，唯有 SingleShotTime 是只运行一次。往往同时把 warmup 次数设为 0，用于测试冷启动时的性能。</li><li><code>All</code> - 所有模式</li></ul><h3 id="warmup" tabindex="-1"><a class="header-anchor" href="#warmup"><span>@Warmup</span></a></h3><p>上面我们提到了，进行基准测试前需要进行预热。一般我们前几次进行程序测试的时候都会比较慢， 所以要让程序进行几轮预热，保证测试的准确性。其中的参数 iterations 也就非常好理解了，就是预热轮数。</p><p>为什么需要预热？因为 JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM 会尝试将其编译成为机器码从而提高执行速度。所以为了让 benchmark 的结果更加接近真实情况就需要进行预热。</p><h3 id="measurement" tabindex="-1"><a class="header-anchor" href="#measurement"><span>@Measurement</span></a></h3><p>度量，其实就是一些基本的测试参数。</p><ul><li><code>iterations</code> - 进行测试的轮次</li><li><code>time</code> - 每轮进行的时长</li><li><code>timeUnit</code> - 时长单位</li></ul><p>都是一些基本的参数，可以根据具体情况调整。一般比较重的东西可以进行大量的测试，放到服务器上运行。</p><h3 id="threads" tabindex="-1"><a class="header-anchor" href="#threads"><span>@Threads</span></a></h3><p>每个进程中的测试线程，这个非常好理解，根据具体情况选择，一般为 cpu 乘以 2。</p><h3 id="fork" tabindex="-1"><a class="header-anchor" href="#fork"><span>@Fork</span></a></h3><p>进行 fork 的次数。如果 fork 数是 2 的话，则 JMH 会 fork 出两个进程来进行测试。</p><h3 id="outputtimeunit" tabindex="-1"><a class="header-anchor" href="#outputtimeunit"><span>@OutputTimeUnit</span></a></h3><p>这个比较简单了，基准测试结果的时间类型。一般选择秒、毫秒、微秒。</p><h3 id="benchmark" tabindex="-1"><a class="header-anchor" href="#benchmark"><span>@Benchmark</span></a></h3><p>方法级注解，表示该方法是需要进行 benchmark 的对象，用法和 JUnit 的 @Test 类似。</p><h3 id="param" tabindex="-1"><a class="header-anchor" href="#param"><span>@Param</span></a></h3><p>属性级注解，@Param 可以用来指定某项参数的多种情况。特别适合用来测试一个函数在不同的参数输入的情况下的性能。</p><h3 id="setup" tabindex="-1"><a class="header-anchor" href="#setup"><span>@Setup</span></a></h3><p>方法级注解，这个注解的作用就是我们需要在测试之前进行一些准备工作，比如对一些数据的初始化之类的。</p><h3 id="teardown" tabindex="-1"><a class="header-anchor" href="#teardown"><span>@TearDown</span></a></h3><p>方法级注解，这个注解的作用就是我们需要在测试之后进行一些结束工作，比如关闭线程池，数据库连接等的，主要用于资源的回收等。</p><h3 id="state" tabindex="-1"><a class="header-anchor" href="#state"><span>@State</span></a></h3><p>当使用 @Setup 参数的时候，必须在类上加这个参数，不然会提示无法运行。</p><p>State 用于声明某个类是一个“状态”，然后接受一个 Scope 参数用来表示该状态的共享范围。 因为很多 benchmark 会需要一些表示状态的类，JMH 允许你把这些类以依赖注入的方式注入到 benchmark 函数里。Scope 主要分为三种。</p><ul><li><code>Thread</code> - 该状态为每个线程独享。</li><li><code>Group</code> - 该状态为同一个组里面所有线程共享。</li><li><code>Benchmark</code> - 该状态在所有线程间共享。</li></ul><p>关于 State 的用法，官方的 code sample 里有比较好的<a href="http://hg.openjdk.java.net/code-tools/jmh/file/cb9aa824b55a/jmh-samples/src/main/java/org/openjdk/jmh/samples/JMHSample_03_States.java" target="_blank" rel="noopener noreferrer">例子</a>。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/" target="_blank" rel="noopener noreferrer">jmh 官方示例</a></li><li><a href="https://www.xncoding.com/2018/01/07/java/jmh.html" target="_blank" rel="noopener noreferrer">Java 微基准测试框架 JMH</a></li><li><a href="https://www.cnkirito.moe/java-jmh/" target="_blank" rel="noopener noreferrer">JAVA 拾遗 — JMH 与 8 个测试陷阱</a></li></ul>`,72)]))}const p=s(h,[["render",t],["__file","index.html.vue"]]),r=JSON.parse('{"path":"/pages/9c6402/","title":"JMH 快速入门","lang":"zh-CN","frontmatter":{"title":"JMH 快速入门","date":"2022-02-17T22:34:30.000Z","order":4,"categories":["Java","工具","测试"],"tags":["Java","测试","JUnit"],"permalink":"/pages/9c6402/","description":"JMH 快速入门 基准测试简介 什么是基准测试 基准测试是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。 现代软件常常都把高性能作为目标。那么，何为高性能，性能就是快，更快吗？显然，如果没有一个量化的标准，难以衡量性能的好坏。 不同的基准测试其具体内容和范围也存在很大的不同。如果是专业的性能工程...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/9c6402/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"JMH 快速入门"}],["meta",{"property":"og:description","content":"JMH 快速入门 基准测试简介 什么是基准测试 基准测试是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。 现代软件常常都把高性能作为目标。那么，何为高性能，性能就是快，更快吗？显然，如果没有一个量化的标准，难以衡量性能的好坏。 不同的基准测试其具体内容和范围也存在很大的不同。如果是专业的性能工程..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"测试"}],["meta",{"property":"article:tag","content":"JUnit"}],["meta",{"property":"article:published_time","content":"2022-02-17T22:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JMH 快速入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-17T22:34:30.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"基准测试简介","slug":"基准测试简介","link":"#基准测试简介","children":[{"level":3,"title":"什么是基准测试","slug":"什么是基准测试","link":"#什么是基准测试","children":[]},{"level":3,"title":"何时需要微基准测试","slug":"何时需要微基准测试","link":"#何时需要微基准测试","children":[]}]},{"level":2,"title":"JMH 简介","slug":"jmh-简介","link":"#jmh-简介","children":[{"level":3,"title":"为什么需要 JMH","slug":"为什么需要-jmh","link":"#为什么需要-jmh","children":[]},{"level":3,"title":"JMH 的注意点","slug":"jmh-的注意点","link":"#jmh-的注意点","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":3,"title":"JMH 概念","slug":"jmh-概念","link":"#jmh-概念","children":[]}]},{"level":2,"title":"JMH 快速入门","slug":"jmh-快速入门-1","link":"#jmh-快速入门-1","children":[{"level":3,"title":"添加 maven 依赖","slug":"添加-maven-依赖","link":"#添加-maven-依赖","children":[]},{"level":3,"title":"测试代码","slug":"测试代码","link":"#测试代码","children":[]},{"level":3,"title":"执行 JMH","slug":"执行-jmh","link":"#执行-jmh","children":[]}]},{"level":2,"title":"JMH API","slug":"jmh-api","link":"#jmh-api","children":[{"level":3,"title":"@BenchmarkMode","slug":"benchmarkmode","link":"#benchmarkmode","children":[]},{"level":3,"title":"@Warmup","slug":"warmup","link":"#warmup","children":[]},{"level":3,"title":"@Measurement","slug":"measurement","link":"#measurement","children":[]},{"level":3,"title":"@Threads","slug":"threads","link":"#threads","children":[]},{"level":3,"title":"@Fork","slug":"fork","link":"#fork","children":[]},{"level":3,"title":"@OutputTimeUnit","slug":"outputtimeunit","link":"#outputtimeunit","children":[]},{"level":3,"title":"@Benchmark","slug":"benchmark","link":"#benchmark","children":[]},{"level":3,"title":"@Param","slug":"param","link":"#param","children":[]},{"level":3,"title":"@Setup","slug":"setup","link":"#setup","children":[]},{"level":3,"title":"@TearDown","slug":"teardown","link":"#teardown","children":[]},{"level":3,"title":"@State","slug":"state","link":"#state","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1749521666000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":8.8,"words":2641},"filePathRelative":"posts/01.Java/12.工具/04.测试/04.JMH.md","localizedDate":"2022年2月17日","excerpt":"\\n<h2>基准测试简介</h2>\\n<h3>什么是基准测试</h3>\\n<p>基准测试是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。</p>\\n<p>现代软件常常都把高性能作为目标。那么，何为高性能，性能就是快，更快吗？显然，如果没有一个量化的标准，难以衡量性能的好坏。</p>\\n<p>不同的基准测试其具体内容和范围也存在很大的不同。如果是专业的性能工程师，更加熟悉的可能是类似 SPEC 提供的工业标准的系统级测试；而对于大多数 Java 开发者，更熟悉的则是范围相对较小、关注点更加细节的微基准测试（Micro-Benchmark）。何谓 Micro Benchmark 呢？ 简单地说就是在 method 层面上的 benchmark，精度可以精确到 <strong>微秒级</strong>。</p>","autoDesc":true}');export{p as comp,r as data};
