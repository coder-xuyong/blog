import{_ as t,c as a,b as r,o as n}from"./app-D4aAnUWn.js";const i={};function s(o,e){return n(),a("div",null,e[0]||(e[0]=[r('<blockquote><p>翻译自：<a href="https://sourcemaking.com/refactoring/smells/change-preventers" target="_blank" rel="noopener noreferrer">https://sourcemaking.com/refactoring/smells/change-preventers</a></p><p><strong>变革的障碍(Change Preventers)这组坏味道意味着：当你需要改变一处代码时，却发现不得不改变其他的地方。这使得程序开发变得复杂、代价高昂。</strong></p></blockquote><h2 id="发散式变化" tabindex="-1"><a class="header-anchor" href="#发散式变化"><span>发散式变化</span></a></h2><blockquote><p><code>发散式变化(Divergent Change)</code> 类似于 <code>霰弹式修改(Shotgun Surgery)</code> ，但实际上完全不同。<code>发散式变化(Divergent Change)</code> 是指一个类受多种变化的影响。<code>霰弹式修改(Shotgun Surgery)</code> 是指多种变化引发多个类相应的修改。</p></blockquote><h3 id="特征" tabindex="-1"><a class="header-anchor" href="#特征"><span>特征</span></a></h3><p>你发现你想要修改一个函数，却必须要同时修改许多不相关的函数。例如，当你想要添加一个新的产品类型时，你需要同步修改对产品进行查找、显示、排序的函数。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/divergent-change-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题原因" tabindex="-1"><a class="header-anchor" href="#问题原因"><span>问题原因</span></a></h3><p>通常，这种发散式修改是由于编程结构不合理或者“复制-粘贴式编程”。</p><h3 id="解决办法" tabindex="-1"><a class="header-anchor" href="#解决办法"><span>解决办法</span></a></h3><ul><li>运用 <code>提炼类(Extract Class)</code> 拆分类的行为。</li></ul><h3 id="收益" tabindex="-1"><a class="header-anchor" href="#收益"><span>收益</span></a></h3><ul><li>提高代码组织结构</li><li>减少重复代码</li></ul><h3 id="重构方法说明" tabindex="-1"><a class="header-anchor" href="#重构方法说明"><span>重构方法说明</span></a></h3><h4 id="提炼类-extract-class" tabindex="-1"><a class="header-anchor" href="#提炼类-extract-class"><span>提炼类(Extract Class)</span></a></h4><p><strong>问题</strong></p><p>某个类做了不止一件事。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-class-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>建立一个新类，将相关的字段和函数从旧类搬移到新类。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-class-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="平行继承体系" tabindex="-1"><a class="header-anchor" href="#平行继承体系"><span>平行继承体系</span></a></h2><blockquote><p><code>平行继承体系(Parallel Inheritance Hierarchies)</code> 其实是 <code>霰弹式修改(Shotgun Surgery)</code> 的特殊情况。</p></blockquote><h3 id="特征-1" tabindex="-1"><a class="header-anchor" href="#特征-1"><span>特征</span></a></h3><p>每当你为某个类添加一个子类，必须同时为另一个类相应添加一个子类。这种情况的典型特征是：某个继承体系的类名前缀或类名后缀完全相同。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/parallel-inheritance-hierarchies-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题原因-1" tabindex="-1"><a class="header-anchor" href="#问题原因-1"><span>问题原因</span></a></h3><p>起初的继承体系很小，随着不断添加新类，继承体系越来越大，也越来越难修改。</p><h3 id="解决方法" tabindex="-1"><a class="header-anchor" href="#解决方法"><span>解决方法</span></a></h3><ul><li>一般策略是：让一个继承体系的实例引用另一个继承体系的实例。如果再接再厉运用 <code>搬移函数(Move Method)</code> 和 <code>搬移字段(Move Field)</code>，就可以消除引用端的继承体系。</li></ul><h3 id="收益-1" tabindex="-1"><a class="header-anchor" href="#收益-1"><span>收益</span></a></h3><ul><li>更好的代码组织</li><li>减少重复代码</li></ul><h3 id="何时忽略" tabindex="-1"><a class="header-anchor" href="#何时忽略"><span>何时忽略</span></a></h3><ul><li>有时具有并行类层次结构只是一种为了避免程序体系结构更混乱的方法。如果你发现尝试消除平行继承体系导致代码更加丑陋，那么你应该回滚你的修改。</li></ul><h3 id="重构方法说明-1" tabindex="-1"><a class="header-anchor" href="#重构方法说明-1"><span>重构方法说明</span></a></h3><h4 id="搬移函数-move-method" tabindex="-1"><a class="header-anchor" href="#搬移函数-move-method"><span>搬移函数(Move Method)</span></a></h4><p><strong>问题</strong></p><p>你的程序中，有个函数与其所驻类之外的另一个类进行更多交流：调用后者，或被后者调用。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-method-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>在该函数最常引用的类中建立一个有着类似行为的新函数。将旧函数变成一个单纯的委托函数，或是旧函数完全移除。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-method-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="搬移字段-move-field" tabindex="-1"><a class="header-anchor" href="#搬移字段-move-field"><span>搬移字段(Move Field)</span></a></h4><p><strong>问题</strong></p><p>在你的程序中，某个字段被其所驻类之外的另一个类更多地用到。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-field-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>在目标类新建一个字段，修改源字段的所有用户，令他们改用新字段。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-field-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="霰弹式修改" tabindex="-1"><a class="header-anchor" href="#霰弹式修改"><span>霰弹式修改</span></a></h2><blockquote><p><code>霰弹式修改(Shotgun Surgery)</code> 类似于 <code>发散式变化(Divergent Change)</code> ，但实际上完全不同。<code>发散式变化(Divergent Change)</code> 是指一个类受多种变化的影响。<code>霰弹式修改(Shotgun Surgery)</code> 是指多种变化引发多个类相应的修改。</p></blockquote><h3 id="特征-2" tabindex="-1"><a class="header-anchor" href="#特征-2"><span>特征</span></a></h3><p>任何修改都需要在许多不同类上做小幅度修改。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/shotgun-surgery-1.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="问题原因-2" tabindex="-1"><a class="header-anchor" href="#问题原因-2"><span>问题原因</span></a></h3><p>一个单一的职责被拆分成大量的类。</p><h3 id="解决方法-1" tabindex="-1"><a class="header-anchor" href="#解决方法-1"><span>解决方法</span></a></h3><ul><li>运用<code>搬移函数(Move Method)</code> 和 <code>搬移字段(Move Field)</code> 来搬移不同类中相同的行为到一个独立类中。如果没有适合存放搬移函数或字段的类，就创建一个新类。</li><li>通常，可以运用 <code>将类内联化(Inline Class)</code> 将一些列相关行为放进同一个类。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/shotgun-surgery-2.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="收益-2" tabindex="-1"><a class="header-anchor" href="#收益-2"><span>收益</span></a></h3><ul><li>更好的代码组织</li><li>减少重复代码</li><li>更易维护</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/shotgun-surgery-3.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="重构方法说明-2" tabindex="-1"><a class="header-anchor" href="#重构方法说明-2"><span>重构方法说明</span></a></h3><h4 id="搬移函数-move-method-1" tabindex="-1"><a class="header-anchor" href="#搬移函数-move-method-1"><span>搬移函数(Move Method)</span></a></h4><p><strong>问题</strong></p><p>你的程序中，有个函数与其所驻类之外的另一个类进行更多交流：调用后者，或被后者调用。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-method-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>在该函数最常引用的类中建立一个有着类似行为的新函数。将旧函数变成一个单纯的委托函数，或是旧函数完全移除。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-method-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="搬移字段-move-field-1" tabindex="-1"><a class="header-anchor" href="#搬移字段-move-field-1"><span>搬移字段(Move Field)</span></a></h4><p><strong>问题</strong></p><p>在你的程序中，某个字段被其所驻类之外的另一个类更多地用到。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-field-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>在目标类新建一个字段，修改源字段的所有用户，令他们改用新字段。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-field-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="将类内联化-inline-class" tabindex="-1"><a class="header-anchor" href="#将类内联化-inline-class"><span>将类内联化(Inline Class)</span></a></h4><p><strong>问题</strong></p><p>某个类没有做太多事情。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/inline-class-before.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>解决</strong></p><p>将这个类的所有特性搬移到另一个类中，然后移除原类。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/inline-class-after.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h2 id="扩展阅读" tabindex="-1"><a class="header-anchor" href="#扩展阅读"><span>扩展阅读</span></a></h2><ul><li><a href="https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9D%8F%E5%91%B3%E9%81%93%E5%92%8C%E9%87%8D%E6%9E%84.md" target="_blank" rel="noopener noreferrer">代码的坏味道和重构</a></li><li><a href="https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E4%BB%A3%E7%A0%81%E8%87%83%E8%82%BF.md" target="_blank" rel="noopener noreferrer">代码坏味道之代码臃肿</a></li><li><a href="https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E6%BB%A5%E7%94%A8%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.md" target="_blank" rel="noopener noreferrer">代码坏味道之滥用面向对象</a></li><li><a href="https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E5%8F%98%E9%9D%A9%E7%9A%84%E9%9A%9C%E7%A2%8D.md" target="_blank" rel="noopener noreferrer">代码坏味道之变革的障碍</a></li><li><a href="https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E9%9D%9E%E5%BF%85%E8%A6%81%E7%9A%84.md" target="_blank" rel="noopener noreferrer">代码坏味道之非必要的</a></li><li><a href="https://github.com/dunwu/design/blob/master/docs/refactor/%E4%BB%A3%E7%A0%81%E5%9D%8F%E5%91%B3%E9%81%93%E4%B9%8B%E8%80%A6%E5%90%88.md" target="_blank" rel="noopener noreferrer">代码坏味道之耦合</a></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://book.douban.com/subject/4199741/" target="_blank" rel="noopener noreferrer">《代码整洁之道》</a></li><li><a href="https://book.douban.com/subject/4262627/" target="_blank" rel="noopener noreferrer">《重构 - 改善既有代码的设计》</a></li><li><a href="https://book.douban.com/subject/1477390/" target="_blank" rel="noopener noreferrer">《代码大全》</a></li><li><a href="https://sourcemaking.com/refactoring" target="_blank" rel="noopener noreferrer">https://sourcemaking.com/refactoring</a></li></ul>',87)]))}const c=t(i,[["render",s],["__file","index.html.vue"]]),l=JSON.parse('{"path":"/pages/56ca63/","title":"代码坏味道之变革的障碍","lang":"zh-CN","frontmatter":{"title":"代码坏味道之变革的障碍","date":"2018-10-13T22:48:00.000Z","order":4,"categories":["设计","重构"],"tags":["设计","重构","代码的坏味道"],"permalink":"/pages/56ca63/","description":"翻译自：https://sourcemaking.com/refactoring/smells/change-preventers 变革的障碍(Change Preventers)这组坏味道意味着：当你需要改变一处代码时，却发现不得不改变其他的地方。这使得程序开发变得复杂、代价高昂。 发散式变化 发散式变化(Divergent Change) 类似于 ...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/56ca63/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"代码坏味道之变革的障碍"}],["meta",{"property":"og:description","content":"翻译自：https://sourcemaking.com/refactoring/smells/change-preventers 变革的障碍(Change Preventers)这组坏味道意味着：当你需要改变一处代码时，却发现不得不改变其他的地方。这使得程序开发变得复杂、代价高昂。 发散式变化 发散式变化(Divergent Change) 类似于 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/divergent-change-1.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"重构"}],["meta",{"property":"article:tag","content":"代码的坏味道"}],["meta",{"property":"article:published_time","content":"2018-10-13T22:48:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"代码坏味道之变革的障碍\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/divergent-change-1.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-class-before.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/extract-class-after.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/parallel-inheritance-hierarchies-1.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-method-before.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-method-after.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-field-before.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-field-after.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/shotgun-surgery-1.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/shotgun-surgery-2.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/shotgun-surgery-3.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-method-before.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-method-after.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-field-before.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/move-field-after.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/inline-class-before.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/design/refactor/inline-class-after.png\\"],\\"datePublished\\":\\"2018-10-13T22:48:00.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"发散式变化","slug":"发散式变化","link":"#发散式变化","children":[{"level":3,"title":"特征","slug":"特征","link":"#特征","children":[]},{"level":3,"title":"问题原因","slug":"问题原因","link":"#问题原因","children":[]},{"level":3,"title":"解决办法","slug":"解决办法","link":"#解决办法","children":[]},{"level":3,"title":"收益","slug":"收益","link":"#收益","children":[]},{"level":3,"title":"重构方法说明","slug":"重构方法说明","link":"#重构方法说明","children":[]}]},{"level":2,"title":"平行继承体系","slug":"平行继承体系","link":"#平行继承体系","children":[{"level":3,"title":"特征","slug":"特征-1","link":"#特征-1","children":[]},{"level":3,"title":"问题原因","slug":"问题原因-1","link":"#问题原因-1","children":[]},{"level":3,"title":"解决方法","slug":"解决方法","link":"#解决方法","children":[]},{"level":3,"title":"收益","slug":"收益-1","link":"#收益-1","children":[]},{"level":3,"title":"何时忽略","slug":"何时忽略","link":"#何时忽略","children":[]},{"level":3,"title":"重构方法说明","slug":"重构方法说明-1","link":"#重构方法说明-1","children":[]}]},{"level":2,"title":"霰弹式修改","slug":"霰弹式修改","link":"#霰弹式修改","children":[{"level":3,"title":"特征","slug":"特征-2","link":"#特征-2","children":[]},{"level":3,"title":"问题原因","slug":"问题原因-2","link":"#问题原因-2","children":[]},{"level":3,"title":"解决方法","slug":"解决方法-1","link":"#解决方法-1","children":[]},{"level":3,"title":"收益","slug":"收益-2","link":"#收益-2","children":[]},{"level":3,"title":"重构方法说明","slug":"重构方法说明-2","link":"#重构方法说明-2","children":[]}]},{"level":2,"title":"扩展阅读","slug":"扩展阅读","link":"#扩展阅读","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1746520802000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":3,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":4.97,"words":1491},"filePathRelative":"posts/03.design/03.重构/04.代码坏味道之变革的障碍.md","localizedDate":"2018年10月13日","excerpt":"<blockquote>\\n<p>翻译自：<a href=\\"https://sourcemaking.com/refactoring/smells/change-preventers\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://sourcemaking.com/refactoring/smells/change-preventers</a></p>\\n<p><strong>变革的障碍(Change Preventers)这组坏味道意味着：当你需要改变一处代码时，却发现不得不改变其他的地方。这使得程序开发变得复杂、代价高昂。</strong></p>\\n</blockquote>","autoDesc":true}');export{c as comp,l as data};
