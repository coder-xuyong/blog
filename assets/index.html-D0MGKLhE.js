import{_ as t,c as a,b as i,o as r}from"./app-YpXT1RvH.js";const n={};function s(l,e){return r(),a("div",null,e[0]||(e[0]=[i('<h1 id="jmeter-快速入门" tabindex="-1"><a class="header-anchor" href="#jmeter-快速入门"><span>JMeter 快速入门</span></a></h1><blockquote><p><a href="https://github.com/apache/jmeter" target="_blank" rel="noopener noreferrer">Jmeter</a> 是一款基于 Java 开发的功能和性能测试软件。</p><p>🎁 本文编辑时的最新版本为：5.1.1</p></blockquote><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p><a href="https://github.com/apache/jmeter" target="_blank" rel="noopener noreferrer">Jmeter</a> 是一款使用 Java 开发的功能和性能测试软件。</p><h3 id="特性" tabindex="-1"><a class="header-anchor" href="#特性"><span>特性</span></a></h3><p>Jmeter 能够加载和性能测试许多不同的应用程序/服务器/协议类型：</p><ul><li>网络 - HTTP，HTTPS(Java，NodeJS，PHP，<a href="http://ASP.NET" target="_blank" rel="noopener noreferrer">ASP.NET</a> 等)</li><li>SOAP / REST Web 服务</li><li>FTP 文件</li><li>通过 JDBC 的数据库</li><li>LDAP</li><li>通过 JMS 的面向消息的中间件(MOM)</li><li>邮件-SMTP(S)，POP3(S)和 IMAP(S)</li><li>本机命令或 Shell 脚本</li><li>TCP 协议</li><li>Java 对象</li></ul><h3 id="工作流" tabindex="-1"><a class="header-anchor" href="#工作流"><span>工作流</span></a></h3><p>Jmeter 的工作原理是仿真用户向服务器发送请求，并收集服务器应答信息并计算统计信息。</p><p>Jmeter 的工作流如下图所示：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/technology/test/jmeter-workflow.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="主要元素" tabindex="-1"><a class="header-anchor" href="#主要元素"><span>主要元素</span></a></h3><p>Jmeter 的主要元素如下：</p><ul><li><strong><code>测试计划(Test Plan)</code></strong> - 可以将测试计划视为 JMeter 的测试脚本 。测试计划由测试元素组成，例如线程组，逻辑控制器，样本生成控制器，监听器，定时器，断言和配置元素。</li><li><strong><code>线程组(Thread Group)</code></strong> - 线程组的作用是：模拟大量用户负载的运行场景。 <ul><li>设置线程数</li><li>设置加速期</li><li>设置执行测试的次数</li></ul></li><li><strong><code>控制器(Controllers)</code></strong> - 可以分为两大类： <ul><li><strong><code>采样器（Sampler）</code></strong> - 采样器的作用是模拟用户对目标服务器发送请求。 采样器是必须将组件添加到测试计划中的，因为它只能让 JMeter 知道需要将哪种类型的请求发送到服务器。 请求可以是 HTTP，HTTP(s)，FTP，TCP，SMTP，SOAP 等。</li><li><strong><code>逻辑控制器</code></strong> - 逻辑控制器的作用是：控制多个请求发送的循环次数及顺序等。</li></ul></li><li><strong><code>监听器(Listeners)</code></strong> - 监听器的作用是：收集测试结果信息。如查看结果树、汇总报告等。</li><li><strong><code>计时器(Timers)</code></strong> - 计时器的作用是：控制多个请求发送的时间频次。</li><li><strong><code>配置元素(Configuration Elements)</code></strong> - 配置元素的工作与采样器的工作类似。但是，它不发送请求，而是提供预备的数据等，如 CSV、函数助手。</li><li><strong><code>预处理器元素(Pre-Processor Elements)</code></strong> - 预处理器元素在采样器发出请求之前执行，如果预处理器附加到采样器元素，那么它将在该采样器元素运行之前执行。预处理器元素用于在运行之前准备环境及参数。</li><li><strong><code>后处理器元素(Post-Processor Elements)</code></strong> - 后处理器元素是在发送采样器请求之后执行的元素，常用于处理响应数据。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/technology/test/jmeter-elements.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>📌 提示：</p><p>Jmeter 元素的数量关系大致如下：</p><ol><li>脚本中最多只能有一个测试计划。</li><li>测试计划中至少要有一个线程组。</li><li>线程组中至少要有一个取样器。</li><li>线程组中至少要有一个监听器。</li></ol></blockquote><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装"><span>安装</span></a></h2><h3 id="环境要求" tabindex="-1"><a class="header-anchor" href="#环境要求"><span>环境要求</span></a></h3><ul><li><p>必要的。Jmeter 基于 JDK8 开发，所以必须运行在 JDK8 环境。</p><ul><li>JDK8</li></ul></li><li><p>可选的。有些 jar 包不是 Jmeter 提供的，如果需要相应的功能，需要自行下载并置于 <code>lib</code> 目录。</p><ul><li>JDBC</li><li>JMS</li><li><a href="http://www.bouncycastle.org/test_releases.html" target="_blank" rel="noopener noreferrer">Bouncy Castle</a></li></ul></li></ul><h3 id="下载" tabindex="-1"><a class="header-anchor" href="#下载"><span>下载</span></a></h3><p>进入 <a href="https://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener noreferrer"><strong>Jmeter 官网下载地址</strong></a> 选择需要版本进行下载。</p><h3 id="启动" tabindex="-1"><a class="header-anchor" href="#启动"><span>启动</span></a></h3><p>解压 Jmeter 压缩包，进入 bin 目录</p><p>Unix 类系统运行 <code>jmeter</code> ；Windows 系统运行 <code>jmeter.bat</code></p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024104517721.png" alt="image-20191024104517721" tabindex="0" loading="lazy"><figcaption>image-20191024104517721</figcaption></figure><h2 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h2><h3 id="创建测试计划" tabindex="-1"><a class="header-anchor" href="#创建测试计划"><span>创建测试计划</span></a></h3><blockquote><p>🔔 注意：</p><ul><li><p>在运行整个测试计划之前，应保存测试计划。</p></li><li><p>JMeter 的测试计划以 <code>.jmx</code> 扩展文件的形式保存。</p></li></ul></blockquote><h4 id="创建线程组" tabindex="-1"><a class="header-anchor" href="#创建线程组"><span>创建线程组</span></a></h4><ul><li><p>在“测试计划”上右键 【添加】=&gt;【线程（用户）】=&gt;【线程组】。</p></li><li><p>设置线程数和循环次数</p></li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024105545736.png" alt="image-20191024105545736" tabindex="0" loading="lazy"><figcaption>image-20191024105545736</figcaption></figure><h4 id="配置原件" tabindex="-1"><a class="header-anchor" href="#配置原件"><span>配置原件</span></a></h4><ul><li><p>在新建的线程组上右键 【添加】=&gt;【配置元件】=&gt;【HTTP 请求默认值】。</p></li><li><p>填写协议、服务器名称或 IP、端口号</p></li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024110016264.png" alt="image-20191024110016264" tabindex="0" loading="lazy"><figcaption>image-20191024110016264</figcaption></figure><h4 id="构造-http-请求" tabindex="-1"><a class="header-anchor" href="#构造-http-请求"><span>构造 HTTP 请求</span></a></h4><ul><li><p>在“线程组”上右键 【添加-】=&gt;【取样器】=&gt;【HTTP 请求】。</p></li><li><p>填写协议、服务器名称或 IP、端口号（如果配置了 HTTP 请求默认值可以忽略）</p></li><li><p>填写方法、路径</p></li><li><p>填写参数、消息体数据、文件上传</p></li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024110953063.png" alt="image-20191024110953063" tabindex="0" loading="lazy"><figcaption>image-20191024110953063</figcaption></figure><h4 id="添加-http-请求头" tabindex="-1"><a class="header-anchor" href="#添加-http-请求头"><span>添加 HTTP 请求头</span></a></h4><ul><li>在“线程组”上右键 【添加】=&gt;【配置元件】=&gt;【HTTP 信息头管理器】</li><li>由于我的测试例中传输的数据为 json 形式，所以设置键值对 <code>Content-Type</code>：<code>application/json</code></li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024111825226.png" alt="image-20191024111825226" tabindex="0" loading="lazy"><figcaption>image-20191024111825226</figcaption></figure><h4 id="添加断言" tabindex="-1"><a class="header-anchor" href="#添加断言"><span>添加断言</span></a></h4><ul><li>在“线程组”上右键 【添加】=&gt;【断言】=&gt;【 响应断言 】</li><li>在我的案例中，以 HTTP 应答状态码为 200 来判断请求是否成功</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024112335130.png" alt="image-20191024112335130" tabindex="0" loading="lazy"><figcaption>image-20191024112335130</figcaption></figure><h4 id="添加察看结果树" tabindex="-1"><a class="header-anchor" href="#添加察看结果树"><span>添加察看结果树</span></a></h4><ul><li>在“线程组”上右键 【添加】=&gt;【监听器】=&gt;【察看结果树】</li><li>直接点击运行，就可以查看测试结果</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024113849270.png" alt="image-20191024113849270" tabindex="0" loading="lazy"><figcaption>image-20191024113849270</figcaption></figure><h4 id="添加汇总报告" tabindex="-1"><a class="header-anchor" href="#添加汇总报告"><span>添加汇总报告</span></a></h4><ul><li>在“线程组”上右键 【添加】=&gt;【监听器】=&gt;【汇总报告】</li><li>直接点击运行，就可以查看测试结果</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024114016424.png" alt="image-20191024114016424" tabindex="0" loading="lazy"><figcaption>image-20191024114016424</figcaption></figure><h4 id="保存测试计划" tabindex="-1"><a class="header-anchor" href="#保存测试计划"><span>保存测试计划</span></a></h4><p>执行测试计划前，GUI 会提示先保存配置为 <code>jmx</code> 文件。</p><h3 id="执行测试计划" tabindex="-1"><a class="header-anchor" href="#执行测试计划"><span>执行测试计划</span></a></h3><p>官方建议不要直接使用 GUI 来执行测试计划，这种模式指适用于创建测试计划和 debug。</p><p>执行测试计划应该使用命令行模式，语法形式如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">jmeter</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -n</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [jmx </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">file]</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -l</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [results </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">file]</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -e</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -o</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [Path </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">to</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> web</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> report</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> folder]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>执行测试计划后，在 <code>-e -o</code> 参数后指定的 web 报告目录下，可以找到测试报告内容。在浏览器中打开 <code>index.html</code> 文件，可以看到如下报告：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024120233058.png" alt="image-20191024120233058" tabindex="0" loading="lazy"><figcaption>image-20191024120233058</figcaption></figure><h2 id="问题" tabindex="-1"><a class="header-anchor" href="#问题"><span>问题</span></a></h2><h3 id="如何读取本地-txt-csv-文件作为请求参数" tabindex="-1"><a class="header-anchor" href="#如何读取本地-txt-csv-文件作为请求参数"><span>如何读取本地 txt/csv 文件作为请求参数</span></a></h3><p>参考：<a href="https://www.jianshu.com/p/3b2d3b643415" target="_blank" rel="noopener noreferrer">Jmeter 读取本地 txt/csv 文件作为请求参数，实现接口自动化</a></p><p>（1）依次点击【添加】=&gt;【配置元件】=&gt;【CSV 数据文件设置】</p><p>配置如下所示：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/image-20191127175820747.png" alt="image-20191127175820747" tabindex="0" loading="lazy"><figcaption>image-20191127175820747</figcaption></figure><p>重要配置说明（其他配置根据实际情况填）：</p><ul><li>文件名：输入需要导入的数据文件位置。</li><li>文件编码：设为 UTF-8，避免乱码。</li><li>变量名称：使用 <code>,</code> 分隔输入变量列表。如截图中设置了两个变量 <code>a</code> 和 <code>b</code></li></ul><p>（2）在 HTTP 请求的消息体数据中配置参数</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>[{&quot;a&quot;:&quot;${a}&quot;,&quot;b&quot;:&quot;${b}&quot;}]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="如何有序发送数据" tabindex="-1"><a class="header-anchor" href="#如何有序发送数据"><span>如何有序发送数据</span></a></h3><p>依次点击【添加】=&gt;【逻辑控制器】=&gt;【事务控制器】</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://jmeter.apache.org/" target="_blank" rel="noopener noreferrer">Jmeter 官网</a></li><li><a href="https://github.com/apache/jmeter" target="_blank" rel="noopener noreferrer">Jmeter Github</a></li><li><a href="https://www.cnblogs.com/TankXiao/p/4045439.html" target="_blank" rel="noopener noreferrer">Jmeter 性能测试入门</a></li><li><a href="https://www.yiibai.com/jmeter" target="_blank" rel="noopener noreferrer">易百教程 - Jmeter 教程</a></li><li><a href="https://www.jianshu.com/p/3b2d3b643415" target="_blank" rel="noopener noreferrer">Jmeter 读取本地 txt/csv 文件作为请求参数，实现接口自动化</a></li></ul>',71)]))}const p=t(n,[["render",s],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/pages/0e5ab1/","title":"JMeter 快速入门","lang":"zh-CN","frontmatter":{"title":"JMeter 快速入门","date":"2022-02-17T22:34:30.000Z","order":3,"categories":["Java","工具","测试"],"tags":["Java","测试","JMeter"],"permalink":"/pages/0e5ab1/","description":"JMeter 快速入门 Jmeter 是一款基于 Java 开发的功能和性能测试软件。 🎁 本文编辑时的最新版本为：5.1.1 简介 Jmeter 是一款使用 Java 开发的功能和性能测试软件。 特性 Jmeter 能够加载和性能测试许多不同的应用程序/服务器/协议类型： 网络 - HTTP，HTTPS(Java，NodeJS，PHP，ASP.NE...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/0e5ab1/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"JMeter 快速入门"}],["meta",{"property":"og:description","content":"JMeter 快速入门 Jmeter 是一款基于 Java 开发的功能和性能测试软件。 🎁 本文编辑时的最新版本为：5.1.1 简介 Jmeter 是一款使用 Java 开发的功能和性能测试软件。 特性 Jmeter 能够加载和性能测试许多不同的应用程序/服务器/协议类型： 网络 - HTTP，HTTPS(Java，NodeJS，PHP，ASP.NE..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/technology/test/jmeter-workflow.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"测试"}],["meta",{"property":"article:tag","content":"JMeter"}],["meta",{"property":"article:published_time","content":"2022-02-17T22:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JMeter 快速入门\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/technology/test/jmeter-workflow.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/technology/test/jmeter-elements.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024104517721.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024105545736.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024110016264.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024110953063.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024111825226.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024112335130.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024113849270.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024114016424.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/jmeter/image-20191024120233058.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/image-20191127175820747.png\\"],\\"datePublished\\":\\"2022-02-17T22:34:30.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[{"level":3,"title":"特性","slug":"特性","link":"#特性","children":[]},{"level":3,"title":"工作流","slug":"工作流","link":"#工作流","children":[]},{"level":3,"title":"主要元素","slug":"主要元素","link":"#主要元素","children":[]}]},{"level":2,"title":"安装","slug":"安装","link":"#安装","children":[{"level":3,"title":"环境要求","slug":"环境要求","link":"#环境要求","children":[]},{"level":3,"title":"下载","slug":"下载","link":"#下载","children":[]},{"level":3,"title":"启动","slug":"启动","link":"#启动","children":[]}]},{"level":2,"title":"使用","slug":"使用","link":"#使用","children":[{"level":3,"title":"创建测试计划","slug":"创建测试计划","link":"#创建测试计划","children":[]},{"level":3,"title":"执行测试计划","slug":"执行测试计划","link":"#执行测试计划","children":[]}]},{"level":2,"title":"问题","slug":"问题","link":"#问题","children":[{"level":3,"title":"如何读取本地 txt/csv 文件作为请求参数","slug":"如何读取本地-txt-csv-文件作为请求参数","link":"#如何读取本地-txt-csv-文件作为请求参数","children":[]},{"level":3,"title":"如何有序发送数据","slug":"如何有序发送数据","link":"#如何有序发送数据","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1749521666000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":5.6,"words":1681},"filePathRelative":"posts/01.Java/12.工具/04.测试/03.Jmeter.md","localizedDate":"2022年2月17日","excerpt":"\\n<blockquote>\\n<p><a href=\\"https://github.com/apache/jmeter\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Jmeter</a> 是一款基于 Java 开发的功能和性能测试软件。</p>\\n<p>🎁 本文编辑时的最新版本为：5.1.1</p>\\n</blockquote>\\n<h2>简介</h2>\\n<p><a href=\\"https://github.com/apache/jmeter\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Jmeter</a> 是一款使用 Java 开发的功能和性能测试软件。</p>","autoDesc":true}');export{p as comp,g as data};
