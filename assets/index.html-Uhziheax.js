import{_ as o,c as s,e as E,b as i,h as l,d as A,f as n,r,o as d}from"./app-C2NQDbvH.js";const u={};function B(a,t){const e=r("RouteLink");return d(),s("div",null,[t[25]||(t[25]=E("h1",{id:"设计模式",tabindex:"-1"},[E("a",{class:"header-anchor",href:"#设计模式"},[E("span",null,"设计模式")])],-1)),t[26]||(t[26]=E("blockquote",null,[E("p",null,[E("strong",null,"设计模式"),l("是软件设计中常见问题的典型解决方案。")])],-1)),t[27]||(t[27]=E("h2",{id:"📖-内容",tabindex:"-1"},[E("a",{class:"header-anchor",href:"#📖-内容"},[E("span",null,"📖 内容")])],-1)),E("ul",null,[E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/25.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%88%99.html"},{default:n(()=>t[0]||(t[0]=[l("面向对象原则")])),_:1})])]),t[28]||(t[28]=E("h3",{id:"创建型模式",tabindex:"-1"},[E("a",{class:"header-anchor",href:"#创建型模式"},[E("span",null,"创建型模式")])],-1)),t[29]||(t[29]=E("blockquote",null,[E("p",null,"创建型模式提供了创建对象的机制， 能够提升已有代码的灵活性和可复用性。")],-1)),E("ul",null,[E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[1]||(t[1]=[l("简单工厂模式 (Simple Factory)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[2]||(t[2]=[l("工厂方法模式 (Factory Method)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03.%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[3]||(t[3]=[l("抽象工厂模式 (Abstract Factory)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04.%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[4]||(t[4]=[l("建造者模式 (Builder)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/05.%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[5]||(t[5]=[l("原型模式 (Prototype)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/06.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[6]||(t[6]=[l("单例模式 (Singleton)")])),_:1})])]),t[30]||(t[30]=E("h3",{id:"结构型模式",tabindex:"-1"},[E("a",{class:"header-anchor",href:"#结构型模式"},[E("span",null,"结构型模式")])],-1)),t[31]||(t[31]=E("blockquote",null,[E("p",null,"结构型模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。")],-1)),E("ul",null,[E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/07.%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[7]||(t[7]=[l("适配器模式 (Adapter)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/08.%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[8]||(t[8]=[l("桥接模式 (Bridge)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/09.%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[9]||(t[9]=[l("组合模式 (Composite)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[10]||(t[10]=[l("装饰模式 (Decorator)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11.%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[11]||(t[11]=[l("外观模式 (Facade)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12.%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[12]||(t[12]=[l("享元模式 (Flyweight)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13.%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[13]||(t[13]=[l("代理模式 (Proxy)")])),_:1})])]),t[32]||(t[32]=E("h3",{id:"行为型模式",tabindex:"-1"},[E("a",{class:"header-anchor",href:"#行为型模式"},[E("span",null,"行为型模式")])],-1)),t[33]||(t[33]=E("blockquote",null,[E("p",null,"行为模式负责对象间的高效沟通和职责委派。")],-1)),E("ul",null,[E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14.%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[14]||(t[14]=[l("模板方法模式 (Template Method)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/15.%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[15]||(t[15]=[l("命令模式 (Command)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16.%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[16]||(t[16]=[l("迭代器模式 (Iterator)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17.%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[17]||(t[17]=[l("观察者模式 (Observer)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18.%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[18]||(t[18]=[l("解释器模式 (Interpreter)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19.%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[19]||(t[19]=[l("中介者模式 (Mediator)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20.%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[20]||(t[20]=[l("职责链模式 (Chain of Responsibility)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21.%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[21]||(t[21]=[l("备忘录模式 (Memento)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22.%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[22]||(t[22]=[l("策略模式 (Strategy)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23.%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[23]||(t[23]=[l("访问者模式 (Visitor)")])),_:1})]),E("li",null,[A(e,{to:"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/24.%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html"},{default:n(()=>t[24]||(t[24]=[l("状态模式 (State)")])),_:1})])]),t[34]||(t[34]=i('<h2 id="📚-资料" tabindex="-1"><a class="header-anchor" href="#📚-资料"><span>📚 资料</span></a></h2><ul><li><a href="https://book.douban.com/subject/2243615/" target="_blank" rel="noopener noreferrer">《Head First 设计模式》</a></li><li><a href="https://book.douban.com/subject/2334288/" target="_blank" rel="noopener noreferrer">《大话设计模式》</a></li><li><a href="https://refactoringguru.cn/design-patterns/catalog" target="_blank" rel="noopener noreferrer">设计模式教程</a></li></ul><h2 id="🚪-传送" tabindex="-1"><a class="header-anchor" href="#🚪-传送"><span>🚪 传送</span></a></h2><p>◾ 💧 <a href="https://dunwu.github.io/waterdrop/" target="_blank" rel="noopener noreferrer">钝悟的 IT 知识图谱</a> ◾</p>',4))])}const g=o(u,[["render",B],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/pages/81b0f2/","title":"设计模式","lang":"zh-CN","frontmatter":{"title":"设计模式","date":"2020-08-10T10:59:18.000Z","categories":["设计","设计模式"],"tags":["设计","设计模式"],"permalink":"/pages/81b0f2/","hidden":true,"index":false,"description":"设计模式 设计模式是软件设计中常见问题的典型解决方案。 📖 内容 创建型模式 创建型模式提供了创建对象的机制， 能够提升已有代码的灵活性和可复用性。 结构型模式 结构型模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。 行为型模式 行为模式负责对象间的高效沟通和职责委派。 📚 资料 《Head First 设计模式》 《大话设计...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/81b0f2/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"设计模式 设计模式是软件设计中常见问题的典型解决方案。 📖 内容 创建型模式 创建型模式提供了创建对象的机制， 能够提升已有代码的灵活性和可复用性。 结构型模式 结构型模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。 行为型模式 行为模式负责对象间的高效沟通和职责委派。 📚 资料 《Head First 设计模式》 《大话设计..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2020-08-10T10:59:18.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-08-10T10:59:18.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"📖 内容","slug":"📖-内容","link":"#📖-内容","children":[{"level":3,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[]},{"level":3,"title":"结构型模式","slug":"结构型模式","link":"#结构型模式","children":[]},{"level":3,"title":"行为型模式","slug":"行为型模式","link":"#行为型模式","children":[]}]},{"level":2,"title":"📚 资料","slug":"📚-资料","link":"#📚-资料","children":[]},{"level":2,"title":"🚪 传送","slug":"🚪-传送","link":"#🚪-传送","children":[]}],"git":{"createdTime":1746520802000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":3,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":1.72,"words":517},"filePathRelative":"posts/03.design/02.设计模式/README.md","localizedDate":"2020年8月10日","excerpt":"\\n<blockquote>\\n<p><strong>设计模式</strong>是软件设计中常见问题的典型解决方案。</p>\\n</blockquote>\\n<h2>📖 内容</h2>\\n<ul>\\n<li><a href=\\"/posts/03.design/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/25.%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E5%8E%9F%E5%88%99.html\\" target=\\"_blank\\">面向对象原则</a></li>\\n</ul>\\n<h3>创建型模式</h3>\\n<blockquote>\\n<p>创建型模式提供了创建对象的机制， 能够提升已有代码的灵活性和可复用性。</p>\\n</blockquote>","autoDesc":true}');export{g as comp,m as data};
