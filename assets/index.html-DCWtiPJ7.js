import{_ as i,c as a,b as t,o as e}from"./app-kzyIs9AF.js";const n={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="tomcat-快速入门" tabindex="-1"><a class="header-anchor" href="#tomcat-快速入门"><span>Tomcat 快速入门</span></a></h1><blockquote><p>🎁 版本说明</p><p>当前最新版本：Tomcat 8.5.24</p><p>环境要求：JDK7+</p></blockquote><h2 id="_1-tomcat-简介" tabindex="-1"><a class="header-anchor" href="#_1-tomcat-简介"><span>1. Tomcat 简介</span></a></h2><h3 id="_1-1-tomcat-是什么" tabindex="-1"><a class="header-anchor" href="#_1-1-tomcat-是什么"><span>1.1. Tomcat 是什么</span></a></h3><p>Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为 Web 服务器的一些特有功能，如 Tomcat 管理和控制平台、安全域管理和 Tomcat 阀等。</p><p>由于 Tomcat 本身也内含了一个 HTTP 服务器，它也可以被视作一个单独的 Web 服务器。但是，不能将 Tomcat 和 Apache HTTP 服务器混淆，Apache HTTP 服务器是一个用 C 语言实现的 HTTP Web 服务器；这两个 HTTP web server 不是捆绑在一起的。Tomcat 包含了一个配置管理工具，也可以通过编辑 XML 格式的配置文件来进行配置。</p><h3 id="_1-2-tomcat-重要目录" tabindex="-1"><a class="header-anchor" href="#_1-2-tomcat-重要目录"><span>1.2. Tomcat 重要目录</span></a></h3><ul><li><strong>/bin</strong> - Tomcat 脚本存放目录（如启动、关闭脚本）。 <code>*.sh</code> 文件用于 Unix 系统； <code>*.bat</code> 文件用于 Windows 系统。</li><li><strong>/conf</strong> - Tomcat 配置文件目录。</li><li><strong>/logs</strong> - Tomcat 默认日志目录。</li><li><strong>/webapps</strong> - webapp 运行的目录。</li></ul><h3 id="_1-3-web-工程发布目录结构" tabindex="-1"><a class="header-anchor" href="#_1-3-web-工程发布目录结构"><span>1.3. web 工程发布目录结构</span></a></h3><p>一般 web 项目路径结构</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>|-- webapp                         # 站点根目录</span></span>
<span class="line"><span>    |-- META-INF                   # META-INF 目录</span></span>
<span class="line"><span>    |   \`-- MANIFEST.MF            # 配置清单文件</span></span>
<span class="line"><span>    |-- WEB-INF                    # WEB-INF 目录</span></span>
<span class="line"><span>    |   |-- classes                # class文件目录</span></span>
<span class="line"><span>    |   |   |-- *.class            # 程序需要的 class 文件</span></span>
<span class="line"><span>    |   |   \`-- *.xml              # 程序需要的 xml 文件</span></span>
<span class="line"><span>    |   |-- lib                    # 库文件夹</span></span>
<span class="line"><span>    |   |   \`-- *.jar              # 程序需要的 jar 包</span></span>
<span class="line"><span>    |   \`-- web.xml                # Web应用程序的部署描述文件</span></span>
<span class="line"><span>    |-- &lt;userdir&gt;                  # 自定义的目录</span></span>
<span class="line"><span>    |-- &lt;userfiles&gt;                # 自定义的资源文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>webapp</code>：工程发布文件夹。其实每个 war 包都可以视为 webapp 的压缩包。</p></li><li><p><code>META-INF</code>：META-INF 目录用于存放工程自身相关的一些信息，元文件信息，通常由开发工具，环境自动生成。</p></li><li><p><code>WEB-INF</code>：Java web 应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。</p></li><li><p><code>/WEB-INF/classes</code>：存放程序所需要的所有 Java class 文件。</p></li><li><p><code>/WEB-INF/lib</code>：存放程序所需要的所有 jar 文件。</p></li><li><p><code>/WEB-INF/web.xml</code>：web 应用的部署配置文件。它是工程中最重要的配置文件，它描述了 servlet 和组成应用的其它组件，以及应用初始化参数、安全管理约束等。</p></li></ul><h3 id="_1-4-tomcat-功能" tabindex="-1"><a class="header-anchor" href="#_1-4-tomcat-功能"><span>1.4. Tomcat 功能</span></a></h3><p>Tomcat 支持的 I/O 模型有：</p><ul><li>NIO：非阻塞 I/O，采用 Java NIO 类库实现。</li><li>NIO2：异步 I/O，采用 JDK 7 最新的 NIO2 类库实现。</li><li>APR：采用 Apache 可移植运行库实现，是 C/C++ 编写的本地库。</li></ul><p>Tomcat 支持的应用层协议有：</p><ul><li>HTTP/1.1：这是大部分 Web 应用采用的访问协议。</li><li>AJP：用于和 Web 服务器集成（如 Apache）。</li><li>HTTP/2：HTTP 2.0 大幅度的提升了 Web 性能。</li></ul><h2 id="_2-tomcat-入门" tabindex="-1"><a class="header-anchor" href="#_2-tomcat-入门"><span>2. Tomcat 入门</span></a></h2><h3 id="_2-1-安装" tabindex="-1"><a class="header-anchor" href="#_2-1-安装"><span>2.1. 安装</span></a></h3><p><strong>前提条件</strong></p><p>Tomcat 8.5 要求 JDK 版本为 1.7 以上。</p><p>进入 <a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener noreferrer">Tomcat 官方下载地址</a> 选择合适版本下载，并解压到本地。</p><p><strong>Windows</strong></p><p>添加环境变量 <code>CATALINA_HOME</code> ，值为 Tomcat 的安装路径。</p><p>进入安装目录下的 bin 目录，运行 startup.bat 文件，启动 Tomcat</p><p><strong>Linux / Unix</strong></p><p>下面的示例以 8.5.24 版本为例，包含了下载、解压、启动操作。</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" data-title="bash" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 下载解压到本地</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wget</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> http://mirrors.hust.edu.cn/apache/tomcat/tomcat-8/v8.5.24/bin/apache-tomcat-8.5.24.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">tar</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -zxf</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> apache-tomcat-8.5.24.tar.gz</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 启动 Tomcat</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">./apache-tomcat-8.5.24/bin/startup.sh</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>启动后，访问 <code>http://localhost:8080</code> ，可以看到 Tomcat 安装成功的测试页面。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/tomcat.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="_2-2-配置" tabindex="-1"><a class="header-anchor" href="#_2-2-配置"><span>2.2. 配置</span></a></h3><p>本节将列举一些重要、常见的配置项。详细的 Tomcat8 配置可以参考 <a href="http://tomcat.apache.org/tomcat-8.5-doc/config/index.html" target="_blank" rel="noopener noreferrer">Tomcat 8 配置官方参考文档</a> 。</p><h4 id="_2-2-1-server" tabindex="-1"><a class="header-anchor" href="#_2-2-1-server"><span>2.2.1. Server</span></a></h4><blockquote><p>Server 元素表示整个 Catalina servlet 容器。</p><p>因此，它必须是 <code>conf/server.xml</code> 配置文件中的根元素。它的属性代表了整个 servlet 容器的特性。</p></blockquote><p><strong>属性表</strong></p><table><thead><tr><th>属性</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>className</td><td>这个类必须实现 org.apache.catalina.Server 接口。</td><td>默认 org.apache.catalina.core.StandardServer</td></tr><tr><td>address</td><td>服务器等待关机命令的 TCP / IP 地址。如果没有指定地址，则使用 localhost。</td><td></td></tr><tr><td>port</td><td>服务器等待关机命令的 TCP / IP 端口号。设置为-1 以禁用关闭端口。</td><td></td></tr><tr><td>shutdown</td><td>必须通过 TCP / IP 连接接收到指定端口号的命令字符串，以关闭 Tomcat。</td><td></td></tr></tbody></table><h4 id="_2-2-2-service" tabindex="-1"><a class="header-anchor" href="#_2-2-2-service"><span>2.2.2. Service</span></a></h4><blockquote><p>Service 元素表示一个或多个连接器组件的组合，这些组件共享一个用于处理传入请求的引擎组件。Server 中可以有多个 Service。</p></blockquote><p><strong>属性表</strong></p><table><thead><tr><th>属性</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>className</td><td>这个类必须实现<code>org.apache.catalina.Service</code>接口。</td><td>默认 <code>org.apache.catalina.core.StandardService</code></td></tr><tr><td>name</td><td>此服务的显示名称，如果您使用标准 Catalina 组件，将包含在日志消息中。与特定服务器关联的每个服务的名称必须是唯一的。</td><td></td></tr></tbody></table><p><strong>实例 - <code>conf/server.xml</code> 配置文件示例</strong></p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;?</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">xml</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;1.0&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">?&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Server</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;8080&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> shutdown</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;SHUTDOWN&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Service</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;xxx&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Server</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-3-executor" tabindex="-1"><a class="header-anchor" href="#_2-2-3-executor"><span>2.2.3. Executor</span></a></h4><blockquote><p>Executor 表示可以在 Tomcat 中的组件之间共享的线程池。</p></blockquote><p><strong>属性表</strong></p><table><thead><tr><th>属性</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>className</td><td>这个类必须实现<code>org.apache.catalina.Executor</code>接口。</td><td>默认 <code>org.apache.catalina.core.StandardThreadExecutor</code></td></tr><tr><td>name</td><td>线程池名称。</td><td>要求唯一, 供 Connector 元素的 executor 属性使用</td></tr><tr><td>namePrefix</td><td>线程名称前缀。</td><td></td></tr><tr><td>maxThreads</td><td>最大活跃线程数。</td><td>默认 200</td></tr><tr><td>minSpareThreads</td><td>最小活跃线程数。</td><td>默认 25</td></tr><tr><td>maxIdleTime</td><td>当前活跃线程大于 minSpareThreads 时,空闲线程关闭的等待最大时间。</td><td>默认 60000ms</td></tr><tr><td>maxQueueSize</td><td>线程池满情况下的请求排队大小。</td><td>默认 Integer.MAX_VALUE</td></tr></tbody></table><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Service</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;xxx&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Executor</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;tomcatThreadPool&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> namePrefix</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;catalina-exec-&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> maxThreads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;300&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> minSpareThreads</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;25&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-4-connector" tabindex="-1"><a class="header-anchor" href="#_2-2-4-connector"><span>2.2.4. Connector</span></a></h4><blockquote><p>Connector 代表连接组件。Tomcat 支持三种协议：HTTP/1.1、HTTP/2.0、AJP。</p></blockquote><p><strong>属性表</strong></p><table><thead><tr><th>属性</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>asyncTimeout</td><td>Servlet3.0 规范中的异步请求超时</td><td>默认 30s</td></tr><tr><td>port</td><td>请求连接的 TCP Port</td><td>设置为 0,则会随机选取一个未占用的端口号</td></tr><tr><td>protocol</td><td>协议. 一般情况下设置为 HTTP/1.1,这种情况下连接模型会在 NIO 和 APR/native 中自动根据配置选择</td><td></td></tr><tr><td>URIEncoding</td><td>对 URI 的编码方式.</td><td>如果设置系统变量 org.apache.catalina.STRICT_SERVLET_COMPLIANCE 为 true,使用 ISO-8859-1 编码;如果未设置此系统变量且未设置此属性, 使用 UTF-8 编码</td></tr><tr><td>useBodyEncodingForURI</td><td>是否采用指定的 contentType 而不是 URIEncoding 来编码 URI 中的请求参数</td><td></td></tr></tbody></table><p>以下属性在标准的 Connector(NIO, NIO2 和 APR/native)中有效:</p><table><thead><tr><th>属性</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>acceptCount</td><td>当最大请求连接 maxConnections 满时的最大排队大小</td><td>默认 100,注意此属性和 Executor 中属性 maxQueueSize 的区别.这个指的是请求连接满时的堆栈大小,Executor 的 maxQueueSize 指的是处理线程满时的堆栈大小</td></tr><tr><td>connectionTimeout</td><td>请求连接超时</td><td>默认 60000ms</td></tr><tr><td>executor</td><td>指定配置的线程池名称</td><td></td></tr><tr><td>keepAliveTimeout</td><td>keeAlive 超时时间</td><td>默认值为 connectionTimeout 配置值.-1 表示不超时</td></tr><tr><td>maxConnections</td><td>最大连接数</td><td>连接满时后续连接放入最大为 acceptCount 的队列中. 对 NIO 和 NIO2 连接,默认值为 10000;对 APR/native,默认值为 8192</td></tr><tr><td>maxThreads</td><td>如果指定了 Executor, 此属性忽略;否则为 Connector 创建的内部线程池最大值</td><td>默认 200</td></tr><tr><td>minSpareThreads</td><td>如果指定了 Executor, 此属性忽略;否则为 Connector 创建线程池的最小活跃线程数</td><td>默认 10</td></tr><tr><td>processorCache</td><td>协议处理器缓存 Processor 对象的大小</td><td>-1 表示不限制.当不使用 servlet3.0 的异步处理情况下: 如果配置 Executor,配置为 Executor 的 maxThreads;否则配置为 Connnector 的 maxThreads. 如果使用 Serlvet3.0 异步处理, 取 maxThreads 和 maxConnections 的最大值</td></tr></tbody></table><h4 id="_2-2-5-context" tabindex="-1"><a class="header-anchor" href="#_2-2-5-context"><span>2.2.5. Context</span></a></h4><blockquote><p>Context 元素表示一个 Web 应用程序，它在特定的虚拟主机中运行。每个 Web 应用程序都基于 Web 应用程序存档（WAR）文件，或者包含相应的解包内容的相应目录，如 Servlet 规范中所述。</p></blockquote><p><strong>属性表</strong></p><table><thead><tr><th>属性</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>altDDName</td><td>web.xml 部署描述符路径</td><td>默认 /WEB-INF/web.xml</td></tr><tr><td>docBase</td><td>Context 的 Root 路径</td><td>和 Host 的 appBase 相结合, 可确定 web 应用的实际目录</td></tr><tr><td>failCtxIfServletStartFails</td><td>同 Host 中的 failCtxIfServletStartFails, 只对当前 Context 有效</td><td>默认为 false</td></tr><tr><td>logEffectiveWebXml</td><td>是否日志打印 web.xml 内容(web.xml 由默认的 web.xml 和应用中的 web.xml 组成)</td><td>默认为 false</td></tr><tr><td>path</td><td>web 应用的 context path</td><td>如果为根路径,则配置为空字符串(&quot;&quot;), 不能不配置</td></tr><tr><td>privileged</td><td>是否使用 Tomcat 提供的 manager servlet</td><td></td></tr><tr><td>reloadable</td><td>/WEB-INF/classes/ 和/WEB-INF/lib/ 目录中 class 文件发生变化是否自动重新加载</td><td>默认为 false</td></tr><tr><td>swallowOutput</td><td>true 情况下, System.out 和 System.err 输出将被定向到 web 应用日志中</td><td>默认为 false</td></tr></tbody></table><h4 id="_2-2-6-engine" tabindex="-1"><a class="header-anchor" href="#_2-2-6-engine"><span>2.2.6. Engine</span></a></h4><blockquote><p>Engine 元素表示与特定的 Catalina 服务相关联的整个请求处理机器。它接收并处理来自一个或多个连接器的所有请求，并将完成的响应返回给连接器，以便最终传输回客户端。</p></blockquote><p><strong>属性表</strong></p><table><thead><tr><th>属性</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>defaultHost</td><td>默认主机名，用于标识将处理指向此服务器上主机名称但未在此配置文件中配置的请求的主机。</td><td>这个名字必须匹配其中一个嵌套的主机元素的名字属性。</td></tr><tr><td>name</td><td>此引擎的逻辑名称，用于日志和错误消息。</td><td>在同一服务器中使用多个服务元素时，每个引擎必须分配一个唯一的名称。</td></tr></tbody></table><h4 id="_2-2-7-host" tabindex="-1"><a class="header-anchor" href="#_2-2-7-host"><span>2.2.7. Host</span></a></h4><blockquote><p>Host 元素表示一个虚拟主机，它是一个服务器的网络名称（如“<a href="http://www.mycompany.com" target="_blank" rel="noopener noreferrer">www.mycompany.com</a>”）与运行 Tomcat 的特定服务器的关联。</p></blockquote><p><strong>属性表</strong></p><table><thead><tr><th>属性</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>name</td><td>名称</td><td>用于日志输出</td></tr><tr><td>appBase</td><td>虚拟主机对应的应用基础路径</td><td>可以是个绝对路径, 或\${CATALINA_BASE}相对路径</td></tr><tr><td>xmlBase</td><td>虚拟主机 XML 基础路径,里面应该有 Context xml 配置文件</td><td>可以是个绝对路径, 或\${CATALINA_BASE}相对路径</td></tr><tr><td>createDirs</td><td>当 appBase 和 xmlBase 不存在时,是否创建目录</td><td>默认为 true</td></tr><tr><td>autoDeploy</td><td>是否周期性的检查 appBase 和 xmlBase 并 deploy web 应用和 context 描述符</td><td>默认为 true</td></tr><tr><td>deployIgnore</td><td>忽略 deploy 的正则</td><td></td></tr><tr><td>deployOnStartup</td><td>Tomcat 启动时是否自动 deploy</td><td>默认为 true</td></tr><tr><td>failCtxIfServletStartFails</td><td>配置为 true 情况下,任何 load-on-startup &gt;=0 的 servlet 启动失败,则其对应的 Contxt 也启动失败</td><td>默认为 false</td></tr></tbody></table><h4 id="_2-2-8-cluster" tabindex="-1"><a class="header-anchor" href="#_2-2-8-cluster"><span>2.2.8. Cluster</span></a></h4><p>由于在实际开发中，我从未用过 Tomcat 集群配置，所以没研究。</p><h3 id="_2-3-启动" tabindex="-1"><a class="header-anchor" href="#_2-3-启动"><span>2.3. 启动</span></a></h3><h4 id="_2-3-1-部署方式" tabindex="-1"><a class="header-anchor" href="#_2-3-1-部署方式"><span>2.3.1. 部署方式</span></a></h4><p>这种方式要求本地必须安装 Tomcat 。</p><p>将打包好的 war 包放在 Tomcat 安装目录下的 <code>webapps</code> 目录下，然后在 bin 目录下执行 <code>startup.bat</code> 或 <code>startup.sh</code> ，Tomcat 会自动解压 <code>webapps</code> 目录下的 war 包。</p><p>成功后，可以访问 <code>http://localhost:8080/xxx</code> （xxx 是 war 包文件名）。</p><blockquote><p><strong>注意</strong></p><p>以上步骤是最简单的示例。步骤中的 war 包解压路径、启动端口以及一些更多的功能都可以修改配置文件来定制 （主要是 <code>server.xml</code> 或 <code>context.xml</code> 文件）。</p></blockquote><h4 id="_2-3-2-嵌入式" tabindex="-1"><a class="header-anchor" href="#_2-3-2-嵌入式"><span>2.3.2. 嵌入式</span></a></h4><h5 id="_2-3-2-1-api-方式" tabindex="-1"><a class="header-anchor" href="#_2-3-2-1-api-方式"><span>2.3.2.1. API 方式</span></a></h5><p>在 pom.xml 中添加依赖</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.apache.tomcat.embed&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;tomcat-embed-core&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;8.5.24&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加 SimpleEmbedTomcatServer.java 文件，内容如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.Optional</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> org.apache.catalina.startup.Tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> SimpleTomcatServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> PORT </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 8080</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> CONTEXT_PATH </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;/javatool-server&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 设定 profile</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Optional</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt; </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Optional</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">ofNullable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;spring.profiles.active&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setProperty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;spring.profiles.active&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">profile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">orElse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;develop&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Tomcat</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setPort</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(PORT);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getHost</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setAppBase</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;.&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addWebapp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(CONTEXT_PATH, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getAbsolutePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;src/main/webapp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        tomcat</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">await</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> getAbsolutePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> folderPath</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SimpleEmbedTomcatServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getProtectionDomain</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getCodeSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getLocation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">substring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">folderPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;target&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            path </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> folderPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">substring</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">folderPath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">indexOf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;target&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> path;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功后，可以访问 <code>http://localhost:8080/javatool-server</code> 。</p><blockquote><p><strong>说明</strong></p><p>本示例是使用 <code>org.apache.tomcat.embed</code> 启动嵌入式 Tomcat 的最简示例。</p><p>这个示例中使用的是 Tomcat 默认的配置，但通常，我们需要对 Tomcat 配置进行一些定制和调优。为了加载配置文件，启动类就要稍微再复杂一些。这里不想再贴代码，有兴趣的同学可以参考：</p><p><a href="https://github.com/dunwu/JavaStack/tree/master/codes/javatool/server" target="_blank" rel="noopener noreferrer"><strong>示例项目</strong></a></p></blockquote><h5 id="_2-3-2-2-使用-maven-插件启动-不推荐" tabindex="-1"><a class="header-anchor" href="#_2-3-2-2-使用-maven-插件启动-不推荐"><span>2.3.2.2. 使用 maven 插件启动（不推荐）</span></a></h5><p>不推荐理由：这种方式启动 maven 虽然最简单，但是有一个很大的问题是，真的很久很久没发布新版本了（最新版本发布时间：2013-11-11）。且貌似只能找到 Tomcat6 、Tomcat7 插件。</p><p><strong>使用方法</strong></p><p>在 pom.xml 中引入插件</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.apache.tomcat.maven&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;tomcat7-maven-plugin&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2.2&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;8080&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">port</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;/\${project.artifactId}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uriEncoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;UTF-8&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">uriEncoding</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">configuration</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">plugin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行 <code>mvn tomcat7:run</code> 命令，启动 Tomcat。</p><p>成功后，可以访问 <code>http://localhost:8080/xxx</code> （xxx 是 \${project.artifactId} 指定的项目名）。</p><h4 id="_2-3-3-ide-插件" tabindex="-1"><a class="header-anchor" href="#_2-3-3-ide-插件"><span>2.3.3. IDE 插件</span></a></h4><p>常见 Java IDE 一般都有对 Tomcat 的支持。</p><p>以 Intellij IDEA 为例，提供了 <strong>Tomcat and TomEE Integration</strong> 插件（一般默认会安装）。</p><p><strong>使用步骤</strong></p><ul><li>点击 Run/Debug Configurations &gt; New Tomcat Server &gt; local ，打开 Tomcat 配置页面。</li><li>点击 Confiure... 按钮，设置 Tomcat 安装路径。</li><li>点击 Deployment 标签页，设置要启动的应用。</li><li>设置启动应用的端口、JVM 参数、启动浏览器等。</li><li>成功后，可以访问 <code>http://localhost:8080/</code>（当然，你也可以在 url 中设置上下文名称）。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/tomcat-intellij-run-config.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p><strong>说明</strong></p><p>个人认为这个插件不如 Eclipse 的 Tomcat 插件好用，Eclipse 的 Tomcat 插件支持对 Tomcat xml 配置文件进行配置。而这里，你只能自己去 Tomcat 安装路径下修改配置文件。</p></blockquote><p>文中的嵌入式启动示例可以参考<a href="https://github.com/dunwu/JavaStack/tree/master/codes/javatool/server" target="_blank" rel="noopener noreferrer"><strong>我的示例项目</strong></a></p><h2 id="_3-tomcat-架构" tabindex="-1"><a class="header-anchor" href="#_3-tomcat-架构"><span>3. Tomcat 架构</span></a></h2><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20201113193431.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>Tomcat 要实现 2 个核心功能：</p><ul><li><strong>处理 Socket 连接</strong>，负责网络字节流与 Request 和 Response 对象的转化。</li><li><strong>加载和管理 Servlet</strong>，以及<strong>处理具体的 Request 请求</strong>。</li></ul><p>为此，Tomcat 设计了两个核心组件：</p><ul><li><strong>连接器（Connector）</strong>：负责和外部通信</li><li><strong>容器（Container）</strong>：负责内部处理</li></ul><h3 id="_3-1-service" tabindex="-1"><a class="header-anchor" href="#_3-1-service"><span>3.1. Service</span></a></h3><p>Tomcat 支持的 I/O 模型有：</p><ul><li>NIO：非阻塞 I/O，采用 Java NIO 类库实现。</li><li>NIO2：异步 I/O，采用 JDK 7 最新的 NIO2 类库实现。</li><li>APR：采用 Apache 可移植运行库实现，是 C/C++ 编写的本地库。</li></ul><p>Tomcat 支持的应用层协议有：</p><ul><li>HTTP/1.1：这是大部分 Web 应用采用的访问协议。</li><li>AJP：用于和 Web 服务器集成（如 Apache）。</li><li>HTTP/2：HTTP 2.0 大幅度的提升了 Web 性能。</li></ul><p>Tomcat 支持多种 I/O 模型和应用层协议。为了实现这点，一个容器可能对接多个连接器。但是，单独的连接器或容器都不能对外提供服务，需要把它们组装起来才能工作，组装后这个整体叫作 Service 组件。Tomcat 内可能有多个 Service，通过在 Tomcat 中配置多个 Service，可以实现通过不同的端口号来访问同一台机器上部署的不同应用。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20201111093124.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p><strong>一个 Tomcat 实例有一个或多个 Service；一个 Service 有多个 Connector 和 Container</strong>。Connector 和 Container 之间通过标准的 ServletRequest 和 ServletResponse 通信。</p><h3 id="_3-2-连接器" tabindex="-1"><a class="header-anchor" href="#_3-2-连接器"><span>3.2. 连接器</span></a></h3><p>连接器对 Servlet 容器屏蔽了协议及 I/O 模型等的区别，无论是 HTTP 还是 AJP，在容器中获取到的都是一个标准的 ServletRequest 对象。</p><p>连接器的主要功能是：</p><ul><li>网络通信</li><li>应用层协议解析</li><li>Tomcat Request/Response 与 ServletRequest/ServletResponse 的转化</li></ul><p>Tomcat 设计了 3 个组件来实现这 3 个功能，分别是 <strong><code>EndPoint</code></strong>、<strong><code>Processor</code></strong> 和 <strong><code>Adapter</code></strong>。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20201111101440.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>组件间通过抽象接口交互。这样做还有一个好处是**封装变化。**这是面向对象设计的精髓，将系统中经常变化的部分和稳定的部分隔离，有助于增加复用性，并降低系统耦合度。网络通信的 I/O 模型是变化的，可能是非阻塞 I/O、异步 I/O 或者 APR。应用层协议也是变化的，可能是 HTTP、HTTPS、AJP。浏览器端发送的请求信息也是变化的。但是整体的处理逻辑是不变的，EndPoint 负责提供字节流给 Processor，Processor 负责提供 Tomcat Request 对象给 Adapter，Adapter 负责提供 ServletRequest 对象给容器。</p><p>如果要支持新的 I/O 方案、新的应用层协议，只需要实现相关的具体子类，上层通用的处理逻辑是不变的。由于 I/O 模型和应用层协议可以自由组合，比如 NIO + HTTP 或者 NIO2 + AJP。Tomcat 的设计者将网络通信和应用层协议解析放在一起考虑，设计了一个叫 ProtocolHandler 的接口来封装这两种变化点。各种协议和通信模型的组合有相应的具体实现类。比如：Http11NioProtocol 和 AjpNioProtocol。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20201027091819.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_3-2-1-protocolhandler-组件" tabindex="-1"><a class="header-anchor" href="#_3-2-1-protocolhandler-组件"><span>3.2.1. ProtocolHandler 组件</span></a></h4><p><strong>连接器用 ProtocolHandler 接口来封装通信协议和 I/O 模型的差异</strong>。ProtocolHandler 内部又分为 EndPoint 和 Processor 模块，EndPoint 负责底层 Socket 通信，Proccesor 负责应用层协议解析。</p><h5 id="_3-2-1-1-endpoint" tabindex="-1"><a class="header-anchor" href="#_3-2-1-1-endpoint"><span>3.2.1.1. EndPoint</span></a></h5><p>EndPoint 是通信端点，即通信监听的接口，是具体的 Socket 接收和发送处理器，是对传输层的抽象，因此 EndPoint 是用来实现 TCP/IP 协议的。</p><p>EndPoint 是一个接口，对应的抽象实现类是 AbstractEndpoint，而 AbstractEndpoint 的具体子类，比如在 NioEndpoint 和 Nio2Endpoint 中，有两个重要的子组件：Acceptor 和 SocketProcessor。</p><p>其中 Acceptor 用于监听 Socket 连接请求。SocketProcessor 用于处理接收到的 Socket 请求，它实现 Runnable 接口，在 Run 方法里调用协议处理组件 Processor 进行处理。为了提高处理能力，SocketProcessor 被提交到线程池来执行。而这个线程池叫作执行器（Executor)。</p><h5 id="_3-2-1-2-processor" tabindex="-1"><a class="header-anchor" href="#_3-2-1-2-processor"><span>3.2.1.2. Processor</span></a></h5><p>如果说 EndPoint 是用来实现 TCP/IP 协议的，那么 Processor 用来实现 HTTP 协议，Processor 接收来自 EndPoint 的 Socket，读取字节流解析成 Tomcat Request 和 Response 对象，并通过 Adapter 将其提交到容器处理，Processor 是对应用层协议的抽象。</p><p>Processor 是一个接口，定义了请求的处理等方法。它的抽象实现类 AbstractProcessor 对一些协议共有的属性进行封装，没有对方法进行实现。具体的实现有 AJPProcessor、HTTP11Processor 等，这些具体实现类实现了特定协议的解析方法和请求处理方式。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20201113185929.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>从图中我们看到，EndPoint 接收到 Socket 连接后，生成一个 SocketProcessor 任务提交到线程池去处理，SocketProcessor 的 Run 方法会调用 Processor 组件去解析应用层协议，Processor 通过解析生成 Request 对象后，会调用 Adapter 的 Service 方法。</p><h4 id="_3-2-2-adapter" tabindex="-1"><a class="header-anchor" href="#_3-2-2-adapter"><span>3.2.2. Adapter</span></a></h4><p><strong>连接器通过适配器 Adapter 调用容器</strong>。</p><p>由于协议不同，客户端发过来的请求信息也不尽相同，Tomcat 定义了自己的 Request 类来适配这些请求信息。</p><p>ProtocolHandler 接口负责解析请求并生成 Tomcat Request 类。但是这个 Request 对象不是标准的 ServletRequest，也就意味着，不能用 Tomcat Request 作为参数来调用容器。Tomcat 的解决方案是引入 CoyoteAdapter，这是适配器模式的经典运用，连接器调用 CoyoteAdapter 的 Sevice 方法，传入的是 Tomcat Request 对象，CoyoteAdapter 负责将 Tomcat Request 转成 ServletRequest，再调用容器的 Service 方法。</p><h3 id="_3-3-容器" tabindex="-1"><a class="header-anchor" href="#_3-3-容器"><span>3.3. 容器</span></a></h3><p>Tomcat 设计了 4 种容器，分别是 Engine、Host、Context 和 Wrapper。</p><ul><li><strong>Engine</strong> - Servlet 的顶层容器，包含一 个或多个 Host 子容器；</li><li><strong>Host</strong> - 虚拟主机，负责 web 应用的部署和 Context 的创建；</li><li><strong>Context</strong> - Web 应用上下文，包含多个 Wrapper，负责 web 配置的解析、管理所有的 Web 资源；</li><li><strong>Wrapper</strong> - 最底层的容器，是对 Servlet 的封装，负责 Servlet 实例的创 建、执行和销毁。</li></ul><h4 id="_3-3-1-请求分发-servlet-过程" tabindex="-1"><a class="header-anchor" href="#_3-3-1-请求分发-servlet-过程"><span>3.3.1. 请求分发 Servlet 过程</span></a></h4><p>Tomcat 是怎么确定请求是由哪个 Wrapper 容器里的 Servlet 来处理的呢？答案是，Tomcat 是用 Mapper 组件来完成这个任务的。</p><p>举例来说，假如有一个网购系统，有面向网站管理人员的后台管理系统，还有面向终端客户的在线购物系统。这两个系统跑在同一个 Tomcat 上，为了隔离它们的访问域名，配置了两个虚拟域名：<code>manage.shopping.com</code>和<code>user.shopping.com</code>，网站管理人员通过<code>manage.shopping.com</code>域名访问 Tomcat 去管理用户和商品，而用户管理和商品管理是两个单独的 Web 应用。终端客户通过<code>user.shopping.com</code>域名去搜索商品和下订单，搜索功能和订单管理也是两个独立的 Web 应用。如下所示，演示了 url 应声 Servlet 的处理流程。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20201113192022.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>假如有用户访问一个 URL，比如图中的<code>http://user.shopping.com:8080/order/buy</code>，Tomcat 如何将这个 URL 定位到一个 Servlet 呢？</p><ol><li><strong>首先，根据协议和端口号选定 Service 和 Engine。</strong></li><li><strong>然后，根据域名选定 Host。</strong></li><li><strong>之后，根据 URL 路径找到 Context 组件。</strong></li><li><strong>最后，根据 URL 路径找到 Wrapper（Servlet）。</strong></li></ol><p>这个路由分发过程具体是怎么实现的呢？答案是使用 Pipeline-Valve 管道。</p><h4 id="_3-3-2-pipeline-value" tabindex="-1"><a class="header-anchor" href="#_3-3-2-pipeline-value"><span>3.3.2. Pipeline-Value</span></a></h4><p>Pipeline 可以理解为现实中的管道，Valve 为管道中的阀门，Request 和 Response 对象在管道中经过各个阀门的处理和控制。</p><p>Pipeline-Valve 是责任链模式，责任链模式是指在一个请求处理的过程中有很多处理者依次对请求进行处理，每个处理者负责做自己相应的处理，处理完之后将再调用下一个处理者继续处理。Valve 表示一个处理点，比如权限认证和记录日志。</p><p>先来了解一下 Valve 和 Pipeline 接口的设计：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/Pipeline与Valve.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ul><li>每一个容器都有一个 Pipeline 对象，只要触发这个 Pipeline 的第一个 Valve，这个容器里 Pipeline 中的 Valve 就都会被调用到。但是，不同容器的 Pipeline 是怎么链式触发的呢，比如 Engine 中 Pipeline 需要调用下层容器 Host 中的 Pipeline。</li><li>这是因为 Pipeline 中还有个 getBasic 方法。这个 BasicValve 处于 Valve 链表的末端，它是 Pipeline 中必不可少的一个 Valve，负责调用下层容器的 Pipeline 里的第一个 Valve。</li><li>Pipeline 中有 addValve 方法。Pipeline 中维护了 Valve 链表，Valve 可以插入到 Pipeline 中，对请求做某些处理。我们还发现 Pipeline 中没有 invoke 方法，因为整个调用链的触发是 Valve 来完成的，Valve 完成自己的处理后，调用 <code>getNext.invoke()</code> 来触发下一个 Valve 调用。</li><li>Valve 中主要的三个方法：<code>setNext</code>、<code>getNext</code>、<code>invoke</code>。Valve 之间的关系是单向链式结构，本身 <code>invoke</code> 方法中会调用下一个 Valve 的 <code>invoke</code> 方法。</li><li>各层容器对应的 basic valve 分别是 <code>StandardEngineValve</code>、<code>StandardHostValve</code>、 <code>StandardContextValve</code>、<code>StandardWrapperValve</code>。</li><li>由于 Valve 是一个处理点，因此 invoke 方法就是来处理请求的。注意到 Valve 中有 getNext 和 setNext 方法，因此我们大概可以猜到有一个链表将 Valve 链起来了。</li></ul><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/请求处理过程.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>整个调用过程由连接器中的 Adapter 触发的，它会调用 Engine 的第一个 Valve：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">connector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getContainer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getPipeline</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getFirst</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">invoke</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(request, response);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="_4-tomcat-生命周期" tabindex="-1"><a class="header-anchor" href="#_4-tomcat-生命周期"><span>4. Tomcat 生命周期</span></a></h2><h3 id="_4-1-tomcat-的启动过程" tabindex="-1"><a class="header-anchor" href="#_4-1-tomcat-的启动过程"><span>4.1. Tomcat 的启动过程</span></a></h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20201118145455.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li>Tomcat 是一个 Java 程序，它的运行从执行 <code>startup.sh</code> 脚本开始。<code>startup.sh</code> 会启动一个 JVM 来运行 Tomcat 的启动类 <code>Bootstrap</code>。</li><li><code>Bootstrap</code> 会初始化 Tomcat 的类加载器并实例化 <code>Catalina</code>。</li><li><code>Catalina</code> 会通过 Digester 解析 <code>server.xml</code>，根据其中的配置信息来创建相应组件，并调用 <code>Server</code> 的 <code>start</code> 方法。</li><li><code>Server</code> 负责管理 <code>Service</code> 组件，它会调用 <code>Service</code> 的 <code>start</code> 方法。</li><li><code>Service</code> 负责管理 <code>Connector</code> 和顶层容器 <code>Engine</code>，它会调用 <code>Connector</code> 和 <code>Engine</code> 的 <code>start</code> 方法。</li></ol><h4 id="_4-1-1-catalina-组件" tabindex="-1"><a class="header-anchor" href="#_4-1-1-catalina-组件"><span>4.1.1. Catalina 组件</span></a></h4><p>Catalina 的职责就是解析 server.xml 配置，并据此实例化 Server。接下来，调用 Server 组件的 init 方法和 start 方法，将 Tomcat 启动起来。</p><p>Catalina 还需要处理各种“异常”情况，比如当我们通过“Ctrl + C”关闭 Tomcat 时，Tomcat 将如何优雅的停止并且清理资源呢？因此 Catalina 在 JVM 中注册一个“关闭钩子”。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> start</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //1. 如果持有的 Server 实例为空，就解析 server.xml 创建出来</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getServer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        load</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //2. 如果创建失败，报错退出</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getServer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fatal</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sm</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;catalina.noServer&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //3. 启动 Server</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        getServer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LifecycleException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 创建并注册关闭钩子</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (useShutdownHook) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (shutdownHook </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            shutdownHook </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> CatalinaShutdownHook</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        Runtime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getRuntime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addShutdownHook</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(shutdownHook);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 用 await 方法监听停止请求</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (await) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        await</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        stop</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为什么需要关闭钩子？</p><p>如果我们需要在 JVM 关闭时做一些清理工作，比如将缓存数据刷到磁盘上，或者清理一些临时文件，可以向 JVM 注册一个“关闭钩子”。“关闭钩子”其实就是一个线程，JVM 在停止之前会尝试执行这个线程的 <code>run</code> 方法。</p><p>Tomcat 的“关闭钩子”—— <code>CatalinaShutdownHook</code> 做了些什么呢？</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> CatalinaShutdownHook</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                Catalina</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">stop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Throwable</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> ex</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">           ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Tomcat 的“关闭钩子”实际上就执行了 <code>Server</code> 的 <code>stop</code> 方法，<code>Server</code> 的 <code>stop</code> 方法会释放和清理所有的资源。</p><h4 id="_4-1-2-server-组件" tabindex="-1"><a class="header-anchor" href="#_4-1-2-server-组件"><span>4.1.2. Server 组件</span></a></h4><p>Server 组件的具体实现类是 StandardServer，Server 继承了 LifeCycleBase，它的生命周期被统一管理，并且它的子组件是 Service，因此它还需要管理 Service 的生命周期，也就是说在启动时调用 Service 组件的启动方法，在停止时调用它们的停止方法。Server 在内部维护了若干 Service 组件，它是以数组来保存的。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Override</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> addService</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Service</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> service) {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setServer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (servicesLock) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 创建一个长度 +1 的新数组</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Service</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> results[] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Service</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 将老的数据复制过去</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">arraycopy</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(services, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, results, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        results[</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">services</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">length</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        services </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> results</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 启动 Service 组件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getState</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isAvailable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">LifecycleException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">                // Ignore</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 触发监听事件</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        support</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">firePropertyChange</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;service&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, service);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Server 并没有一开始就分配一个很长的数组，而是在添加的过程中动态地扩展数组长度，当添加一个新的 Service 实例时，会创建一个新数组并把原来数组内容复制到新数组，这样做的目的其实是为了节省内存空间。</p><p>除此之外，Server 组件还有一个重要的任务是启动一个 Socket 来监听停止端口，这就是为什么你能通过 shutdown 命令来关闭 Tomcat。不知道你留意到没有，上面 Caralina 的启动方法的最后一行代码就是调用了 Server 的 await 方法。</p><p>在 await 方法里会创建一个 Socket 监听 8005 端口，并在一个死循环里接收 Socket 上的连接请求，如果有新的连接到来就建立连接，然后从 Socket 中读取数据；如果读到的数据是停止命令“SHUTDOWN”，就退出循环，进入 stop 流程。</p><h4 id="_4-1-3-service-组件" tabindex="-1"><a class="header-anchor" href="#_4-1-3-service-组件"><span>4.1.3. Service 组件</span></a></h4><p>Service 组件的具体实现类是 StandardService。</p><p>【源码】StandardService 源码定义</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> StandardService</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> LifecycleBase</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 名字</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> name </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //Server 实例</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Server</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> server </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 连接器数组</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Connector</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> connectors[] </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Connector</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">]</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> connectorsLock </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Object</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 对应的 Engine 容器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Engine</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> engine </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 映射器及其监听器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Mapper</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mapper </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> MapperListener</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mapperListener </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> MapperListener</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">	// ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>StandardService 继承了 LifecycleBase 抽象类。</p><p>StandardService 维护了一个 MapperListener 用于支持 Tomcat 热部署。当 Web 应用的部署发生变化时，Mapper 中的映射信息也要跟着变化，MapperListener 就是一个监听器，它监听容器的变化，并把信息更新到 Mapper 中，这是典型的观察者模式。</p><p>作为“管理”角色的组件，最重要的是维护其他组件的生命周期。此外在启动各种组件时，要注意它们的依赖关系，也就是说，要注意启动的顺序。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">protected</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> startInternal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() throws LifecycleException {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //1. 触发启动监听器</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    setState</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">LifecycleState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">STARTING</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //2. 先启动 Engine，Engine 会启动它子容器</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (engine </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (engine) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            engine</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //3. 再启动 Mapper 监听器</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    mapperListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //4. 最后启动连接器，连接器会启动它子组件，比如 Endpoint</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    synchronized</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (connectorsLock) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Connector</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> connector</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> connectors) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">connector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> LifecycleState</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">FAILED</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">                connector</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从启动方法可以看到，Service 先启动了 Engine 组件，再启动 Mapper 监听器，最后才是启动连接器。这很好理解，因为内层组件启动好了才能对外提供服务，才能启动外层的连接器组件。而 Mapper 也依赖容器组件，容器组件启动好了才能监听它们的变化，因此 Mapper 和 MapperListener 在容器组件之后启动。组件停止的顺序跟启动顺序正好相反的，也是基于它们的依赖关系。</p><h4 id="_4-1-4-engine-组件" tabindex="-1"><a class="header-anchor" href="#_4-1-4-engine-组件"><span>4.1.4. Engine 组件</span></a></h4><p>Engine 本质是一个容器，因此它继承了 ContainerBase 基类，并且实现了 Engine 接口。</p><h3 id="_4-2-web-应用的部署方式" tabindex="-1"><a class="header-anchor" href="#_4-2-web-应用的部署方式"><span>4.2. Web 应用的部署方式</span></a></h3><p>注：catalina.home：安装目录;catalina.base：工作目录;默认值 user.dir</p><ul><li>Server.xml 配置 Host 元素，指定 appBase 属性，默认$catalina.base/webapps/</li><li>Server.xml 配置 Context 元素，指定 docBase，元素，指定 web 应用的路径</li><li>自定义配置：在$catalina.base/EngineName/HostName/XXX.xml 配置 Context 元素</li></ul><p>HostConfig 监听了 StandardHost 容器的事件，在 start 方法中解析上述配置文件：</p><ul><li>扫描 appbase 路径下的所有文件夹和 war 包，解析各个应用的 META-INF/context.xml，并 创建 StandardContext，并将 Context 加入到 Host 的子容器中。</li><li>解析$catalina.base/EngineName/HostName/下的所有 Context 配置，找到相应 web 应 用的位置，解析各个应用的 META-INF/context.xml，并创建 StandardContext，并将 Context 加入到 Host 的子容器中。</li></ul><p>注：</p><ul><li>HostConfig 并没有实际解析 Context.xml，而是在 ContextConfig 中进行的。</li><li>HostConfig 中会定期检查 watched 资源文件(context.xml 配置文件)</li></ul><p>ContextConfig 解析 context.xml 顺序：</p><ul><li>先解析全局的配置 config/context.xml</li><li>然后解析 Host 的默认配置 EngineName/HostName/context.xml.default</li><li>最后解析应用的 META-INF/context.xml</li></ul><p>ContextConfig 解析 web.xml 顺序：</p><ul><li>先解析全局的配置 config/web.xml</li><li>然后解析 Host 的默认配置 EngineName/HostName/web.xml.default 接着解析应用的 MEB-INF/web.xml</li><li>扫描应用 WEB-INF/lib/下的 jar 文件，解析其中的 META-INF/web-fragment.xml 最后合并 xml 封装成 WebXml，并设置 Context</li></ul><p>注：</p><ul><li>扫描 web 应用和 jar 中的注解(Filter、Listener、Servlet)就是上述步骤中进行的。</li><li>容器的定期执行：backgroundProcess，由 ContainerBase 来实现的，并且只有在顶层容器 中才会开启线程。(backgroundProcessorDelay=10 标志位来控制)</li></ul><h3 id="_4-3-lifecycle" tabindex="-1"><a class="header-anchor" href="#_4-3-lifecycle"><span>4.3. LifeCycle</span></a></h3><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20201118105012.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="_4-3-1-请求处理过程" tabindex="-1"><a class="header-anchor" href="#_4-3-1-请求处理过程"><span>4.3.1. 请求处理过程</span></a></h4><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/请求处理过程.png" width="600"></div><ol><li>根据 server.xml 配置的指定的 connector 以及端口监听 http、或者 ajp 请求</li><li>请求到来时建立连接,解析请求参数,创建 Request 和 Response 对象,调用顶层容器 pipeline 的 invoke 方法</li><li>容器之间层层调用,最终调用业务 servlet 的 service 方法</li><li>Connector 将 response 流中的数据写到 socket 中</li></ol><h3 id="_4-4-connector-流程" tabindex="-1"><a class="header-anchor" href="#_4-4-connector-流程"><span>4.4. Connector 流程</span></a></h3><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/connector.png" width="600"></div><h4 id="_4-4-1-阻塞-io" tabindex="-1"><a class="header-anchor" href="#_4-4-1-阻塞-io"><span>4.4.1. 阻塞 IO</span></a></h4><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/阻塞IO.png" width="600"></div><h4 id="_4-4-2-非阻塞-io" tabindex="-1"><a class="header-anchor" href="#_4-4-2-非阻塞-io"><span>4.4.2. 非阻塞 IO</span></a></h4><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/非阻塞IO.png" width="600"></div><h4 id="_4-4-3-io-多路复用" tabindex="-1"><a class="header-anchor" href="#_4-4-3-io-多路复用"><span>4.4.3. IO 多路复用</span></a></h4><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/IO多路复用.png" width="600"></div><p>阻塞与非阻塞的区别在于进行读操作和写操作的系统调用时，如果此时内核态没有数据可读或者没有缓冲空间可写时，是否阻塞。</p><p>IO 多路复用的好处在于可同时监听多个 socket 的可读和可写事件，这样就能使得应用可以同时监听多个 socket，释放了应用线程资源。</p><h4 id="_4-4-4-tomcat-各类-connector-对比" tabindex="-1"><a class="header-anchor" href="#_4-4-4-tomcat-各类-connector-对比"><span>4.4.4. Tomcat 各类 Connector 对比</span></a></h4><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/Tomcat各类Connector对比.jpg" width="500"></div><ul><li>JIO：用 <a href="http://java.io" target="_blank" rel="noopener noreferrer">java.io</a> 编写的 TCP 模块，阻塞 IO</li><li>NIO：用 java.nio 编写的 TCP 模块，非阻塞 IO，（IO 多路复用）</li><li>APR：全称 Apache Portable Runtime，使用 JNI 的方式来进行读取文件以及进行网络传输</li></ul><p>Apache Portable Runtime 是一个高度可移植的库，它是 Apache HTTP Server 2.x 的核心。 APR 具有许多用途，包括访问高级 IO 功能（如 sendfile，epoll 和 OpenSSL），操作系统级功能（随机数生成，系统状态等）和本地进程处理（共享内存，NT 管道和 Unix 套接字）。</p><p>表格中字段含义说明：</p><ul><li>Support Polling - 是否支持基于 IO 多路复用的 socket 事件轮询</li><li>Polling Size - 轮询的最大连接数</li><li>Wait for next Request - 在等待下一个请求时，处理线程是否释放，BIO 是没有释放的，所以在 keep-alive=true 的情况下处理的并发连接数有限</li><li>Read Request Headers - 由于 request header 数据较少，可以由容器提前解析完毕，不需要阻塞</li><li>Read Request Body - 读取 request body 的数据是应用业务逻辑的事情，同时 Servlet 的限制，是需要阻塞读取的</li><li>Write Response - 跟读取 request body 的逻辑类似，同样需要阻塞写</li></ul><p><strong>NIO 处理相关类</strong></p><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/NIO处理相关类.jpg" width="500"></div><p>Poller 线程从 EventQueue 获取 PollerEvent，并执行 PollerEvent 的 run 方法，调用 Selector 的 select 方法，如果有可读的 Socket 则创建 Http11NioProcessor，放入到线程池中执行；</p><p>CoyoteAdapter 是 Connector 到 Container 的适配器，Http11NioProcessor 调用其提供的 service 方法，内部创建 Request 和 Response 对象，并调用最顶层容器的 Pipeline 中的第一个 Valve 的 invoke 方法</p><p>Mapper 主要处理 http url 到 servlet 的映射规则的解析，对外提供 map 方法</p><h3 id="_4-5-comet" tabindex="-1"><a class="header-anchor" href="#_4-5-comet"><span>4.5. Comet</span></a></h3><p>Comet 是一种用于 web 的推送技术，能使服务器实时地将更新的信息传送到客户端，而无须客户端发出请求<br> 在 WebSocket 出来之前，如果不适用 comet，只能通过浏览器端轮询 Server 来模拟实现服务器端推送。<br> Comet 支持 servlet 异步处理 IO，当连接上数据可读时触发事件，并异步写数据(阻塞)</p><p>Tomcat 要实现 Comet，只需继承 HttpServlet 同时，实现 CometProcessor 接口</p><ul><li>Begin：新的请求连接接入调用，可进行与 Request 和 Response 相关的对象初始化操作，并保存 response 对象，用于后续写入数据</li><li>Read：请求连接有数据可读时调用</li><li>End：当数据可用时，如果读取到文件结束或者 response 被关闭时则被调用</li><li>Error：在连接上发生异常时调用，数据读取异常、连接断开、处理异常、socket 超时</li></ul><p>Note：</p><ul><li>Read：在 post 请求有数据，但在 begin 事件中没有处理，则会调用 read，如果 read 没有读取数据，在会触发 Error 回调，关闭 socket</li><li>End：当 socket 超时，并且 response 被关闭时也会调用；server 被关闭时调用</li><li>Error：除了 socket 超时不会关闭 socket，其他都会关闭 socket</li><li>End 和 Error 时间触发时应关闭当前 comet 会话，即调用 CometEvent 的 close 方法<br> Note：在事件触发时要做好线程安全的操作</li></ul><h3 id="_4-6-异步-servlet" tabindex="-1"><a class="header-anchor" href="#_4-6-异步-servlet"><span>4.6. 异步 Servlet</span></a></h3><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/传统Servlet处理流程.png"></div><p>传统流程：</p><ul><li>首先，Servlet 接收到请求之后，request 数据解析；</li><li>接着，调用业务接口的某些方法，以完成业务处理；</li><li>最后，根据处理的结果提交响应，Servlet 线程结束</li></ul><div align="center"><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/异步Servlet处理流程.png"></div><p>异步处理流程：</p><ul><li>客户端发送一个请求</li><li>Servlet 容器分配一个线程来处理容器中的一个 servlet</li><li>servlet 调用 request.startAsync()，保存 AsyncContext, 然后返回</li><li>任何方式存在的容器线程都将退出，但是 response 仍然保持开放</li><li>业务线程使用保存的 AsyncContext 来完成响应（线程池）</li><li>客户端收到响应</li></ul><p>Servlet 线程将请求转交给一个异步线程来执行业务处理，线程本身返回至容器，此时 Servlet 还没有生成响应数据，异步线程处理完业务以后，可以直接生成响应数据（异步线程拥有 ServletRequest 和 ServletResponse 对象的引用）</p><p><strong>为什么 web 应用中支持异步？</strong></p><p>推出异步，主要是针对那些比较耗时的请求：比如一次缓慢的数据库查询，一次外部 REST API 调用, 或者是其他一些 I/O 密集型操作。这种耗时的请求会很快的耗光 Servlet 容器的线程池，继而影响可扩展性。</p><p>Note：从客户端的角度来看，request 仍然像任何其他的 HTTP 的 request-response 交互一样，只是耗费了更长的时间而已</p><p><strong>异步事件监听</strong></p><ul><li>onStartAsync：Request 调用 startAsync 方法时触发</li><li>onComplete：syncContext 调用 complete 方法时触发</li><li>onError：处理请求的过程出现异常时触发</li><li>onTimeout：socket 超时触发</li></ul><p>Note :<br> onError/ onTimeout 触发后，会紧接着回调 onComplete<br> onComplete 执行后，就不可再操作 request 和 response</p><h2 id="_5-参考资料" tabindex="-1"><a class="header-anchor" href="#_5-参考资料"><span>5. 参考资料</span></a></h2><ul><li><p><strong>官方</strong></p><ul><li><a href="http://tomcat.apache.org/" target="_blank" rel="noopener noreferrer">Tomcat 官方网站</a></li><li><a href="http://wiki.apache.org/tomcat/FrontPage" target="_blank" rel="noopener noreferrer">Tomcat Wiki</a></li><li><a href="http://tomee.apache.org/" target="_blank" rel="noopener noreferrer">Tomee 官方网站</a></li></ul></li><li><p><strong>文章</strong></p><ul><li><a href="http://www.oracle.com/webfolder/technetwork/tutorials/obe/java/basic_app_embedded_tomcat/basic_app-tomcat-embedded.html" target="_blank" rel="noopener noreferrer">Creating a Web App with Bootstrap and Tomcat Embedded</a></li><li><a href="https://juejin.im/post/58eb5fdda0bb9f00692a78fc" target="_blank" rel="noopener noreferrer">Tomcat 组成与工作原理</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tomcat1/index.html" target="_blank" rel="noopener noreferrer">Tomcat 工作原理</a></li><li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-tomcat2/index.html?ca=drs-" target="_blank" rel="noopener noreferrer">Tomcat 设计模式分析</a></li></ul></li></ul>`,244)]))}const r=i(n,[["render",l],["__file","index.html.vue"]]),k=JSON.parse('{"path":"/pages/4a4c02/","title":"Tomcat 快速入门","lang":"zh-CN","frontmatter":{"title":"Tomcat 快速入门","date":"2022-02-17T22:34:30.000Z","order":1,"categories":["Java","JavaEE","服务器","Tomcat"],"tags":["Java","JavaWeb","服务器","Tomcat"],"permalink":"/pages/4a4c02/","description":"Tomcat 快速入门 🎁 版本说明 当前最新版本：Tomcat 8.5.24 环境要求：JDK7+ 1. Tomcat 简介 1.1. Tomcat 是什么 Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为 Web 服务器的一些特有功能，如 Tomcat 管理和控制平台、...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/4a4c02/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"Tomcat 快速入门"}],["meta",{"property":"og:description","content":"Tomcat 快速入门 🎁 版本说明 当前最新版本：Tomcat 8.5.24 环境要求：JDK7+ 1. Tomcat 简介 1.1. Tomcat 是什么 Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为 Web 服务器的一些特有功能，如 Tomcat 管理和控制平台、..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/tomcat.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaWeb"}],["meta",{"property":"article:tag","content":"服务器"}],["meta",{"property":"article:tag","content":"Tomcat"}],["meta",{"property":"article:published_time","content":"2022-02-17T22:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Tomcat 快速入门\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/tomcat.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/tomcat-intellij-run-config.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201113193431.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201111093124.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201111101440.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201027091819.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201113185929.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201113192022.jpg\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/Pipeline与Valve.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/cs/java/javaweb/tools/tomcat/请求处理过程.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201118145455.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20201118105012.png\\"],\\"datePublished\\":\\"2022-02-17T22:34:30.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"1. Tomcat 简介","slug":"_1-tomcat-简介","link":"#_1-tomcat-简介","children":[{"level":3,"title":"1.1. Tomcat 是什么","slug":"_1-1-tomcat-是什么","link":"#_1-1-tomcat-是什么","children":[]},{"level":3,"title":"1.2. Tomcat 重要目录","slug":"_1-2-tomcat-重要目录","link":"#_1-2-tomcat-重要目录","children":[]},{"level":3,"title":"1.3. web 工程发布目录结构","slug":"_1-3-web-工程发布目录结构","link":"#_1-3-web-工程发布目录结构","children":[]},{"level":3,"title":"1.4. Tomcat 功能","slug":"_1-4-tomcat-功能","link":"#_1-4-tomcat-功能","children":[]}]},{"level":2,"title":"2. Tomcat 入门","slug":"_2-tomcat-入门","link":"#_2-tomcat-入门","children":[{"level":3,"title":"2.1. 安装","slug":"_2-1-安装","link":"#_2-1-安装","children":[]},{"level":3,"title":"2.2. 配置","slug":"_2-2-配置","link":"#_2-2-配置","children":[]},{"level":3,"title":"2.3. 启动","slug":"_2-3-启动","link":"#_2-3-启动","children":[]}]},{"level":2,"title":"3. Tomcat 架构","slug":"_3-tomcat-架构","link":"#_3-tomcat-架构","children":[{"level":3,"title":"3.1. Service","slug":"_3-1-service","link":"#_3-1-service","children":[]},{"level":3,"title":"3.2. 连接器","slug":"_3-2-连接器","link":"#_3-2-连接器","children":[]},{"level":3,"title":"3.3. 容器","slug":"_3-3-容器","link":"#_3-3-容器","children":[]}]},{"level":2,"title":"4. Tomcat 生命周期","slug":"_4-tomcat-生命周期","link":"#_4-tomcat-生命周期","children":[{"level":3,"title":"4.1. Tomcat 的启动过程","slug":"_4-1-tomcat-的启动过程","link":"#_4-1-tomcat-的启动过程","children":[]},{"level":3,"title":"4.2. Web 应用的部署方式","slug":"_4-2-web-应用的部署方式","link":"#_4-2-web-应用的部署方式","children":[]},{"level":3,"title":"4.3. LifeCycle","slug":"_4-3-lifecycle","link":"#_4-3-lifecycle","children":[]},{"level":3,"title":"4.4. Connector 流程","slug":"_4-4-connector-流程","link":"#_4-4-connector-流程","children":[]},{"level":3,"title":"4.5. Comet","slug":"_4-5-comet","link":"#_4-5-comet","children":[]},{"level":3,"title":"4.6. 异步 Servlet","slug":"_4-6-异步-servlet","link":"#_4-6-异步-servlet","children":[]}]},{"level":2,"title":"5. 参考资料","slug":"_5-参考资料","link":"#_5-参考资料","children":[]}],"git":{"createdTime":1749521666000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":30.1,"words":9029},"filePathRelative":"posts/01.Java/02.JavaEE/02.服务器/01.Tomcat/01.Tomcat快速入门.md","localizedDate":"2022年2月17日","excerpt":"\\n<blockquote>\\n<p>🎁 版本说明</p>\\n<p>当前最新版本：Tomcat 8.5.24</p>\\n<p>环境要求：JDK7+</p>\\n</blockquote>\\n<h2>1. Tomcat 简介</h2>\\n<h3>1.1. Tomcat 是什么</h3>\\n<p>Tomcat 是由 Apache 开发的一个 Servlet 容器，实现了对 Servlet 和 JSP 的支持，并提供了作为 Web 服务器的一些特有功能，如 Tomcat 管理和控制平台、安全域管理和 Tomcat 阀等。</p>\\n<p>由于 Tomcat 本身也内含了一个 HTTP 服务器，它也可以被视作一个单独的 Web 服务器。但是，不能将 Tomcat 和 Apache HTTP 服务器混淆，Apache HTTP 服务器是一个用 C 语言实现的 HTTP Web 服务器；这两个 HTTP web server 不是捆绑在一起的。Tomcat 包含了一个配置管理工具，也可以通过编辑 XML 格式的配置文件来进行配置。</p>","autoDesc":true}');export{r as comp,k as data};
