import{_ as e,c as r,b as n,o}from"./app-CzhkwBwW.js";const l={};function i(a,t){return o(),r("div",null,t[0]||(t[0]=[n('<h1 id="系统测试架构" tabindex="-1"><a class="header-anchor" href="#系统测试架构"><span>系统测试架构</span></a></h1><blockquote><p>软件测试描述一种用来促进鉴定软件的正确性、完整性、安全性和质量的过程。软件测试的经典定义是：在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。</p><p>现代软件开发项目中，分工明确，基本上都会有研发、测试、QA 等角色。不同角色由于关注的视角不同，测试目标和测试方法也不完全相同。本文主要从研发、测试的视角去考量软件测试技术。</p><p>注意：</p><ul><li>为了方便，只有测试人员需要关注的测试点用【测试】标注；</li><li>而只有研发人员需要关注的测试点用【研发】标注；</li><li>都需要关注的测试点则不作标注。</li></ul></blockquote><h2 id="测试方法分类" tabindex="-1"><a class="header-anchor" href="#测试方法分类"><span>测试方法分类</span></a></h2><h3 id="从测试设计方法分类" tabindex="-1"><a class="header-anchor" href="#从测试设计方法分类"><span>从测试设计方法分类</span></a></h3><ul><li><strong>黑盒测试【测试】</strong> - 把软件系统当作一个“黑箱”，无法了解或使用系统的内部结构及知识。从软件的行为，而不是内部结构出发来设计测试。</li><li><strong>白盒测试【研发】</strong> - 设计者可以看到软件系统的内部结构，并且使用软件的内部知识来指导测试数据及方法的选择。</li><li><strong>灰盒测试</strong> - 介于黑盒和白盒之间。</li></ul><blockquote><p>小结：</p><ul><li>黑河测试通常针对的是软件的行为或功能，一般是测试人员主要关注的。</li><li>白盒测试通常则需要对软件有一定程度的了解，一般是开发人员所关注的。</li><li>灰盒测试通常是为了测试软件在特定的场景下的表现，而非主场景。</li></ul></blockquote><h3 id="从测试的目的分类" tabindex="-1"><a class="header-anchor" href="#从测试的目的分类"><span>从测试的目的分类</span></a></h3><h4 id="功能测试" tabindex="-1"><a class="header-anchor" href="#功能测试"><span>功能测试</span></a></h4><ul><li><strong>单元测试（Unit Test）</strong> - 在最低粒度的功能/参数上验证程序的准确性，比如测试一个函数的正确性。【研发】 <ul><li>常用技术：<a href="https://github.com/junit-team/junit4" target="_blank" rel="noopener noreferrer"><strong>junit4</strong></a>、<a href="https://github.com/junit-team/junit5" target="_blank" rel="noopener noreferrer"><strong>junit5</strong></a>、<a href="https://github.com/mockito/mockito" target="_blank" rel="noopener noreferrer"><strong>mockito</strong></a>、<a href="https://github.com/joel-costigliola/assertj-core" target="_blank" rel="noopener noreferrer"><strong>assertj-core</strong></a></li></ul></li><li><strong>功能测试（Functional Test）</strong> - 验证模块的功能。【测试】</li><li><strong>集成测试（Integration Test）</strong> - 验证几个互相有依赖关系的模块的功能。【测试】</li><li><strong>场景测试（Scenario Test）</strong>- 验证几个模块是否能完成一个用户场景。【测试】</li><li><strong>系统测试（System Test）</strong> - 对于整个系统功能的测试。【测试】</li><li><strong>Alpha 测试</strong> - 软件测试人员在真实用户环境中对软件进行全面的测试。【测试】</li><li><strong>Beta 测试</strong> - 也叫公测，是真实的用户在真实的环境中进行的测试。</li></ul><h4 id="非功能测试" tabindex="-1"><a class="header-anchor" href="#非功能测试"><span>非功能测试</span></a></h4><ul><li><strong>压力测试（Stress test）</strong> - 验证软件在超过负载设计的情况下仍能返回正确的结果，没有崩溃</li><li><strong>负载测试（Load test）</strong> - 测试软件在负载情况下能否正常工作</li><li><strong>性能测试（Performance test）</strong> - 测试软件的效能，是否提供满意的服务质量。 <ul><li>常用技术：<a href="https://jmeter.apache.org/" target="_blank" rel="noopener noreferrer"><strong>JMeter</strong></a>、JMH。</li></ul></li><li><strong>软件辅助功能测试（Accessibility test</strong>） - 测试软件是否向残疾用户提供足够的辅助功能</li><li><strong>本地化/全球化测试（Localization/Globalization</strong>）</li><li><strong>兼容性测试（Compatibility Test）</strong></li><li><strong>配置测试（Configuration Test）</strong> - 测试软件在各种配置下能否正常工作</li><li><strong>可用性测试（Usability Test）</strong> – 测试软件是否好用</li><li><strong>安全性测试（Security Test）</strong></li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://www.cnblogs.com/TankXiao/archive/2012/02/20/2347016.html" target="_blank" rel="noopener noreferrer">软件测试 (一) 软件测试方法大汇总</a></li><li><a href="https://www.xncoding.com/2018/01/07/java/jmh.html" target="_blank" rel="noopener noreferrer">Java 微基准测试框架 JMH</a></li></ul>',13)]))}const c=e(l,[["render",i],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/pages/641e5c/","title":"系统测试架构","lang":"zh-CN","frontmatter":{"title":"系统测试架构","date":"2019-12-10T17:00:00.000Z","order":"09","categories":["设计","架构","综合"],"tags":["架构","设计","测试"],"permalink":"/pages/641e5c/","description":"系统测试架构 软件测试描述一种用来促进鉴定软件的正确性、完整性、安全性和质量的过程。软件测试的经典定义是：在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。 现代软件开发项目中，分工明确，基本上都会有研发、测试、QA 等角色。不同角色由于关注的视角不同，测试目标和测试方法也不完全相同。本文主要从研发、测...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/641e5c/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"系统测试架构"}],["meta",{"property":"og:description","content":"系统测试架构 软件测试描述一种用来促进鉴定软件的正确性、完整性、安全性和质量的过程。软件测试的经典定义是：在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。 现代软件开发项目中，分工明确，基本上都会有研发、测试、QA 等角色。不同角色由于关注的视角不同，测试目标和测试方法也不完全相同。本文主要从研发、测..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-06T08:40:02.000Z"}],["meta",{"property":"article:tag","content":"架构"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"测试"}],["meta",{"property":"article:published_time","content":"2019-12-10T17:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-06T08:40:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"系统测试架构\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-12-10T17:00:00.000Z\\",\\"dateModified\\":\\"2025-05-06T08:40:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"测试方法分类","slug":"测试方法分类","link":"#测试方法分类","children":[{"level":3,"title":"从测试设计方法分类","slug":"从测试设计方法分类","link":"#从测试设计方法分类","children":[]},{"level":3,"title":"从测试的目的分类","slug":"从测试的目的分类","link":"#从测试的目的分类","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1746520802000,"updatedTime":1746520802000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":3.02,"words":906},"filePathRelative":"posts/03.设计/01.架构/00.综合/09.系统测试架构.md","localizedDate":"2019年12月10日","excerpt":"\\n<blockquote>\\n<p>软件测试描述一种用来促进鉴定软件的正确性、完整性、安全性和质量的过程。软件测试的经典定义是：在规定的条件下对程序进行操作，以发现程序错误，衡量软件质量，并对其是否能满足设计要求进行评估的过程。</p>\\n<p>现代软件开发项目中，分工明确，基本上都会有研发、测试、QA 等角色。不同角色由于关注的视角不同，测试目标和测试方法也不完全相同。本文主要从研发、测试的视角去考量软件测试技术。</p>\\n<p>注意：</p>\\n<ul>\\n<li>为了方便，只有测试人员需要关注的测试点用【测试】标注；</li>\\n<li>而只有研发人员需要关注的测试点用【研发】标注；</li>\\n<li>都需要关注的测试点则不作标注。</li>\\n</ul>\\n</blockquote>","autoDesc":true}');export{c as comp,g as data};
