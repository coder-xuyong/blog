import{_ as e,c as a,b as o,o as r}from"./app-CXMpKKsw.js";const c={};function n(p,t){return r(),a("div",null,t[0]||(t[0]=[o('<h2 id="tomcat-和-jetty" tabindex="-1"><a class="header-anchor" href="#tomcat-和-jetty"><span>Tomcat 和 Jetty</span></a></h2><p>Web 容器 Tomcat 或 Jetty，作为重要的系统中间件，连接着浏览器和你的 Web 应用，并且支撑着 Web 程序的运行，可以说，<strong>弄懂了 Tomcat 和 Jetty 的原理，Java Web 开发对你来说就毫无秘密可言</strong>。</p><h2 id="web-容器" tabindex="-1"><a class="header-anchor" href="#web-容器"><span>Web 容器</span></a></h2><p>早期的 Web 应用主要用于浏览新闻等静态页面，HTTP 服务器（比如 Apache、Nginx）向浏览器返回静态 HTML，浏览器负责解析 HTML，将结果呈现给用户。</p><p>随着互联网的发展，我们已经不满足于仅仅浏览静态页面，还希望通过一些交互操作，来获取动态结果，因此也就需要一些扩展机制能够让 HTTP 服务器调用服务端程序。</p><p>于是 Sun 公司推出了 Servlet 技术。你可以把 Servlet 简单理解为运行在服务端的 Java 小程序，但是 Servlet 没有 main 方法，不能独立运行，因此必须把它部署到 Servlet 容器中，由容器来实例化并调用 Servlet。</p><p>而 Tomcat 和 Jetty 就是一个 Servlet 容器。为了方便使用，它们也具有 HTTP 服务器的功能，因此<strong>Tomcat 或者 Jetty 就是一个“HTTP 服务器 + Servlet 容器”，我们也叫它们 Web 容器。</strong></p><p>其他应用服务器比如 JBoss 和 WebLogic，它们不仅仅有 Servlet 容器的功能，也包含 EJB 容器，是完整的 Java EE 应用服务器。从这个角度看，Tomcat 和 Jetty 算是一个轻量级的应用服务器。</p><p>在微服务架构日渐流行的今天，开发人员更喜欢稳定的、轻量级的应用服务器，并且应用程序用内嵌的方式来运行 Servlet 容器也逐渐流行起来。之所以选择轻量级，是因为在微服务架构下，我们把一个大而全的单体应用，拆分成一个个功能单一的微服务，在这个过程中，服务的数量必然要增加，但为了减少资源的消耗，并且降低部署的成本，我们希望运行服务的 Web 容器也是轻量级的，Web 容器本身应该消耗较少的内存和 CPU 资源，并且由应用本身来启动一个嵌入式的 Web 容器，而不是通过 Web 容器来部署和启动应用，这样可以降低应用部署的复杂度。</p>',9)]))}const i=e(c,[["render",n],["__file","index.html.vue"]]),l=JSON.parse('{"path":"/pages/f37326/","title":"Tomcat 和 Jetty","lang":"zh-CN","frontmatter":{"title":"Tomcat 和 Jetty","date":"2022-02-17T22:34:30.000Z","order":5,"categories":["Java","JavaEE","服务器","Tomcat"],"tags":["Java","JavaWeb","服务器","Tomcat","Jetty"],"permalink":"/pages/f37326/","description":"Tomcat 和 Jetty Web 容器 Tomcat 或 Jetty，作为重要的系统中间件，连接着浏览器和你的 Web 应用，并且支撑着 Web 程序的运行，可以说，弄懂了 Tomcat 和 Jetty 的原理，Java Web 开发对你来说就毫无秘密可言。 Web 容器 早期的 Web 应用主要用于浏览新闻等静态页面，HTTP 服务器（比如 Ap...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/f37326/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"Tomcat 和 Jetty"}],["meta",{"property":"og:description","content":"Tomcat 和 Jetty Web 容器 Tomcat 或 Jetty，作为重要的系统中间件，连接着浏览器和你的 Web 应用，并且支撑着 Web 程序的运行，可以说，弄懂了 Tomcat 和 Jetty 的原理，Java Web 开发对你来说就毫无秘密可言。 Web 容器 早期的 Web 应用主要用于浏览新闻等静态页面，HTTP 服务器（比如 Ap..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaWeb"}],["meta",{"property":"article:tag","content":"服务器"}],["meta",{"property":"article:tag","content":"Tomcat"}],["meta",{"property":"article:tag","content":"Jetty"}],["meta",{"property":"article:published_time","content":"2022-02-17T22:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Tomcat 和 Jetty\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-17T22:34:30.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"Tomcat 和 Jetty","slug":"tomcat-和-jetty","link":"#tomcat-和-jetty","children":[]},{"level":2,"title":"Web 容器","slug":"web-容器","link":"#web-容器","children":[]}],"git":{"createdTime":1749521666000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":2.11,"words":632},"filePathRelative":"posts/01.Java/02.JavaEE/02.服务器/01.Tomcat/05.Tomcat和Jetty.md","localizedDate":"2022年2月17日","excerpt":"<h2>Tomcat 和 Jetty</h2>\\n<p>Web 容器 Tomcat 或 Jetty，作为重要的系统中间件，连接着浏览器和你的 Web 应用，并且支撑着 Web 程序的运行，可以说，<strong>弄懂了 Tomcat 和 Jetty 的原理，Java Web 开发对你来说就毫无秘密可言</strong>。</p>\\n<h2>Web 容器</h2>\\n<p>早期的 Web 应用主要用于浏览新闻等静态页面，HTTP 服务器（比如 Apache、Nginx）向浏览器返回静态 HTML，浏览器负责解析 HTML，将结果呈现给用户。</p>\\n<p>随着互联网的发展，我们已经不满足于仅仅浏览静态页面，还希望通过一些交互操作，来获取动态结果，因此也就需要一些扩展机制能够让 HTTP 服务器调用服务端程序。</p>","autoDesc":true}');export{i as comp,l as data};
