import{_ as n,c as i,b as a,o as t}from"./app-DwDA4vvh.js";const r={};function o(s,e){return t(),i("div",null,e[0]||(e[0]=[a(`<h1 id="spring-bean" tabindex="-1"><a class="header-anchor" href="#spring-bean"><span>Spring Bean</span></a></h1><p>在 Spring 中，构成应用程序主体由 Spring IoC 容器管理的对象称为 Bean。<strong>Bean 是由 Spring IoC 容器实例化、装配和管理的对象</strong>。 Bean 以及它们之间的依赖关系反映在容器使用的配置元数据中。</p><h2 id="spring-bean-定义" tabindex="-1"><a class="header-anchor" href="#spring-bean-定义"><span>Spring Bean 定义</span></a></h2><h3 id="beandefinition" tabindex="-1"><a class="header-anchor" href="#beandefinition"><span>BeanDefinition</span></a></h3><p>Spring IoC 容器本身，并不能识别配置的元数据。为此，要将这些配置信息转为 Spring 能识别的格式——<code>BeanDefinition</code> 对象。</p><p><strong><code>BeanDefinition</code> 是 Spring 中定义 Bean 的配置元信息接口</strong>，它包含：</p><ul><li>Bean 类名</li><li>Bean 行为配置元素，如：作用域、自动绑定的模式、生命周期回调等</li><li>其他 Bean 引用，也可称为合作者（Collaborators）或依赖（Dependencies）</li><li>配置设置，如 Bean 属性（Properties）</li></ul><h4 id="beandefinition-元信息" tabindex="-1"><a class="header-anchor" href="#beandefinition-元信息"><span>BeanDefinition 元信息</span></a></h4><p><code>BeanDefinition</code> 元信息如下：</p><table><thead><tr><th>属性（Property）</th><th>说明</th></tr></thead><tbody><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-class" target="_blank" rel="noopener noreferrer">Class</a></td><td>全类名，必须是具体类，不能用抽象类或接口</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-beanname" target="_blank" rel="noopener noreferrer">Name</a></td><td>Bean 的名称或者 ID</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes" target="_blank" rel="noopener noreferrer">Scope</a></td><td>Bean 的作用域（如：<code>singleton</code>、<code>prototype</code> 等）</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators" target="_blank" rel="noopener noreferrer">Constructor arguments</a></td><td>Bean 构造器参数（用于依赖注入）</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-collaborators" target="_blank" rel="noopener noreferrer">Properties</a></td><td>Bean 属性设置（用于依赖注入）</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-autowire" target="_blank" rel="noopener noreferrer">Autowiring mode</a></td><td>Bean 自动绑定模式（如：通过名称 byName）</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-lazy-init" target="_blank" rel="noopener noreferrer">Lazy initialization mode</a></td><td>Bean 延迟初始化模式（延迟和非延迟）</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-lifecycle-initializingbean" target="_blank" rel="noopener noreferrer">Initialization method</a></td><td>Bean 初始化回调方法名称</td></tr><tr><td><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-lifecycle-disposablebean" target="_blank" rel="noopener noreferrer">Destruction method</a></td><td>Bean 销毁回调方法名称</td></tr></tbody></table><h4 id="beandefinition-构建" tabindex="-1"><a class="header-anchor" href="#beandefinition-构建"><span>BeanDefinition 构建</span></a></h4><p>BeanDefinition 构建方式：</p><ul><li><p>通过 <code>BeanDefinitionBuilder</code></p></li><li><p>通过 <code>AbstractBeanDefinition</code> 以及派生类</p></li></ul><blockquote><p>💻 Spring Bean 定义示例源码：<a href="https://github.com/dunwu/spring-tutorial/blob/master/codes/core/spring-core-ioc/src/test/java/io/github/dunwu/spring/core/bean/BeanDefinitionTests.java" target="_blank" rel="noopener noreferrer">BeanDefinitionTests</a></p></blockquote><h3 id="spring-bean-命名" tabindex="-1"><a class="header-anchor" href="#spring-bean-命名"><span>Spring Bean 命名</span></a></h3><h4 id="spring-bean-命名规则" tabindex="-1"><a class="header-anchor" href="#spring-bean-命名规则"><span>Spring Bean 命名规则</span></a></h4><p>每个 Bean 拥有一个或多个标识符（identifiers），这些标识符在 Bean 所在的容器必须是唯一的。通常，一个 Bean 仅有一个标识符，如果需要额外的，可考虑使用别名（Alias）来扩充。</p><p>在基于 XML 的配置元信息中，开发人员<strong>可以使用 <code>id</code> 属性、<code>name</code> 属性或来指定 Bean 标识符</strong>。通常，Bean 的标识符由字母组成，允许出现特殊字符。如果要想引入 Bean 的别名的话，可在 <code>name</code> 属性使用半角逗号（“,”）或分号（“;”) 来间隔。</p><p>Spring 中，<strong>为 Bean 指定 <code>id</code> 和 <code>name</code> 属性不是必须的</strong>。如果不指定，Spring 会自动为 Bean 分配一个唯一的名称。尽管 Bean 的命名没有限制，不过<strong>官方建议采用驼峰命名法来命名 Bean</strong>。</p><h4 id="spring-bean-命名生成器" tabindex="-1"><a class="header-anchor" href="#spring-bean-命名生成器"><span>Spring Bean 命名生成器</span></a></h4><p>Spring 提供了两种 Spring Bean 命名生成器：</p><ul><li><code>DefaultBeanNameGenerator</code>：默认通用 <code>BeanNameGenerator</code> 实现。</li><li><code>AnnotationBeanNameGenerator</code>：基于注解扫描的 <code>BeanNameGenerator</code> 实现。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> BeanNameGenerator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">   String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> generateBeanName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BeanDefinition</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> definition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BeanDefinitionRegistry</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> registry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="spring-bean-别名" tabindex="-1"><a class="header-anchor" href="#spring-bean-别名"><span>Spring Bean 别名</span></a></h4><p>Spring 支持通过 <code>&lt;alias&gt;</code> 属性为 Bean 设置别名。</p><p>Bean 别名（Alias）的作用：</p><ul><li>复用现有的 <code>BeanDefinition</code></li><li>更具有场景化的命名方法，比如： <ul><li><code>&lt;alias name=&quot;myApp-dataSource&quot; alias=&quot;subsystemA-dataSource&quot;/&gt;</code></li><li><code>&lt;alias name=&quot;myApp-dataSource&quot; alias=&quot;subsystemB-dataSource&quot;/&gt;</code></li></ul></li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bean</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;user&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;io.github.dunwu.spring.core.bean.entity.person.User&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;!-- 属性略 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">bean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">alias</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> name</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;user&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> alias</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;aliasUser&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-bean-生命周期" tabindex="-1"><a class="header-anchor" href="#spring-bean-生命周期"><span>Spring Bean 生命周期</span></a></h2><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20211201102734.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ol><li><p>Spring 对 Bean 进行实例化（相当于 new XXX()）</p></li><li><p>Spring 将值和引用注入到 Bean 对应的属性中</p></li><li><p>如果 Bean 实现了 <code>BeanNameAware</code> 接口，Spring 将 Bean 的 ID 传递给 <code>setBeanName</code> 方法</p><ul><li>作用是通过 Bean 的引用来获得 Bean ID，一般业务中是很少有用到 Bean 的 ID 的</li></ul></li><li><p>如果 Bean 实现了 <code>BeanFactoryAware</code> 接口，Spring 将调用 <code>setBeanDactory</code> 方法，并把 <code>BeanFactory</code> 容器实例作为参数传入。</p><ul><li>作用是获取 Spring 容器，如 Bean 通过 Spring 容器发布事件等</li></ul></li><li><p>如果 Bean 实现了 <code>ApplicationContextAware</code> 接口，Spring 容器将调用 <code>setApplicationContext</code> 方法，把应用上下文作为参数传入</p><ul><li>作用与 <code>BeanFactory</code> 类似都是为了获取 Spring 容器，不同的是 Spring 容器在调用 <code>setApplicationContext</code> 方法时会把它自己作为 <code>setApplicationContext</code> 的参数传入，而 Spring 容器在调用 <code>setBeanFactory</code> 前需要使用者自己指定（注入）<code>setBeanFactory</code> 里的参数 <code>BeanFactory</code></li></ul></li><li><p>如果 Bean 实现了 <code>BeanPostProcess</code> 接口，Spring 将调用 <code>postProcessBeforeInitialization</code> 方法</p><ul><li>作用是在 Bean 实例创建成功后对其进行增强处理，如对 Bean 进行修改，增加某个功能</li></ul></li><li><p>如果 Bean 实现了 <code>InitializingBean</code> 接口，Spring 将调用 <code>afterPropertiesSet</code> 方法，作用与在配置文件中对 Bean 使用 <code>init-method</code> 声明初始化的作用一样，都是在 Bean 的全部属性设置成功后执行的初始化方法。</p></li><li><p>如果 Bean 实现了 <code>BeanPostProcess</code> 接口，Spring 将调用 <code>postProcessAfterInitialization</code> 方法</p><ul><li><code>postProcessBeforeInitialization</code> 是在 Bean 初始化前执行的，而 <code>postProcessAfterInitialization</code> 是在 Bean 初始化后执行的</li></ul></li><li><p>经过以上的工作后，Bean 将一直驻留在应用上下文中给应用使用，直到应用上下文被销毁</p></li><li><p>如果 Bean 实现了 <code>DispostbleBean</code> 接口，Spring 将调用它的 <code>destory</code> 方法，作用与在配置文件中对 Bean 使用 <code>destory-method</code> 属性的作用一样，都是在 Bean 实例销毁前执行的方法。</p></li></ol><h2 id="spring-bean-注册" tabindex="-1"><a class="header-anchor" href="#spring-bean-注册"><span>Spring Bean 注册</span></a></h2><p>注册 Spring Bean 实际上是将 <code>BeanDefinition</code> 注册到 IoC 容器中。</p><h3 id="xml-配置元信息" tabindex="-1"><a class="header-anchor" href="#xml-配置元信息"><span>XML 配置元信息</span></a></h3><p>Spring 的传统配置方式。在 <code>&lt;bean&gt;</code> 标签中配置元数据内容。</p><p>缺点是当 JavaBean 过多时，产生的配置文件足以让你眼花缭乱。</p><h3 id="注解配置元信息" tabindex="-1"><a class="header-anchor" href="#注解配置元信息"><span>注解配置元信息</span></a></h3><p>使用 <code>@Bean</code>、<code>@Component</code>、<code>@Import</code> 注解注册 Spring Bean。</p><h3 id="java-api-配置元信息" tabindex="-1"><a class="header-anchor" href="#java-api-配置元信息"><span>Java API 配置元信息</span></a></h3><ul><li>命名方式：<code>BeanDefinitionRegistry#registerBeanDefinition(String,BeanDefinition)</code></li><li>非命名方式：<code>BeanDefinitionReaderUtils#registerWithGeneratedName(AbstractBeanDefinition,BeanDefinitionRegistry)</code></li><li>配置类方式：<code>AnnotatedBeanDefinitionReader#register(Class...)</code></li></ul><blockquote><p>💻 Spring Bean 注册示例源码：<a href="https://github.com/dunwu/spring-tutorial/blob/master/codes/core/spring-core-ioc/src/test/java/io/github/dunwu/spring/core/bean/BeanRegistryTests.java" target="_blank" rel="noopener noreferrer">BeanRegistryTests</a></p></blockquote><h2 id="spring-bean-实例化" tabindex="-1"><a class="header-anchor" href="#spring-bean-实例化"><span>Spring Bean 实例化</span></a></h2><p>Spring Bean 实例化方式：</p><ul><li>常规方式 <ul><li>通过构造器（配置元信息：XML、Java 注解和 Java API）</li><li>通过静态方法（配置元信息：XML、Java 注解和 Java API）</li><li>通过 Bean 工厂方法（配置元信息：XML、Java 注解和 Java API）</li><li>通过 <code>FactoryBean</code>（配置元信息：XML、Java 注解和 Java API）</li></ul></li><li>特殊方式 <ul><li>通过 <code>ServiceLoaderFactoryBean</code>（配置元信息：XML、Java 注解和 Java API ）</li><li>通过 <code>AutowireCapableBeanFactory#createBean(java.lang.Class, int, boolean)</code></li><li>通过 <code>BeanDefinitionRegistry#registerBeanDefinition(String,BeanDefinition)</code></li></ul></li></ul><blockquote><p>💻 Spring Bean 实例化示例源码：<a href="https://github.com/dunwu/spring-tutorial/blob/master/codes/core/spring-core-ioc/src/test/java/io/github/dunwu/spring/core/bean/BeanInstantiationTests.java" target="_blank" rel="noopener noreferrer">BeanInstantiationTests</a>、<a href="https://github.com/dunwu/spring-tutorial/blob/master/codes/core/spring-core-ioc/src/test/java/io/github/dunwu/spring/core/bean/BeanInstantiationSpecialTests.java" target="_blank" rel="noopener noreferrer">BeanInstantiationSpecialTests</a></p></blockquote><h2 id="spring-bean-初始化和销毁" tabindex="-1"><a class="header-anchor" href="#spring-bean-初始化和销毁"><span>Spring Bean 初始化和销毁</span></a></h2><p>Spring Bean 初始化和销毁的方式有以下几种：</p><ol><li><p>使用 <code>@PostConstruct</code> 和 <code>@PreDestroy</code> 注解分别指定相应的初始化方法和销毁方法。</p></li><li><p>实现 <code>InitializingBean</code> 接口的 <code>afterPropertiesSet()</code> 方法来编写初始化方法；实现 <code>DisposableBean</code> 接口的 <code>destroy()</code> 方法来编写销毁方法。</p><ul><li><code>InitializingBean</code> 接口包含一个 <code>afterPropertiesSet</code> 方法，可以通过实现该接口，然后在这个方法中编写初始化逻辑。</li><li><code>DisposableBean</code>接口包含一个 <code>destory</code> 方法，可以通过实现该接口，然后在这个方法中编写销毁逻辑。</li></ul></li><li><p>自定义初始化方法</p><ul><li>XML 配置：<code>&lt;bean init-method=&quot;init&quot; destroy=&quot;destroy&quot; ... /&gt;</code></li><li>Java 注解：<code>@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;destroy&quot;)</code></li><li>Java API：<code>AbstractBeanDefinition#setInitMethodName(String)</code> 和 <code>AbstractBeanDefinition#setDestroyMethodName(String)</code> 分别定义初始化和销毁方法</li></ul></li></ol><p>注意：如果同时存在，执行顺序会按照序列执行。</p><p>Bean 的延迟初始化</p><ul><li>xml 方式：<code>&lt;bean lazy-init=&quot;true&quot; ... /&gt;</code></li><li>注解方式：<code>@Lazy</code></li></ul><p>Spring 提供了一个 <code>BeanPostProcessor</code> 接口，提供了两个方法 <code>postProcessBeforeInitialization</code> 和 <code>postProcessAfterInitialization</code>。其中<code>postProcessBeforeInitialization</code> 在组件的初始化方法调用之前执行，<code>postProcessAfterInitialization</code> 在组件的初始化方法调用之后执行。它们都包含两个入参：</p><ul><li><code>bean</code>：当前组件对象；</li><li><code>beanName</code>：当前组件在容器中的名称。</li></ul><blockquote><p>💻 Spring Bean 初始化和销毁示例源码：<a href="https://github.com/dunwu/spring-tutorial/blob/master/codes/core/spring-core-ioc/src/test/java/io/github/dunwu/spring/core/bean/BeanInitDestroyTests.java" target="_blank" rel="noopener noreferrer">BeanInitDestroyTests</a></p></blockquote><h2 id="spring-bean-垃圾回收" tabindex="-1"><a class="header-anchor" href="#spring-bean-垃圾回收"><span>Spring Bean 垃圾回收</span></a></h2><p>Spring Bean 垃圾回收步骤：</p><ol><li>关闭 Spring 容器（应用上下文）</li><li>执行 GC</li><li>Spring Bean 覆盖的 <code>finalize()</code> 方法被回调</li></ol><h2 id="spring-bean-作用范围" tabindex="-1"><a class="header-anchor" href="#spring-bean-作用范围"><span>Spring Bean 作用范围</span></a></h2><table><thead><tr><th style="text-align:left;">Scope</th><th style="text-align:left;">Description</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-singleton" target="_blank" rel="noopener noreferrer">singleton</a></td><td style="text-align:left;">(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.</td></tr><tr><td style="text-align:left;"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-prototype" target="_blank" rel="noopener noreferrer">prototype</a></td><td style="text-align:left;">Scopes a single bean definition to any number of object instances.</td></tr><tr><td style="text-align:left;"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-request" target="_blank" rel="noopener noreferrer">request</a></td><td style="text-align:left;">Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td style="text-align:left;"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-session" target="_blank" rel="noopener noreferrer">session</a></td><td style="text-align:left;">Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td style="text-align:left;"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-application" target="_blank" rel="noopener noreferrer">application</a></td><td style="text-align:left;">Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr><tr><td style="text-align:left;"><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#websocket-stomp-websocket-scope" target="_blank" rel="noopener noreferrer">websocket</a></td><td style="text-align:left;">Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.</td></tr></tbody></table><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans" target="_blank" rel="noopener noreferrer">Spring 官方文档之 Core Technologies</a></li><li><a href="https://time.geekbang.org/course/intro/265" target="_blank" rel="noopener noreferrer">《小马哥讲 Spring 核心编程思想》</a></li></ul>`,61)]))}const p=n(r,[["render",o],["__file","index.html.vue"]]),c=JSON.parse('{"path":"/pages/68097d/","title":"Spring Bean","lang":"zh-CN","frontmatter":{"title":"Spring Bean","date":"2021-12-10T19:15:42.000Z","order":1,"categories":["Java","框架","Spring","Spring核心"],"tags":["Java","框架","Spring","Bean","BeanDefinition"],"permalink":"/pages/68097d/","description":"Spring Bean 在 Spring 中，构成应用程序主体由 Spring IoC 容器管理的对象称为 Bean。Bean 是由 Spring IoC 容器实例化、装配和管理的对象。 Bean 以及它们之间的依赖关系反映在容器使用的配置元数据中。 Spring Bean 定义 BeanDefinition Spring IoC 容器本身，并不能识别...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/68097d/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"Spring Bean"}],["meta",{"property":"og:description","content":"Spring Bean 在 Spring 中，构成应用程序主体由 Spring IoC 容器管理的对象称为 Bean。Bean 是由 Spring IoC 容器实例化、装配和管理的对象。 Bean 以及它们之间的依赖关系反映在容器使用的配置元数据中。 Spring Bean 定义 BeanDefinition Spring IoC 容器本身，并不能识别..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/snap/20211201102734.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-08T07:28:30.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"框架"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"Bean"}],["meta",{"property":"article:tag","content":"BeanDefinition"}],["meta",{"property":"article:published_time","content":"2021-12-10T19:15:42.000Z"}],["meta",{"property":"article:modified_time","content":"2025-04-08T07:28:30.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Spring Bean\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20211201102734.png\\"],\\"datePublished\\":\\"2021-12-10T19:15:42.000Z\\",\\"dateModified\\":\\"2025-04-08T07:28:30.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"Spring Bean 定义","slug":"spring-bean-定义","link":"#spring-bean-定义","children":[{"level":3,"title":"BeanDefinition","slug":"beandefinition","link":"#beandefinition","children":[]},{"level":3,"title":"Spring Bean 命名","slug":"spring-bean-命名","link":"#spring-bean-命名","children":[]}]},{"level":2,"title":"Spring Bean 生命周期","slug":"spring-bean-生命周期","link":"#spring-bean-生命周期","children":[]},{"level":2,"title":"Spring Bean 注册","slug":"spring-bean-注册","link":"#spring-bean-注册","children":[{"level":3,"title":"XML 配置元信息","slug":"xml-配置元信息","link":"#xml-配置元信息","children":[]},{"level":3,"title":"注解配置元信息","slug":"注解配置元信息","link":"#注解配置元信息","children":[]},{"level":3,"title":"Java API 配置元信息","slug":"java-api-配置元信息","link":"#java-api-配置元信息","children":[]}]},{"level":2,"title":"Spring Bean 实例化","slug":"spring-bean-实例化","link":"#spring-bean-实例化","children":[]},{"level":2,"title":"Spring Bean 初始化和销毁","slug":"spring-bean-初始化和销毁","link":"#spring-bean-初始化和销毁","children":[]},{"level":2,"title":"Spring Bean 垃圾回收","slug":"spring-bean-垃圾回收","link":"#spring-bean-垃圾回收","children":[]},{"level":2,"title":"Spring Bean 作用范围","slug":"spring-bean-作用范围","link":"#spring-bean-作用范围","children":[]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1735573878000,"updatedTime":1744097310000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":3,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":7.16,"words":2147},"filePathRelative":"posts/01.Java/03.框架/01.Spring/01.Spring核心/01.SpringBean.md","localizedDate":"2021年12月10日","excerpt":"\\n<p>在 Spring 中，构成应用程序主体由 Spring IoC 容器管理的对象称为 Bean。<strong>Bean 是由 Spring IoC 容器实例化、装配和管理的对象</strong>。 Bean 以及它们之间的依赖关系反映在容器使用的配置元数据中。</p>\\n<h2>Spring Bean 定义</h2>\\n<h3>BeanDefinition</h3>\\n<p>Spring IoC 容器本身，并不能识别配置的元数据。为此，要将这些配置信息转为 Spring 能识别的格式——<code>BeanDefinition</code> 对象。</p>\\n<p><strong><code>BeanDefinition</code> 是 Spring 中定义 Bean 的配置元信息接口</strong>，它包含：</p>","autoDesc":true}');export{p as comp,c as data};
