import{_ as t,c as i,b as a,o as n}from"./app-SKlWjzij.js";const s="/assets/111-CZgoE_Jg.png",l="/assets/222-B4YxTonp.png",r="/assets/333-D4upjKy-.png",h="/assets/444-Cm1BUA-S.png",o="/assets/555-D4AbJDjQ.png",p="/assets/666-C2JhHTA7.png",d={};function c(g,e){return n(),i("div",null,e[0]||(e[0]=[a(`<h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p>MinIO 是一种高性能、S3 兼容的对象存储。<br> 它专为大规模 AI/ML、数据湖和数据库工作负载而构建，并且它是由软件定义的存储。<br> 不需要购买任何专有硬件，就可以在云上和普通硬件上拥有分布式对象存储。<br> MinIO 拥有开源 GNU AGPL v3 和商业企业许可证的双重许可。</p><h2 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景"><span>使用场景</span></a></h2><p>适用于存储图片、视频、日志、备份等非结构化数据。</p><h2 id="minio-client-vs-minio-java-api" tabindex="-1"><a class="header-anchor" href="#minio-client-vs-minio-java-api"><span>minio client VS minio java api</span></a></h2><table><thead><tr><th style="text-align:center;">指标\\方式</th><th style="text-align:center;">mc.exe</th><th style="text-align:center;">java minio api</th></tr></thead><tbody><tr><td style="text-align:center;">文件数量</td><td style="text-align:center;">66630 个</td><td style="text-align:center;">66630 个</td></tr><tr><td style="text-align:center;">文件总大小</td><td style="text-align:center;">9.35 GB</td><td style="text-align:center;">9.35 GB</td></tr><tr><td style="text-align:center;">线程数</td><td style="text-align:center;">（avg）18</td><td style="text-align:center;">18</td></tr><tr><td style="text-align:center;">下载耗时</td><td style="text-align:center;">476 s</td><td style="text-align:center;">259s</td></tr><tr><td style="text-align:center;">备注</td><td style="text-align:center;">推荐使用</td><td style="text-align:center;">连接超时频繁</td></tr></tbody></table><hr><p>注意：</p><blockquote><p>两者适合键值对的场景，数据量太大需要分页则不合适。<br> api 数据量太大获取列表会崩溃</p></blockquote><h2 id="mysql-vs-minio-空间占用对比" tabindex="-1"><a class="header-anchor" href="#mysql-vs-minio-空间占用对比"><span>mysql vs minio 空间占用对比</span></a></h2><p>查询 mysql 所有库的 容量大小</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">SELECT</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">table_schema</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> as</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;数据库&#39;,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sum(table_rows</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) as </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;记录数&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sum(truncate(data_length/1024/1024,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) as </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;数据容量(MB)&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sum(truncate(index_length/1024/1024,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) as </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;索引容量(MB)&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sum(truncate(DATA_FREE/1024/1024,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)) as </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;碎片占用(MB)&#39;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">from</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> information_schema.tables</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">group</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> by</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> table_schema</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">order</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> by</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">data_length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">desc,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">index_length</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">desc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过执行此 SQL，可以明显看出 mysql 索引占用了一部分容量，这部分使用 minio 是不会有的。mysql 除了索引还有其他空间占用，此处不过多讨论。</p><h2 id="官方网站" tabindex="-1"><a class="header-anchor" href="#官方网站"><span>官方网站</span></a></h2><p>中文官网：<a href="https://www.minio.org.cn/" target="_blank" rel="noopener noreferrer">https://www.minio.org.cn/</a><br> 英文官网：<a href="https://min.io/" target="_blank" rel="noopener noreferrer">https://min.io/</a><br> 官方演示服务器：<a href="https://play.minio.org.cn" target="_blank" rel="noopener noreferrer">https://play.minio.org.cn</a></p><ul><li>用户名: minioadmin</li><li>密码: minioadmin</li></ul><h2 id="下载安装" tabindex="-1"><a class="header-anchor" href="#下载安装"><span>下载安装</span></a></h2><p>windows 下载地址：<a href="https://dl.minio.org.cn/server/minio/release/windows-amd64/minio.exe" target="_blank" rel="noopener noreferrer">https://dl.minio.org.cn/server/minio/release/windows-amd64/minio.exe</a></p><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h2><h3 id="启动服务" tabindex="-1"><a class="header-anchor" href="#启动服务"><span>启动服务</span></a></h3><p>找到 minio.exe 所在的路径，启用 cmd 输入：<br><code>.\\minio.exe server D:\\minio --console-address &quot;:9090&quot;</code><br> 其中 <code>D:\\minio</code> 为上传文件所在路径<br> 根据控制台信息，可以看到有两个端口，其中一个端口为 api 调用端口。<br> 启动服务，随便访问一个端口，会自动跳转到客户端的端口。如：<a href="http://127.0.0.1:9090" target="_blank" rel="noopener noreferrer">http://127.0.0.1:9090</a><br> 默认账号：minioadmin，默认秘密：minioadmin</p><h3 id="创建-bucket" tabindex="-1"><a class="header-anchor" href="#创建-bucket"><span>创建 Bucket</span></a></h3><p>第一次登陆，可在页面主页看到 <code>Create a Bucket</code>,点击后输入 Bucket 的名字，如 test，点击<code>Create Bucket</code>。</p><p>创建之后，即可在页面中看到该 Bucket 的详细信息，同时也能在 D:\\minio 下看见一个 test 的文件夹。</p><h3 id="上传和下载文件" tabindex="-1"><a class="header-anchor" href="#上传和下载文件"><span>上传和下载文件</span></a></h3><p>在 Object Browser 界面，点击 Bucket 进入详情界面，点击 upload 上传文件。<br> 成功之后，选中文件即可下载。</p><h2 id="存储方式" tabindex="-1"><a class="header-anchor" href="#存储方式"><span>存储方式</span></a></h2><p>常见的存储方式有三种：文件存储、块存储、对象存储，minio 采用的是对象存储</p><h3 id="文件存储" tabindex="-1"><a class="header-anchor" href="#文件存储"><span>文件存储</span></a></h3><p><img src="https://www.redhat.com/rhdc/managed-files/styles/wysiwyg_float/private/fileStorage_orange_320x242_0.png.webp?itok=CsTgvvas" alt="文件存储" loading="lazy"><br> 最常见的存储方式，比如电脑的硬盘，以文件或文件夹的方式存储，通过文件路径访问</p><h3 id="块存储" tabindex="-1"><a class="header-anchor" href="#块存储"><span>块存储</span></a></h3><p><img src="https://www.redhat.com/rhdc/managed-files/styles/wysiwyg_float/private/blockStorage_orange_320x242_0.png.webp?itok=x5wAjDRu" alt="块存储" loading="lazy"><br> 块存储会将数据拆分成块，并单独存储各个块。每个数据块都有一个唯一标识符。当用户请求数据时，底层存储软件会将数据块重新组装成文件返回给用户。它通常会部署在存储区域网络（SAN）环境中，常见的如 RAID 和 LVM 技术</p><h3 id="对象存储" tabindex="-1"><a class="header-anchor" href="#对象存储"><span>对象存储</span></a></h3><p><img src="https://www.redhat.com/rhdc/managed-files/styles/wysiwyg_float/private/objectStorage_orange_360x198_0.png.webp?itok=ef-RHqzs" alt="对象存储" loading="lazy"><br> 类似于网盘，将文件存储在云端或者服务端。本质上是键值（Key-Value）存储，每个对象有唯一标识符，以及描述数据的元数据。元数据包括创建时间、失效时间、访问控制等信息。常见的有亚马逊 S3，阿里云 OSS</p><h2 id="纠删码" tabindex="-1"><a class="header-anchor" href="#纠删码"><span>纠删码</span></a></h2><p>MinIO 通过纠删码实现数据冗余，纠删码相比于多副本，可以提高磁盘的空间利用率。</p><h3 id="纠删码与副本比较" tabindex="-1"><a class="header-anchor" href="#纠删码与副本比较"><span>纠删码与副本比较</span></a></h3><p>假设有一个 100M 的文件，存储到 3 个磁盘中，实现任意一个磁盘损坏不丢失数据。</p><ul><li>副本方式<br> 将 100M 文件分割成 part1，part2 两个 50M 大小的文件，每个文件保存 2 份。实际占用 200M 的存储空间<br><img src="`+s+'" alt="副本存储" loading="lazy"></li><li>纠删码方式<br> 将 100M 文件分割成 part1，part2 两个 50M 大小的文件，通过纠删码算法对 part1 和 part2 两个进行计算，生成一个 50M 的校验块，当 part1、part2 任意一个损坏时，可以通过校验块逆向恢复文件。实际占用 150M 的存储空间。<br><img src="'+l+'" alt="纠删码存储" loading="lazy"></li></ul><h3 id="纠删码数据恢复原理" tabindex="-1"><a class="header-anchor" href="#纠删码数据恢复原理"><span>纠删码数据恢复原理</span></a></h3><p>纠删码（Erasure Codes）能够总体上分为 XOR 码和 RS 码两类，XOR 码编、解码只需要按位异或（bit-wise exclusive-OR）即可完成，速度较快；MinIO 使用 Reed-Solomon 码生成数据校验块，具有更好磁盘利用率，但是需要更多的计算开销。<br> 由于，XOR 码编比较简单，便于理解，我们以 XOR 码编为例讲解数据恢复原理。<br> XOR 即异或运算，用符号 ^ 表示，是一种二进制位运算符号。<strong>两个值相同，异或运算结果为 0，两个值不同，结果为 1</strong>。</p><ul><li>编码 ( A ^ B = C )<br><img src="'+r+'" alt="" loading="lazy"></li><li>解码恢复数据 ( C ^ B = A )<br><img src="'+h+'" alt="" loading="lazy"></li></ul><h3 id="reed-solomon-码-rs-码" tabindex="-1"><a class="header-anchor" href="#reed-solomon-码-rs-码"><span>Reed-Solomon 码（RS 码）</span></a></h3><p>MinIO 使用 Reed-Solomon 码生成数据校验块。<br><img src="'+o+'" alt="" loading="lazy"><br> Reed-Solomon 码可以根据 M 个数据块，生成 N 个校验块, 其中 N &lt;= M 。<br> 从 M + N 中取出任意 M 个块就能解码出原始数据。即 RS 码最多容忍 N 个块同时丢失。<br> 因此，RS 码可以获得更好的磁盘利用率，但是需要更多的计算开销。</p><p>举例：假设一共有 7 块磁盘，允许任意 2 块硬盘损坏而不丢失数据。100mb 大小的文件应如何存储？实际占用多少存储空间？</p><p>答案：M + N = 7 N = 2 M = 7 -2 = 5<br> 因此，将 100mb 的文件分割成 5 份 20mb 的数据块，利用 RS 码生成 2 个 20mb 的校验块。将数据块和校验块分别存储到不同的硬盘上。<br> 实际占用 （ 5 _ 20 ）+（ 2 _ 20 ）= 140M。<br><img src="'+p+'" alt="" loading="lazy"></p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><blockquote><p><a href="https://www.yuque.com/wukong-zorrm/os3zhw/mdevk5" target="_blank" rel="noopener noreferrer">https://www.yuque.com/wukong-zorrm/os3zhw/mdevk5</a></p></blockquote>',48)]))}const k=t(d,[["render",c],["__file","01.Minio入门.html.vue"]]),y=JSON.parse('{"path":"/2025/04/07/01.Minio%E5%85%A5%E9%97%A8.html","title":"minio 入门","lang":"zh-CN","frontmatter":{"title":"minio 入门","date":"2025-04-07T00:00:00.000Z","lastUpdated":true,"isOrigin":true,"author":[{"name":"xuyong","url":"https://github.com/coder-xuyong"},{"name":"悟空","url":"https://www.yuque.com/wukong-zorrm"}],"category":["minio"],"tag":["io"],"order":1,"star":true,"permalinkPattern":":year/:month/:day/:slug.html","description":"介绍 MinIO 是一种高性能、S3 兼容的对象存储。 它专为大规模 AI/ML、数据湖和数据库工作负载而构建，并且它是由软件定义的存储。 不需要购买任何专有硬件，就可以在云上和普通硬件上拥有分布式对象存储。 MinIO 拥有开源 GNU AGPL v3 和商业企业许可证的双重许可。 使用场景 适用于存储图片、视频、日志、备份等非结构化数据。 mini...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/2025/04/07/01.Minio%E5%85%A5%E9%97%A8.html"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"minio 入门"}],["meta",{"property":"og:description","content":"介绍 MinIO 是一种高性能、S3 兼容的对象存储。 它专为大规模 AI/ML、数据湖和数据库工作负载而构建，并且它是由软件定义的存储。 不需要购买任何专有硬件，就可以在云上和普通硬件上拥有分布式对象存储。 MinIO 拥有开源 GNU AGPL v3 和商业企业许可证的双重许可。 使用场景 适用于存储图片、视频、日志、备份等非结构化数据。 mini..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://www.redhat.com/rhdc/managed-files/styles/wysiwyg_float/private/fileStorage_orange_320x242_0.png.webp?itok=CsTgvvas"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-06T03:10:34.000Z"}],["meta",{"property":"article:author","content":"xuyong"}],["meta",{"property":"article:tag","content":"io"}],["meta",{"property":"article:published_time","content":"2025-04-07T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-06T03:10:34.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"minio 入门\\",\\"image\\":[\\"https://www.redhat.com/rhdc/managed-files/styles/wysiwyg_float/private/fileStorage_orange_320x242_0.png.webp?itok=CsTgvvas\\",\\"https://www.redhat.com/rhdc/managed-files/styles/wysiwyg_float/private/blockStorage_orange_320x242_0.png.webp?itok=x5wAjDRu\\",\\"https://www.redhat.com/rhdc/managed-files/styles/wysiwyg_float/private/objectStorage_orange_360x198_0.png.webp?itok=ef-RHqzs\\"],\\"datePublished\\":\\"2025-04-07T00:00:00.000Z\\",\\"dateModified\\":\\"2025-06-06T03:10:34.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"},{\\"@type\\":\\"Person\\",\\"name\\":\\"悟空\\",\\"url\\":\\"https://www.yuque.com/wukong-zorrm\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]},{"level":2,"title":"minio client VS minio java api","slug":"minio-client-vs-minio-java-api","link":"#minio-client-vs-minio-java-api","children":[]},{"level":2,"title":"mysql vs minio 空间占用对比","slug":"mysql-vs-minio-空间占用对比","link":"#mysql-vs-minio-空间占用对比","children":[]},{"level":2,"title":"官方网站","slug":"官方网站","link":"#官方网站","children":[]},{"level":2,"title":"下载安装","slug":"下载安装","link":"#下载安装","children":[]},{"level":2,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[{"level":3,"title":"启动服务","slug":"启动服务","link":"#启动服务","children":[]},{"level":3,"title":"创建 Bucket","slug":"创建-bucket","link":"#创建-bucket","children":[]},{"level":3,"title":"上传和下载文件","slug":"上传和下载文件","link":"#上传和下载文件","children":[]}]},{"level":2,"title":"存储方式","slug":"存储方式","link":"#存储方式","children":[{"level":3,"title":"文件存储","slug":"文件存储","link":"#文件存储","children":[]},{"level":3,"title":"块存储","slug":"块存储","link":"#块存储","children":[]},{"level":3,"title":"对象存储","slug":"对象存储","link":"#对象存储","children":[]}]},{"level":2,"title":"纠删码","slug":"纠删码","link":"#纠删码","children":[{"level":3,"title":"纠删码与副本比较","slug":"纠删码与副本比较","link":"#纠删码与副本比较","children":[]},{"level":3,"title":"纠删码数据恢复原理","slug":"纠删码数据恢复原理","link":"#纠删码数据恢复原理","children":[]},{"level":3,"title":"Reed-Solomon 码（RS 码）","slug":"reed-solomon-码-rs-码","link":"#reed-solomon-码-rs-码","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1744097310000,"updatedTime":1749179434000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":7,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":5.14,"words":1542},"filePathRelative":"posts/01.Java/03.Frame/13.IO/minio/01.Minio入门.md","localizedDate":"2025年4月7日","excerpt":"<h2>介绍</h2>\\n<p>MinIO 是一种高性能、S3 兼容的对象存储。<br>\\n它专为大规模 AI/ML、数据湖和数据库工作负载而构建，并且它是由软件定义的存储。<br>\\n不需要购买任何专有硬件，就可以在云上和普通硬件上拥有分布式对象存储。<br>\\nMinIO 拥有开源 GNU AGPL v3 和商业企业许可证的双重许可。</p>\\n<h2>使用场景</h2>\\n<p>适用于存储图片、视频、日志、备份等非结构化数据。</p>\\n<h2>minio client VS minio java api</h2>\\n<table>\\n<thead>\\n<tr>\\n<th style=\\"text-align:center\\">指标\\\\方式</th>\\n<th style=\\"text-align:center\\">mc.exe</th>\\n<th style=\\"text-align:center\\">java minio api</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td style=\\"text-align:center\\">文件数量</td>\\n<td style=\\"text-align:center\\">66630 个</td>\\n<td style=\\"text-align:center\\">66630 个</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">文件总大小</td>\\n<td style=\\"text-align:center\\">9.35 GB</td>\\n<td style=\\"text-align:center\\">9.35 GB</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">线程数</td>\\n<td style=\\"text-align:center\\">（avg）18</td>\\n<td style=\\"text-align:center\\">18</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">下载耗时</td>\\n<td style=\\"text-align:center\\">476 s</td>\\n<td style=\\"text-align:center\\">259s</td>\\n</tr>\\n<tr>\\n<td style=\\"text-align:center\\">备注</td>\\n<td style=\\"text-align:center\\">推荐使用</td>\\n<td style=\\"text-align:center\\">连接超时频繁</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{k as comp,y as data};
