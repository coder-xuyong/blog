import{_ as r,c as s,b as n,e as t,d as A,f as e,r as i,o as a,h as o}from"./app-CMyn2RtD.js";const p={};function B(u,E){const l=i("RouteLink");return a(),s("div",null,[E[24]||(E[24]=n('<h1 id="设计模式概述" tabindex="-1"><a class="header-anchor" href="#设计模式概述"><span>设计模式概述</span></a></h1><blockquote><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p></blockquote><h2 id="创建型模式" tabindex="-1"><a class="header-anchor" href="#创建型模式"><span>创建型模式</span></a></h2><h3 id="创建型模式简介" tabindex="-1"><a class="header-anchor" href="#创建型模式简介"><span>创建型模式简介</span></a></h3><p><strong>创建型模式</strong>抽象了<strong>实例化</strong>的过程。它将<strong>系统</strong>与它的<strong>对象</strong>创建、结合、表示的方式<strong>分离</strong>。</p><p>创建型模式都会将关于该系统使用哪些具体的类的信息<strong>封装</strong>起来。</p><p>在软件工程中，创建型模式是处理对象创建的设计模式，试图根据实际情况使用合适的方式创建对象。</p><p>基本的对象创建方式可能会导致设计上的问题，或增加设计的复杂度。创建型模式通过以某种方式控制对象的创建来解决问题。</p><p>创建型模式的<strong>指导思想</strong>是：</p><ul><li>将系统使用的具体类封装起来。</li><li>隐藏这些具体类的实例创建和结合的方式。</li></ul><p>创建型模式又分为<strong>对象创建型模式</strong>和<strong>类创建型模式</strong>。对象创建型模式处理对象的创建，类创建型模式处理类的创建。</p><ul><li><strong>对象创建型模式</strong>把对象创建的一部分推迟到另一个对象中。（代表模式：<strong>单例模式</strong>、<strong>建造者模式</strong>、<strong>原型模式</strong>、<strong>抽象工厂模式</strong>）</li><li><strong>类创建型模式</strong>将它对象的创建推迟到子类中。（代表模式：<strong>工厂方法模式</strong>）</li></ul><h3 id="创建型模式应用" tabindex="-1"><a class="header-anchor" href="#创建型模式应用"><span>创建型模式应用</span></a></h3><p>现代软件工程更加依赖对象的组合，而不是类的继承，强调从硬编码的行为转变到定义一组基本行为来组合成复杂的行为。</p><p>硬编码的行为不够灵活，因为如果想要改变设计的一部分，需要通过重写或者重新实现才能完成。</p><p>另外，硬编码没有提高重用性，而且难以跟踪错误。由于这些原因，创建型模式比硬编码的行为更有用。</p><p>创建型模式使设计变得更灵活，提供了不同的方式，从代码中移除了对需要实例化的具体类的引用。换句话说，这些模式增强了对象和类之间的独立性。</p><p>在以下情况中，可以考虑应用创建型模式：</p><ul><li>一个系统需要和它的对象和产品的创建相互独立。</li><li>一组相关的对象被设计为一起使用。</li><li>隐藏一个类库的具体实现，仅暴露它们的接口。</li><li>创建独立复杂对象的不同表示。</li><li>一个类希望它的子类实现它所创建的对象。</li><li>类的实例化在运行时才指定。</li><li>一个类只能有一个实例，而且这个实例能在任何时候访问到。</li><li>实例应该能在不修改的情况下具有可扩展性。</li></ul><h3 id="创建型模式代表" tabindex="-1"><a class="header-anchor" href="#创建型模式代表"><span>创建型模式代表</span></a></h3><blockquote><p>创建型模式提供了创建对象的机制， 能够提升已有代码的灵活性和可复用性。</p></blockquote>',21)),t("ul",null,[t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/01.%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[0]||(E[0]=[o("简单工厂模式 (Simple Factory)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/02.%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[1]||(E[1]=[o("工厂方法模式 (Factory Method)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/03.%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[2]||(E[2]=[o("抽象工厂模式 (Abstract Factory)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/04.%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[3]||(E[3]=[o("建造者模式 (Builder)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/05.%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[4]||(E[4]=[o("原型模式 (Prototype)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/06.%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[5]||(E[5]=[o("单例模式 (Singleton)")])),_:1})])]),E[25]||(E[25]=t("h3",{id:"结构型模式",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#结构型模式"},[t("span",null,"结构型模式")])],-1)),E[26]||(E[26]=t("blockquote",null,[t("p",null,"结构型模式介绍如何将对象和类组装成较大的结构， 并同时保持结构的灵活和高效。")],-1)),t("ul",null,[t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/07.%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[6]||(E[6]=[o("适配器模式 (Adapter)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/08.%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[7]||(E[7]=[o("桥接模式 (Bridge)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/09.%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[8]||(E[8]=[o("组合模式 (Composite)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/10.%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[9]||(E[9]=[o("装饰模式 (Decorator)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/11.%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[10]||(E[10]=[o("外观模式 (Facade)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/12.%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[11]||(E[11]=[o("享元模式 (Flyweight)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/13.%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[12]||(E[12]=[o("代理模式 (Proxy)")])),_:1})])]),E[27]||(E[27]=t("h3",{id:"行为型模式",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#行为型模式"},[t("span",null,"行为型模式")])],-1)),E[28]||(E[28]=t("blockquote",null,[t("p",null,"行为模式负责对象间的高效沟通和职责委派。")],-1)),t("ul",null,[t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/14.%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[13]||(E[13]=[o("模板方法模式 (Template Method)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/15.%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[14]||(E[14]=[o("命令模式 (Command)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/16.%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[15]||(E[15]=[o("迭代器模式 (Iterator)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/17.%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[16]||(E[16]=[o("观察者模式 (Observer)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/18.%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[17]||(E[17]=[o("解释器模式 (Interpreter)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/19.%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[18]||(E[18]=[o("中介者模式 (Mediator)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/20.%E8%81%8C%E8%B4%A3%E9%93%BE%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[19]||(E[19]=[o("职责链模式 (Chain of Responsibility)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/21.%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[20]||(E[20]=[o("备忘录模式 (Memento)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/22.%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[21]||(E[21]=[o("策略模式 (Strategy)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/23.%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[22]||(E[22]=[o("访问者模式 (Visitor)")])),_:1})]),t("li",null,[A(l,{to:"/posts/03.%E8%AE%BE%E8%AE%A1/02.%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/24.%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F.html"},{default:e(()=>E[23]||(E[23]=[o("状态模式 (State)")])),_:1})])]),E[29]||(E[29]=n('<h2 id="📚-资料" tabindex="-1"><a class="header-anchor" href="#📚-资料"><span>📚 资料</span></a></h2><ul><li><a href="https://book.douban.com/subject/2243615/" target="_blank" rel="noopener noreferrer">《Head First 设计模式》</a></li><li><a href="https://book.douban.com/subject/2334288/" target="_blank" rel="noopener noreferrer">《大话设计模式》</a></li></ul><h2 id="🚪-传送" tabindex="-1"><a class="header-anchor" href="#🚪-传送"><span>🚪 传送</span></a></h2><p>◾ 💧 <a href="https://dunwu.github.io/waterdrop/" target="_blank" rel="noopener noreferrer">钝悟的 IT 知识图谱</a> ◾</p>',4))])}const g=r(p,[["render",B],["__file","index.html.vue"]]),m=JSON.parse('{"path":"/pages/9a2452/","title":"设计模式概述","lang":"zh-CN","frontmatter":{"title":"设计模式概述","date":"2015-01-27T16:50:00.000Z","order":0,"categories":["设计","设计模式"],"tags":["设计","设计模式"],"permalink":"/pages/9a2452/","description":"设计模式概述 设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。 创建型模式 创建型模式简介 创建型模式抽象了实例化的过程。它将系统与它的对象创建、结合、表示的方式...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/9a2452/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"设计模式概述"}],["meta",{"property":"og:description","content":"设计模式概述 设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。 创建型模式 创建型模式简介 创建型模式抽象了实例化的过程。它将系统与它的对象创建、结合、表示的方式..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-06T08:40:02.000Z"}],["meta",{"property":"article:tag","content":"设计"}],["meta",{"property":"article:tag","content":"设计模式"}],["meta",{"property":"article:published_time","content":"2015-01-27T16:50:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-06T08:40:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"设计模式概述\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2015-01-27T16:50:00.000Z\\",\\"dateModified\\":\\"2025-05-06T08:40:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[{"level":3,"title":"创建型模式简介","slug":"创建型模式简介","link":"#创建型模式简介","children":[]},{"level":3,"title":"创建型模式应用","slug":"创建型模式应用","link":"#创建型模式应用","children":[]},{"level":3,"title":"创建型模式代表","slug":"创建型模式代表","link":"#创建型模式代表","children":[]},{"level":3,"title":"结构型模式","slug":"结构型模式","link":"#结构型模式","children":[]},{"level":3,"title":"行为型模式","slug":"行为型模式","link":"#行为型模式","children":[]}]},{"level":2,"title":"📚 资料","slug":"📚-资料","link":"#📚-资料","children":[]},{"level":2,"title":"🚪 传送","slug":"🚪-传送","link":"#🚪-传送","children":[]}],"git":{"createdTime":1746520802000,"updatedTime":1746520802000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":4.24,"words":1273},"filePathRelative":"posts/03.设计/02.设计模式/00.设计模式概述.md","localizedDate":"2015年1月27日","excerpt":"\\n<blockquote>\\n<p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>\\n</blockquote>\\n<h2>创建型模式</h2>\\n<h3>创建型模式简介</h3>\\n<p><strong>创建型模式</strong>抽象了<strong>实例化</strong>的过程。它将<strong>系统</strong>与它的<strong>对象</strong>创建、结合、表示的方式<strong>分离</strong>。</p>","autoDesc":true}');export{g as comp,m as data};
