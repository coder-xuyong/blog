import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,b as t,o as n}from"./app-DfSBFR69.js";const a={};function l(d,e){return n(),s("div",null,e[0]||(e[0]=[t(`<h1 id="redis-过期删除和内存淘汰" tabindex="-1"><a class="header-anchor" href="#redis-过期删除和内存淘汰"><span>Redis 过期删除和内存淘汰</span></a></h1><blockquote><p>关键词：<code>定时删除</code>、<code>惰性删除</code>、<code>定期删除</code>、<code>LRU</code>、<code>LFU</code></p></blockquote><h2 id="redis-过期删除" tabindex="-1"><a class="header-anchor" href="#redis-过期删除"><span>Redis 过期删除</span></a></h2><p>Redis 可以为每个键设置过期时间，当键过期时，会自动删除该键。</p><h3 id="设置键的生存时间或过期时间" tabindex="-1"><a class="header-anchor" href="#设置键的生存时间或过期时间"><span>设置键的生存时间或过期时间</span></a></h3><p>Redis 中，和键的生存时间相关的命令如下所示：</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://redis.io/commands/expire/" target="_blank" rel="noopener noreferrer"><code>EXPIRE</code></a></td><td>设置 key 的过期时间，单位为秒</td></tr><tr><td><a href="https://redis.io/commands/pexpire/" target="_blank" rel="noopener noreferrer"><code>PEXPIRE</code></a></td><td>设置 key 的过期时间，单位为毫秒</td></tr><tr><td><a href="https://redis.io/commands/expireat/" target="_blank" rel="noopener noreferrer"><code>EXPIREAT</code></a></td><td>设置 key 的过期时间为指定的秒级时间戳</td></tr><tr><td><a href="https://redis.io/commands/pexpireat/" target="_blank" rel="noopener noreferrer"><code>PEXPIREAT</code></a></td><td>设置 key 的过期时间为指定的毫秒级时间戳</td></tr><tr><td><a href="https://redis.io/commands/ttl/" target="_blank" rel="noopener noreferrer"><code>TTL</code></a></td><td>返回 key 的剩余生存时间，单位为秒</td></tr><tr><td><a href="https://redis.io/commands/pttl/" target="_blank" rel="noopener noreferrer"><code>PTTL</code></a></td><td>返回 key 的剩余生存时间，单位为毫秒</td></tr><tr><td><a href="https://redis.io/commands/persist/" target="_blank" rel="noopener noreferrer"><code>PERSIST</code></a></td><td>移除 key 的过期时间，key 将持久保持</td></tr></tbody></table><p>【示例】EXPIRE、TTL 操作</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; set key value</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置 key 的生存时间为 60s</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; expire key 60</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看 key 的剩余生存时间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; ttl key</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">58</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 60s 之内</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; get key</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;value&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 60s 之外</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; get key</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例】EXPIREAT、TTL 操作</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; set key value</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">OK</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 设置 key 的生存时间为 1692419299</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; expireat key 1692419299</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">1</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 查看 key 的剩余生存时间</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; ttl key</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">integer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">9948</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1692419299 之前</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; get key</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">&quot;value&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"># 1692419299 之后</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt; get key</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nil</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="如何保存过期时间" tabindex="-1"><a class="header-anchor" href="#如何保存过期时间"><span>如何保存过期时间</span></a></h4><p>在 Redis 中，redisDb 结构的 <code>expires</code> 字典保存了数据库中所有键的过期时间，这个字典称为过期字典：</p><ul><li>过期字典的键是一个指针，这个指针指向某个键对象</li><li>过期字典的值是一个 <code>long long</code> 类型的整数，这个整数保存了键的过期时间——一个毫秒精度的 UNIX 时间戳。</li></ul><div class="language-c line-numbers-mode" data-highlighter="shiki" data-ext="c" data-title="c" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">typedef</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> struct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> redisDb {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 数据库键空间，保存着数据库中的所有键值对</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dict </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dict;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 键的过期时间，字典的键为键，字典的值为过期事件 UNIX 时间戳</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    dict </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">expires;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} redisDb;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下图是一个带有过期字典的示例：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202309171537744.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>当执行 <code>EXPIRE</code>、<code>PEXPIRE</code>、<code>EXPIREAT</code>、<code>PEXPIREAT</code> 命令，Redis 都会将其转为 <code>PEXPIREAT</code> 形式的时间戳，然后维护在 <code>expires</code> 字典中。</p><h4 id="过期键的判定" tabindex="-1"><a class="header-anchor" href="#过期键的判定"><span>过期键的判定</span></a></h4><p>过期键的判定流程如下：</p><ul><li>检查指定 key 是否存在于过期字典；如果存在，则取得 key 的过期时间。</li><li>检查当前时间戳是否大于 key 的过期时间：如果是，key 已过期；反之，key 未过期。</li></ul><h3 id="过期删除策略" tabindex="-1"><a class="header-anchor" href="#过期删除策略"><span>过期删除策略</span></a></h3><ul><li><strong>定时删除</strong> - 在设置 key 的过期时间的同时，创建一个定时器，让定时器在 key 的过期时间来临时，立即执行对 key 的删除操作。 <ul><li>优点 - 保证过期 key 被尽可能快的删除，释放内存。</li><li>缺点 - <strong>如果过期 key 较多，可能会占用相当一部分的 CPU，从而影响服务器的吞吐量和响应时延</strong>。</li></ul></li><li><strong>惰性删除</strong> - 放任 key 过期不管，但是每次访问 key 时，都检查 key 是否过期，如果过期的话，就删除该 key ；如果没有过期，就返回该 key。 <ul><li>优点 - 占用 CPU 最少。程序只会在读写键时，对当前键进行过期检查，因此不会有额外的 CPU 开销。</li><li>缺点 - <strong>过期的 key 可能因为没有被访问，而一直无法释放，造成内存的浪费，有内存泄漏的风险</strong>。</li></ul></li><li><strong>定期删除</strong> - 每隔一段时间，程序就对数据库进行一次检查，删除里面的过期 key 。至于要删除多少过期 key ，以及要检查多少个数据库，则由算法决定。定期删除是前两种策略的一种折中方案。定期删除策略的难点是删除操作执行的时长和频率。 <ul><li>执行太频或执行时间过长，就会出现和定时删除相同的问题；</li><li>执行太少或执行时间过短，就会出现和惰性删除相同的问题；</li></ul></li></ul><h3 id="redis-的过期删除策略" tabindex="-1"><a class="header-anchor" href="#redis-的过期删除策略"><span>Redis 的过期删除策略</span></a></h3><p>Redis 同时采用了惰性删除和定期删除策略，以此在合理使用 CPU 和内存之间取得平衡。</p><p><strong>Redis 定期删除策略的实现</strong> - 由 <code>redis.c/activeExpireCycle</code> 函数实现，每当 Redis 周期性执行 <code>redis.c/serverCron</code> 函数时，<code>activeExpireCycle</code> 函数就会被调用。<code>activeExpireCycle</code> 函数会在规定时间内，遍历各个数据库，从 <code>expires</code> 字典中随机检查一部分键的过期时间，并删除过期的键。</p><p><strong>Redis 惰性删除策略的实现</strong> - 由 <code>db.c/expireIfNeeded</code> 函数实现，所有读写命令在执行之前都会调用 <code>expireIfNeeded</code> 函数对输入键进行检查：如果输入键已过期，将输入键从数据库中删除；否则，什么也不做。</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/202309171604805.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="aof、rdb-和复制对过期键的处理" tabindex="-1"><a class="header-anchor" href="#aof、rdb-和复制对过期键的处理"><span>AOF、RDB 和复制对过期键的处理</span></a></h3><ul><li>生成 RDB 文件 - <strong>执行 <code>SAVE</code> 命令或者 <code>BGSAVE</code> 命令，所产生的新 RDB 文件“不会包含已经过期的键”</strong>。</li><li>载入 RDB 文件 - <strong>主服务器“不会载入已过期的键”</strong>；<strong>从服务器会载入“会载入已过期的键”</strong>。</li><li>生成 AOF 文件 - 当一个过期键未被删除时，不会影响 AOF 文件；当一个过期键被删除之后， 服务器会追加一条 <code>DEL</code> 命令到现有 AOF 文件的末尾， 显式地删除过期键。</li><li>重写 AOF 文件 - <strong>执行 <code>BGREWRITEAOF</code> 命令所产生的重写 AOF 文件“不会包含已经过期的键”</strong>。</li><li>复制 - 当主服务器删除一个过期键之后， 它会向所有从服务器发送一条 <code>DEL</code> 命令， 显式地删除过期键。从服务器即使发现过期键， 也不会自作主张地删除它， 而是等待主节点发来 DEL 命令， 这种统一、中心化的过期键删除策略可以保证主从服务器数据的一致性。</li><li>当 Redis 命令对数据库进行修改之后， 服务器会根据配置， 向客户端发送数据库通知。</li></ul><h2 id="redis-内存淘汰" tabindex="-1"><a class="header-anchor" href="#redis-内存淘汰"><span>Redis 内存淘汰</span></a></h2><h3 id="redis-内存淘汰要点" tabindex="-1"><a class="header-anchor" href="#redis-内存淘汰要点"><span>Redis 内存淘汰要点</span></a></h3><ul><li><strong>失效时间</strong> - 作为一种定期清理无效数据的重要机制，在 Redis 提供的诸多命令中，<code>EXPIRE</code>、<code>EXPIREAT</code>、<code>PEXPIRE</code>、<code>PEXPIREAT</code> 以及 <code>SETEX</code> 和 <code>PSETEX</code> 均可以用来设置一条键值对的失效时间。而一条键值对一旦被关联了失效时间就会在到期后自动删除（或者说变得无法访问更为准确）。</li><li><strong>最大缓存</strong> - Redis 允许通过 <code>maxmemory</code> 参数来设置内存最大值。当内存达设定的阀值，就会触发<strong>内存淘汰</strong>。</li><li><strong>内存淘汰</strong> - 内存淘汰是为了更好的利用内存——清理部分缓存，以此换取内存的利用率，即尽量保证 Redis 缓存中存储的是热点数据。</li><li><strong>非精准的 LRU</strong> - 实际上 Redis 实现的 LRU 并不是可靠的 LRU，也就是名义上我们使用 LRU 算法淘汰键，但是实际上被淘汰的键并不一定是真正的最久没用的。</li></ul><h3 id="redis-内存淘汰策略" tabindex="-1"><a class="header-anchor" href="#redis-内存淘汰策略"><span>Redis 内存淘汰策略</span></a></h3><p>内存淘汰只是 Redis 提供的一个功能，为了更好地实现这个功能，必须为不同的应用场景提供不同的策略，内存淘汰策略讲的是为实现内存淘汰我们具体怎么做，要解决的问题包括淘汰键空间如何选择？在键空间中淘汰键如何选择？</p><p>Redis 提供了下面几种内存淘汰策略供用户选：</p><ul><li><strong>不淘汰</strong><ul><li><strong><code>noeviction</code></strong> - 当内存使用达到阈值的时候，所有引起申请内存的命令会报错。这是 Redis 默认的策略。</li></ul></li><li><strong>在过期键中进行淘汰</strong><ul><li><strong><code>volatile-random</code></strong> - 在设置了过期时间的键空间中，随机移除某个 key。</li><li><strong><code>volatile-ttl</code></strong> - 在设置了过期时间的键空间中，具有更早过期时间的 key 优先移除。</li><li><strong><code>volatile-lru</code></strong> - 在设置了过期时间的键空间中，优先移除最近未使用的 key。</li><li><strong><code>volatile-lfu</code></strong> （Redis 4.0 新增）- 淘汰所有设置了过期时间的键值中，最少使用的键值。</li></ul></li><li><strong>在所有键中进行淘汰</strong><ul><li><strong><code>allkeys-lru</code></strong> - 在主键空间中，优先移除最近未使用的 key。</li><li><strong><code>allkeys-random</code></strong> - 在主键空间中，随机移除某个 key。</li><li><strong><code>allkeys-lfu</code></strong> (Redis 4.0 新增) - 淘汰整个键值中最少使用的键值。</li></ul></li></ul><h3 id="如何选择淘汰策略" tabindex="-1"><a class="header-anchor" href="#如何选择淘汰策略"><span>如何选择淘汰策略</span></a></h3><ul><li>如果数据呈现幂等分布，也就是一部分数据访问频率高，一部分数据访问频率低，则使用 <code>allkeys-lru</code> 或 <code>allkeys-lfu</code>。</li><li>如果数据呈现平均分布，也就是所有的数据访问频率都相同，则使用 <code>allkeys-random</code>。</li><li>若 Redis 既用于缓存，也用于持久化存储时，适用 <code>volatile-lru</code> 、<code>volatile-lfu</code>、<code>volatile-random</code>。但是，这种情况下，也可以部署两个 Redis 集群来达到同样目的。</li><li>为 key 设置过期时间实际上会消耗更多的内存。因此，如果条件允许，建议使用 <code>allkeys-lru</code> 或 <code>allkeys-lfu</code>，从而更高效的使用内存。</li></ul><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="https://item.jd.com/11486101.html" target="_blank" rel="noopener noreferrer">《Redis 设计与实现》</a></li></ul>`,41)]))}const c=i(a,[["render",l],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/pages/ce0453/","title":"Redis 过期删除和内存淘汰","lang":"zh-CN","frontmatter":{"icon":"logos:redis","title":"Redis 过期删除和内存淘汰","cover":"https://raw.githubusercontent.com/dunwu/images/master/snap/202309171630222.png","date":"2023-08-23T15:14:13.000Z","order":11,"categories":["数据库","KV数据库","Redis"],"tags":["数据库","KV数据库","Redis","LRU","LFU"],"permalink":"/pages/ce0453/","description":"Redis 过期删除和内存淘汰 关键词：定时删除、惰性删除、定期删除、LRU、LFU Redis 过期删除 Redis 可以为每个键设置过期时间，当键过期时，会自动删除该键。 设置键的生存时间或过期时间 Redis 中，和键的生存时间相关的命令如下所示： 【示例】EXPIRE、TTL 操作 【示例】EXPIREAT、TTL 操作 如何保存过期时间 在 ...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/ce0453/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"Redis 过期删除和内存淘汰"}],["meta",{"property":"og:description","content":"Redis 过期删除和内存淘汰 关键词：定时删除、惰性删除、定期删除、LRU、LFU Redis 过期删除 Redis 可以为每个键设置过期时间，当键过期时，会自动删除该键。 设置键的生存时间或过期时间 Redis 中，和键的生存时间相关的命令如下所示： 【示例】EXPIRE、TTL 操作 【示例】EXPIREAT、TTL 操作 如何保存过期时间 在 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/snap/202309171630222.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-18T02:31:38.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://raw.githubusercontent.com/dunwu/images/master/snap/202309171630222.png"}],["meta",{"name":"twitter:image:alt","content":"Redis 过期删除和内存淘汰"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"KV数据库"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"LRU"}],["meta",{"property":"article:tag","content":"LFU"}],["meta",{"property":"article:published_time","content":"2023-08-23T15:14:13.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-18T02:31:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis 过期删除和内存淘汰\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202309171537744.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/202309171604805.png\\"],\\"datePublished\\":\\"2023-08-23T15:14:13.000Z\\",\\"dateModified\\":\\"2025-02-18T02:31:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"Redis 过期删除","slug":"redis-过期删除","link":"#redis-过期删除","children":[{"level":3,"title":"设置键的生存时间或过期时间","slug":"设置键的生存时间或过期时间","link":"#设置键的生存时间或过期时间","children":[]},{"level":3,"title":"过期删除策略","slug":"过期删除策略","link":"#过期删除策略","children":[]},{"level":3,"title":"Redis 的过期删除策略","slug":"redis-的过期删除策略","link":"#redis-的过期删除策略","children":[]},{"level":3,"title":"AOF、RDB 和复制对过期键的处理","slug":"aof、rdb-和复制对过期键的处理","link":"#aof、rdb-和复制对过期键的处理","children":[]}]},{"level":2,"title":"Redis 内存淘汰","slug":"redis-内存淘汰","link":"#redis-内存淘汰","children":[{"level":3,"title":"Redis 内存淘汰要点","slug":"redis-内存淘汰要点","link":"#redis-内存淘汰要点","children":[]},{"level":3,"title":"Redis 内存淘汰策略","slug":"redis-内存淘汰策略","link":"#redis-内存淘汰策略","children":[]},{"level":3,"title":"如何选择淘汰策略","slug":"如何选择淘汰策略","link":"#如何选择淘汰策略","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1739845898000,"updatedTime":1739845898000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":7.67,"words":2301},"filePathRelative":"posts/02.database/05.KV数据库/01.Redis/11.Redis过期删除和内存淘汰.md","localizedDate":"2023年8月23日","excerpt":"\\n<blockquote>\\n<p>关键词：<code>定时删除</code>、<code>惰性删除</code>、<code>定期删除</code>、<code>LRU</code>、<code>LFU</code></p>\\n</blockquote>\\n<h2>Redis 过期删除</h2>\\n<p>Redis 可以为每个键设置过期时间，当键过期时，会自动删除该键。</p>\\n<h3>设置键的生存时间或过期时间</h3>\\n<p>Redis 中，和键的生存时间相关的命令如下所示：</p>\\n<table>\\n<thead>\\n<tr>\\n<th>命令</th>\\n<th>描述</th>\\n</tr>\\n</thead>\\n<tbody>\\n<tr>\\n<td><a href=\\"https://redis.io/commands/expire/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>EXPIRE</code></a></td>\\n<td>设置 key 的过期时间，单位为秒</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://redis.io/commands/pexpire/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>PEXPIRE</code></a></td>\\n<td>设置 key 的过期时间，单位为毫秒</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://redis.io/commands/expireat/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>EXPIREAT</code></a></td>\\n<td>设置 key 的过期时间为指定的秒级时间戳</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://redis.io/commands/pexpireat/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>PEXPIREAT</code></a></td>\\n<td>设置 key 的过期时间为指定的毫秒级时间戳</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://redis.io/commands/ttl/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>TTL</code></a></td>\\n<td>返回 key 的剩余生存时间，单位为秒</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://redis.io/commands/pttl/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>PTTL</code></a></td>\\n<td>返回 key 的剩余生存时间，单位为毫秒</td>\\n</tr>\\n<tr>\\n<td><a href=\\"https://redis.io/commands/persist/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\"><code>PERSIST</code></a></td>\\n<td>移除 key 的过期时间，key 将持久保持</td>\\n</tr>\\n</tbody>\\n</table>","autoDesc":true}');export{c as comp,h as data};
