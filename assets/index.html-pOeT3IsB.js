import{_ as i,c as n,b as s,o as t}from"./app-jHLa_8Nm.js";const a={};function o(l,e){return t(),n("div",null,e[0]||(e[0]=[s(`<h1 id="认证设计" tabindex="-1"><a class="header-anchor" href="#认证设计"><span>认证设计</span></a></h1><h2 id="认证和授权" tabindex="-1"><a class="header-anchor" href="#认证和授权"><span>认证和授权</span></a></h2><h3 id="什么是认证" tabindex="-1"><a class="header-anchor" href="#什么是认证"><span>什么是认证</span></a></h3><p><strong>认证 (Authentication)</strong> 是根据凭据验明访问者身份的流程。即验证“你是你所说的那个人”的过程。</p><p>身份认证，通常通过用户名/邮箱/手机号以及密码匹配来完成，也可以通过手机/邮箱验证码或者生物特征（如：指纹、虹膜）等其他因素。在某些应用系统中，为了追求更高的安全性，往往会要求多种认证因素叠加使用，这就是我们经常说的多因素认证。</p><p>常见的认证方式</p><ul><li>用户名、密码认证</li><li>手机和短信验证码认证</li><li>邮箱和邮件验证码认证</li><li>人脸识别、指纹识别等生物因素认证</li><li>令牌认证</li><li>OTP 认证</li><li>Radius 网络认证</li></ul><h3 id="什么是授权" tabindex="-1"><a class="header-anchor" href="#什么是授权"><span>什么是授权</span></a></h3><p><strong>授权 (Authorization)</strong> 是指向经过身份认证的访问者授予执行某项操作的权限（如访问资源，执行文件/数据读写权限等）。 简言之，授权是验证“你被允许做你想做的事”的过程。</p><p>虽然授权通常在身份验证后立即发生（例如，登录计算机系统时），但这并不意味着授权以身份验证为前提：匿名代理可以被授权执行有限的操作集。</p><h2 id="cookie-和-session" tabindex="-1"><a class="header-anchor" href="#cookie-和-session"><span>Cookie 和 Session</span></a></h2><p>由于 Http 是一种无状态的协议，服务器单从网络连接上无从知道客户身份。会话跟踪是 Web 程序中常用的技术，用来跟踪用户的整个会话。常用会话跟踪技术是 Cookie 与 Session。</p><p>Cookie 实际上是存储在客户端上的文本信息，并保留了各种跟踪的信息。</p><p>Cookie 保存在客户端浏览器中，而 Session 保存在服务器上。如果说 Cookie 机制是通过检查客户身上的“通行证”来确定客户身份的话，那么 Session 机制就是通过检查服务器上的“客户明细表”来确认客户身份。</p><ul><li><a href="https://dunwu.github.io/waterdrop/pages/c46bff/" target="_blank" rel="noopener noreferrer">Cookie 和 Session</a></li><li><a href="https://dunwu.github.io/waterdrop/pages/95e45f/" target="_blank" rel="noopener noreferrer">分布式会话</a></li></ul><h2 id="单点登录" tabindex="-1"><a class="header-anchor" href="#单点登录"><span>单点登录</span></a></h2><p><strong>SSO(Single Sign On)，即单点登录</strong>。所谓单点登录，就是同平台的诸多应用登陆一次，下一次就免登陆的功能。</p><p>SSO 需要解决多个异构系统之间的问题：</p><ul><li>Session 共享问题</li><li>跨域问题</li></ul><h3 id="session-共享问题" tabindex="-1"><a class="header-anchor" href="#session-共享问题"><span>Session 共享问题</span></a></h3><p>分布式 Session 的几种实现策略：</p><ul><li>粘性 Session - 缺点：当<strong>服务器节点宕机时，将丢失该服务器节点上的所有 Session</strong>。</li><li>应用服务器间的 Session 复制共享 - 缺点：<strong>占用过多内存</strong>；<strong>同步过程占用网络带宽以及服务器处理器时间</strong>。</li><li>基于缓存的 Session 共享 ✅ （推荐方案） - 不过需要程序自身控制 Session 读写，可以考虑基于 spring-session + redis 这种成熟的方案来处理。</li></ul><h3 id="cookie-跨域" tabindex="-1"><a class="header-anchor" href="#cookie-跨域"><span>Cookie 跨域</span></a></h3><p><strong>Cookie 不能跨域</strong>！比如：浏览器不会把 <a href="http://www.google.com" target="_blank" rel="noopener noreferrer">www.google.com</a> 的 cookie 传给 <a href="http://www.baidu.com" target="_blank" rel="noopener noreferrer">www.baidu.com</a>。</p><p>这就存在一个问题：由于域名不同，用户在系统 A 登录后，浏览器记录系统 A 的 Cookie，但是访问系统 B 的时候不会携带这个 Cookie。</p><p>针对 <strong>Cookie 不能跨域</strong> 的问题，有几种解决方案：</p><ul><li>服务端生成 Cookie 后，返回给客户端，客户端解析 Cookie ，提取 Token （比如 JWT），此后每次请求都携带这个 Token。</li><li>多个域名共享 Cookie，在返回 Cookie 给客户端的时候，在 Cookie 中设置 domain 白名单。</li><li>将 Token 保存在 <strong><code>SessionStroage</code></strong> 中（不依赖 Cookie 就没有跨域的问题了）。</li></ul><h3 id="cas" tabindex="-1"><a class="header-anchor" href="#cas"><span>CAS</span></a></h3><p>CAS 是实现 SSO 的主流方式。</p><p>CAS 分为两部分，CAS Server 和 CAS Client</p><ul><li><strong><code>CAS Server</code></strong> - 负责用户的认证工作，就像是把第一次登录用户的一个标识存在这里，以便此用户在其他系统登录时验证其需不需要再次登录。</li><li><strong><code>CAS Client</code></strong> - 业务应用，需要接入 CAS Server。当用户访问我们的应用时，首先需要重定向到 CAS Server 端进行验证，要是原来登陆过，就免去登录，重定向到下游系统，否则进行用户名密码登陆操作。</li></ul><p>术语：</p><ul><li><strong><code>Ticket Granting Ticket (TGT)</code></strong> - 可以认为是 CAS Server 根据用户名、密码生成的一张票，存在 Server 端。</li><li><strong><code>Ticket Granting Cookie (TGC)</code></strong> - 其实就是一个 Cookie，存放用户身份信息，由 Server 发给 Client 端。</li><li><strong><code>Service Ticket (ST)</code></strong> - 由 TGT 生成的一次性票据，用于验证，只能用一次。</li></ul><p>CAS 工作流程：</p><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200119195646.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><ol><li>用户访问 CAS Client A（业务系统），第一次访问，重定向到认证服务中心（CAS Server）。CAS Server 发现当前请求中没有 Cookie，再重定向到 CAS Server 的登录页面。重定向请求的 URL 中包含访问地址，以便认证成功后直接跳转到访问页面。</li><li>用户在登录页面输入用户名、密码等认证信息，认证成功后，CAS Server 生成 TGT，再用 TGT 生成一个 ST。然后返回 ST 和 TGC（Cookie）给浏览器。</li><li>浏览器携带 ST 再度访问之前想访问的 CAS Client A 页面。</li><li>CAS Client A 收到 ST 后，向 CAS Server 验证 ST 的有效性。验证通过则允许用户访问页面。</li><li>此时，如果登录另一个 CAS Client B，会先重定向到 CAS Server，CAS Server 可以判断这个 CAS Client B 是第一次访问，但是本地有 TGC，所以无需再次登录。用 TGC 创建一个 ST，返回给浏览器。</li><li>重复类似 3、4 步骤。</li></ol><figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20200119202448.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><p>以上了归纳总结如下：</p><ol><li><strong>访问服务</strong> - 用户访问 SSO Client 资源。</li><li><strong>定向认证</strong> - SSO Client 重定向用户请求到 SSO Server。</li><li><strong>用户认证</strong> - 用户身份认证。</li><li><strong>发放票据</strong> - SSO Server 会产生一个 Service Ticket (ST) 并返回给浏览器。</li><li><strong>验证票据</strong> - 浏览器每次访问 SSO Client 时，携带 ST，SSO Client 向 SSO Server 验证票据。只有验证通过，才允许访问。</li><li><strong>传输用户信息</strong> - SSO Server 验证票据通过后，传输用户认证结果信息给 SSO Client。</li></ol><h2 id="jwt" tabindex="-1"><a class="header-anchor" href="#jwt"><span>JWT</span></a></h2><p>JSON Web Token (JWT，<a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener noreferrer">RFC 7519 (opens new window)</a>)，是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准（(RFC 7519)。该 token 被设计为紧凑且安全的，特别适用于分布式站点的单点登录（SSO）场景。JWT 的声明一般被用来在身份提供者和服务提供者间传递被认证的用户身份信息，以便于从资源服务器获取资源，也可以增加一些额外的其它业务逻辑所必须的声明信息，该 token 也可直接被用于认证，也可被加密。</p><p>详细内容可以参考这篇文章：<a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener noreferrer">什么是 JWT (opens new window)</a>。</p><h2 id="oauth2-0" tabindex="-1"><a class="header-anchor" href="#oauth2-0"><span>Oauth2.0</span></a></h2><p><a href="https://en.wikipedia.org/wiki/OAuth" target="_blank" rel="noopener noreferrer">OAuth</a> 是一个关于授权（Authorization）的开放网络标准，在全世界得到广泛应用，目前的版本是 2.0 版。</p><p>简单来说，<strong>OAuth 是一种授权机制。资源的所有者告诉系统，同意授权第三方应用进入系统，访问这些资源。系统从而产生一个短期的进入令牌（token），用来代替密码，供第三方应用使用。</strong></p><p>客户端必须得到用户的授权（authorization grant），才能获得令牌（access token）。</p><p>OAuth 2.0 定义了四种授权方式。</p><ul><li><strong>授权码模式（authorization code）</strong></li><li><strong>简化模式（implicit）</strong></li><li><strong>密码模式（resource owner password credentials）</strong></li><li><strong>客户端模式（client credentials）</strong></li></ul><h3 id="授权码模式" tabindex="-1"><a class="header-anchor" href="#授权码模式"><span>授权码模式</span></a></h3><p><strong>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该授权码获取令牌。</strong></p><p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p><h3 id="隐藏模式" tabindex="-1"><a class="header-anchor" href="#隐藏模式"><span>隐藏模式</span></a></h3><p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。<strong>RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）&quot;隐藏式&quot;（implicit）。</strong></p><h3 id="密码模式" tabindex="-1"><a class="header-anchor" href="#密码模式"><span>密码模式</span></a></h3><p><strong>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为&quot;密码式&quot;（password）。</strong></p><h3 id="客户端凭证模式" tabindex="-1"><a class="header-anchor" href="#客户端凭证模式"><span>客户端凭证模式</span></a></h3><p>适用于没有前端的命令行应用，即在命令行下请求令牌。</p><h3 id="令牌的更新" tabindex="-1"><a class="header-anchor" href="#令牌的更新"><span>令牌的更新</span></a></h3><p>如果用户访问的时候，客户端的&quot;访问令牌&quot;已经过期，则需要使用&quot;更新令牌&quot;申请一个新的访问令牌。</p><p>客户端发出更新令牌的 HTTP 请求，包含以下参数：</p><ul><li>grant<em>type：表示使用的授权模式，此处的值固定为&quot;refresh</em>token&quot;，必选项。</li><li>refresh_token：表示早前收到的更新令牌，必选项。</li><li>scope：表示申请的授权范围，不可以超出上一次申请的范围，如果省略该参数，则表示与上一次一致</li></ul><h2 id="oidc" tabindex="-1"><a class="header-anchor" href="#oidc"><span>OIDC</span></a></h2><h3 id="id-token" tabindex="-1"><a class="header-anchor" href="#id-token"><span>ID Token</span></a></h3><p>ID Token 相当于用户的身份凭证，开发者的前端访问后端接口时可以携带 ID Token，开发者服务器可以校验用户的 ID Token 以确定用户身份，验证通过后返回相关资源。</p><p><strong>ID Token</strong> 本质上是一个 <a href="https://docs.authing.cn/v2/concepts/jwt-token.html" target="_blank" rel="noopener noreferrer"><code>JWT Token</code></a>，包含了该用户身份信息相关的 key/value 键值对，例如：</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;iss&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;https://server.example.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;sub&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;24400320&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// subject 的缩写，为用户 ID</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;aud&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;s6BhdRkqt3&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;nonce&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;n-0S6_WzA2Mj&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;exp&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1311281970</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;iat&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1311280970</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;auth_time&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1311280969</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">   &quot;acr&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;urn:mace:incommon:iap:silver&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>ID Token 本质上是一个 JWT Token 意味着：</p><p>用户的身份信息直接被编码进了 id_token，你不需要额外请求其他的资源来获取用户信息；</p><p>id_token 可以验证其没有被篡改过，详情请见如何验证 ID Token。</p><h3 id="access-token" tabindex="-1"><a class="header-anchor" href="#access-token"><span>Access Token</span></a></h3><p>Access Token 用于基于 Token 的认证模式，允许应用访问一个资源 API。用户认证授权成功后，认证系统会签发 Access Token 给应用。应用需要<strong>携带 Access Token</strong> 访问资源 API，资源服务 API 会通过拦截器查验 Access Token 中的 <code>scope</code> 字段是否包含特定的权限项目，从而决定是否返回资源。</p><p>如果你的用户通过社交账号登录，例如微信登录，微信作为身份提供商会颁发自己的 Access Token，你的应用可以利用 Access Token 调用微信相关的 API。这些 Access Token 是由社交账号服务方控制的，格式也是任意的。</p><h3 id="refresh-token" tabindex="-1"><a class="header-anchor" href="#refresh-token"><span>Refresh Token</span></a></h3><p>AccessToken 和 IdToken 是 JSON Web Token (opens new window)，有效时间通常较短。通常用户在获取资源的时候需要携带 AccessToken，当 AccessToken 过期后，用户需要获取一个新的 AccessToken。</p><p>Refresh Token 用于获取新的 AccessToken。这样可以缩短 AccessToken 的过期时间保证安全，同时又不会因为频繁过期重新要求用户登录。</p><p>用户在初次认证时，Refresh Token 会和 AccessToken、IdToken 一起返回。你的应用必须安全地存储 Refresh Token，它的重要性和密码是一样的，因为 Refresh Token 能够一直让用户保持登录。</p><h2 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料"><span>参考资料</span></a></h2><ul><li><a href="http://www.rfcreader.com/#rfc6749" target="_blank" rel="noopener noreferrer">RFC 6749</a></li><li><a href="https://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener noreferrer">OAuth 2.0 的一个简单解释</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener noreferrer">理解 OAuth 2.0</a></li><li><a href="https://darutk.medium.com/the-simplest-guide-to-oauth-2-0-8c71bd9a15bb" target="_blank" rel="noopener noreferrer">The Simplest Guide To OAuth 2.0</a></li><li><a href="https://openid.net/specs/openid-connect-core-1_0.html" target="_blank" rel="noopener noreferrer">OIDC 规范</a></li><li><a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener noreferrer">什么是 JWT</a></li></ul>`,78)]))}const h=i(a,[["render",o],["__file","index.html.vue"]]),p=JSON.parse('{"path":"/pages/6236e0/","title":"认证设计","lang":"zh-CN","frontmatter":{"title":"认证设计","date":"2022-11-15T18:04:17.000Z","order":2,"categories":["设计","架构","安全"],"tags":["架构","安全","认证"],"permalink":"/pages/6236e0/","description":"认证设计 认证和授权 什么是认证 认证 (Authentication) 是根据凭据验明访问者身份的流程。即验证“你是你所说的那个人”的过程。 身份认证，通常通过用户名/邮箱/手机号以及密码匹配来完成，也可以通过手机/邮箱验证码或者生物特征（如：指纹、虹膜）等其他因素。在某些应用系统中，为了追求更高的安全性，往往会要求多种认证因素叠加使用，这就是我们经...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/6236e0/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"认证设计"}],["meta",{"property":"og:description","content":"认证设计 认证和授权 什么是认证 认证 (Authentication) 是根据凭据验明访问者身份的流程。即验证“你是你所说的那个人”的过程。 身份认证，通常通过用户名/邮箱/手机号以及密码匹配来完成，也可以通过手机/邮箱验证码或者生物特征（如：指纹、虹膜）等其他因素。在某些应用系统中，为了追求更高的安全性，往往会要求多种认证因素叠加使用，这就是我们经..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/dunwu/images/master/snap/20200119195646.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"架构"}],["meta",{"property":"article:tag","content":"安全"}],["meta",{"property":"article:tag","content":"认证"}],["meta",{"property":"article:published_time","content":"2022-11-15T18:04:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"认证设计\\",\\"image\\":[\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200119195646.png\\",\\"https://raw.githubusercontent.com/dunwu/images/master/snap/20200119202448.png\\"],\\"datePublished\\":\\"2022-11-15T18:04:17.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"认证和授权","slug":"认证和授权","link":"#认证和授权","children":[{"level":3,"title":"什么是认证","slug":"什么是认证","link":"#什么是认证","children":[]},{"level":3,"title":"什么是授权","slug":"什么是授权","link":"#什么是授权","children":[]}]},{"level":2,"title":"Cookie 和 Session","slug":"cookie-和-session","link":"#cookie-和-session","children":[]},{"level":2,"title":"单点登录","slug":"单点登录","link":"#单点登录","children":[{"level":3,"title":"Session 共享问题","slug":"session-共享问题","link":"#session-共享问题","children":[]},{"level":3,"title":"Cookie 跨域","slug":"cookie-跨域","link":"#cookie-跨域","children":[]},{"level":3,"title":"CAS","slug":"cas","link":"#cas","children":[]}]},{"level":2,"title":"JWT","slug":"jwt","link":"#jwt","children":[]},{"level":2,"title":"Oauth2.0","slug":"oauth2-0","link":"#oauth2-0","children":[{"level":3,"title":"授权码模式","slug":"授权码模式","link":"#授权码模式","children":[]},{"level":3,"title":"隐藏模式","slug":"隐藏模式","link":"#隐藏模式","children":[]},{"level":3,"title":"密码模式","slug":"密码模式","link":"#密码模式","children":[]},{"level":3,"title":"客户端凭证模式","slug":"客户端凭证模式","link":"#客户端凭证模式","children":[]},{"level":3,"title":"令牌的更新","slug":"令牌的更新","link":"#令牌的更新","children":[]}]},{"level":2,"title":"OIDC","slug":"oidc","link":"#oidc","children":[{"level":3,"title":"ID Token","slug":"id-token","link":"#id-token","children":[]},{"level":3,"title":"Access Token","slug":"access-token","link":"#access-token","children":[]},{"level":3,"title":"Refresh Token","slug":"refresh-token","link":"#refresh-token","children":[]}]},{"level":2,"title":"参考资料","slug":"参考资料","link":"#参考资料","children":[]}],"git":{"createdTime":1746520802000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":3,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":9.81,"words":2942},"filePathRelative":"posts/03.design/01.架构/02.安全/02.认证.md","localizedDate":"2022年11月15日","excerpt":"\\n<h2>认证和授权</h2>\\n<h3>什么是认证</h3>\\n<p><strong>认证 (Authentication)</strong> 是根据凭据验明访问者身份的流程。即验证“你是你所说的那个人”的过程。</p>\\n<p>身份认证，通常通过用户名/邮箱/手机号以及密码匹配来完成，也可以通过手机/邮箱验证码或者生物特征（如：指纹、虹膜）等其他因素。在某些应用系统中，为了追求更高的安全性，往往会要求多种认证因素叠加使用，这就是我们经常说的多因素认证。</p>\\n<p>常见的认证方式</p>\\n<ul>\\n<li>用户名、密码认证</li>\\n<li>手机和短信验证码认证</li>\\n<li>邮箱和邮件验证码认证</li>\\n<li>人脸识别、指纹识别等生物因素认证</li>\\n<li>令牌认证</li>\\n<li>OTP 认证</li>\\n<li>Radius 网络认证</li>\\n</ul>","autoDesc":true}');export{h as comp,p as data};
