import{_ as i,c as p,b as n,e as t,d as r,f as l,r as s,o as c,h as o}from"./app-YpXT1RvH.js";const g={};function m(u,e){const a=s("RouteLink");return c(),p("div",null,[e[3]||(e[3]=n('<h1 id="java-模板引擎" tabindex="-1"><a class="header-anchor" href="#java-模板引擎"><span>Java 模板引擎</span></a></h1><p>模板引擎不属于特定技术领域，它是跨领域跨平台的概念。 模板引擎的作用就是分离业务数据和最终呈现内容，它可以生成特定格式的文档（模板） 。</p><p>模板引擎简单来说，就是：<strong><em><code>模板 + 数据模型 = 输出</code></em></strong></p><p>较早，也比较经典的模板引擎是 JavaEE 的标准技术 JSP。</p><p>但 JSP 存在以下缺点，导致逐渐被淘汰：</p><ul><li><strong>性能差</strong><ul><li>JSP 本质上是 Servlet，第一次请求 JSP 页面，必须要在 web 服务器中编译成 servlet，所以第一次响应较慢。</li><li>每次请求 JSP 都是访问 servlet 再用输出流输出的 html 页面。</li><li>JSP 中的内容很多，页面响应会很慢，因为是同步加载。</li></ul></li><li><strong>无法前后端分离</strong><ul><li>动态资源和静态资源全部耦合在一起，无法做到前后端分离。一旦服务器出现状况，前后台一起玩完。</li><li>而且 Java 工程师既当爹又当妈，又要维护 Java 代码，又要维护 JSP 代码，痛苦。</li><li>前端工程师如果不理解 JSP 语法，面对各种 JSP 标签、表达式、指令，会一脸懵逼，痛苦。</li></ul></li><li><strong>不是所有服务器都支持</strong> - JSP 必须要在支持 JSP 技术的 web 服务器里运行（如 Tomcat）。但有些服务器则不支持 JSP ，如 Nginx。</li></ul><p>在 Java 领域，目前最常见的模板引擎就是：</p><ul><li>Freemark</li><li>Thymeleaf</li><li>Velocity</li></ul><h2 id="内容" tabindex="-1"><a class="header-anchor" href="#内容"><span>内容</span></a></h2>',9)),t("ul",null,[t("li",null,[r(a,{to:"/posts/01.Java/12.%E5%B7%A5%E5%85%B7/03.%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/01.Freemark.html"},{default:l(()=>e[0]||(e[0]=[o("Freemark")])),_:1})]),t("li",null,[r(a,{to:"/posts/01.Java/12.%E5%B7%A5%E5%85%B7/03.%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/02.Thymeleaf.html"},{default:l(()=>e[1]||(e[1]=[o("Thymeleaf")])),_:1})]),t("li",null,[r(a,{to:"/posts/01.Java/12.%E5%B7%A5%E5%85%B7/03.%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E/03.Velocity.html"},{default:l(()=>e[2]||(e[2]=[o("Velocity")])),_:1})])]),e[4]||(e[4]=n('<h2 id="资源" tabindex="-1"><a class="header-anchor" href="#资源"><span>资源</span></a></h2><ul><li><strong>Freemark</strong><ul><li><a href="https://github.com/apache/freemarker/" target="_blank" rel="noopener noreferrer">Freemark Github</a></li><li><a href="http://freemarker.foofun.cn/" target="_blank" rel="noopener noreferrer">Freemark 中文教程</a></li><li><a href="https://try.freemarker.apache.org/" target="_blank" rel="noopener noreferrer">在线 Freemark 工具</a></li></ul></li><li><strong>Velocity</strong><ul><li><a href="https://github.com/apache/velocity-engine/" target="_blank" rel="noopener noreferrer">Velocity Github</a></li><li><a href="https://velocity.apache.org/" target="_blank" rel="noopener noreferrer">Velocity 官网</a></li><li><a href="https://wizardforcel.gitbooks.io/velocity-doc/content/" target="_blank" rel="noopener noreferrer">Velocity 中文文档</a></li><li><a href="https://github.com/alibaba/velocity-spring-boot-project" target="_blank" rel="noopener noreferrer">velocity-spring-boot-project</a></li></ul></li></ul>',2))])}const h=i(g,[["render",m],["__file","index.html.vue"]]),J=JSON.parse('{"path":"/pages/9d37fa/","title":"Java 模板引擎","lang":"zh-CN","frontmatter":{"title":"Java 模板引擎","date":"2022-02-17T22:34:30.000Z","categories":["Java","工具","模板引擎"],"tags":["Java","模板引擎"],"permalink":"/pages/9d37fa/","hidden":true,"index":false,"description":"Java 模板引擎 模板引擎不属于特定技术领域，它是跨领域跨平台的概念。 模板引擎的作用就是分离业务数据和最终呈现内容，它可以生成特定格式的文档（模板） 。 模板引擎简单来说，就是：模板 + 数据模型 = 输出 较早，也比较经典的模板引擎是 JavaEE 的标准技术 JSP。 但 JSP 存在以下缺点，导致逐渐被淘汰： 性能差 JSP 本质上是 Ser...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/9d37fa/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"Java 模板引擎"}],["meta",{"property":"og:description","content":"Java 模板引擎 模板引擎不属于特定技术领域，它是跨领域跨平台的概念。 模板引擎的作用就是分离业务数据和最终呈现内容，它可以生成特定格式的文档（模板） 。 模板引擎简单来说，就是：模板 + 数据模型 = 输出 较早，也比较经典的模板引擎是 JavaEE 的标准技术 JSP。 但 JSP 存在以下缺点，导致逐渐被淘汰： 性能差 JSP 本质上是 Ser..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"模板引擎"}],["meta",{"property":"article:published_time","content":"2022-02-17T22:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 模板引擎\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-17T22:34:30.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"内容","slug":"内容","link":"#内容","children":[]},{"level":2,"title":"资源","slug":"资源","link":"#资源","children":[]}],"git":{"createdTime":1749521666000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":1.54,"words":461},"filePathRelative":"posts/01.Java/12.工具/03.模板引擎/README.md","localizedDate":"2022年2月17日","excerpt":"\\n<p>模板引擎不属于特定技术领域，它是跨领域跨平台的概念。 模板引擎的作用就是分离业务数据和最终呈现内容，它可以生成特定格式的文档（模板） 。</p>\\n<p>模板引擎简单来说，就是：<strong><em><code>模板 + 数据模型 = 输出</code></em></strong></p>\\n<p>较早，也比较经典的模板引擎是 JavaEE 的标准技术 JSP。</p>\\n<p>但 JSP 存在以下缺点，导致逐渐被淘汰：</p>\\n<ul>\\n<li><strong>性能差</strong>\\n<ul>\\n<li>JSP 本质上是 Servlet，第一次请求 JSP 页面，必须要在 web 服务器中编译成 servlet，所以第一次响应较慢。</li>\\n<li>每次请求 JSP 都是访问 servlet 再用输出流输出的 html 页面。</li>\\n<li>JSP 中的内容很多，页面响应会很慢，因为是同步加载。</li>\\n</ul>\\n</li>\\n<li><strong>无法前后端分离</strong>\\n<ul>\\n<li>动态资源和静态资源全部耦合在一起，无法做到前后端分离。一旦服务器出现状况，前后台一起玩完。</li>\\n<li>而且 Java 工程师既当爹又当妈，又要维护 Java 代码，又要维护 JSP 代码，痛苦。</li>\\n<li>前端工程师如果不理解 JSP 语法，面对各种 JSP 标签、表达式、指令，会一脸懵逼，痛苦。</li>\\n</ul>\\n</li>\\n<li><strong>不是所有服务器都支持</strong> - JSP 必须要在支持 JSP 技术的 web 服务器里运行（如 Tomcat）。但有些服务器则不支持 JSP ，如 Nginx。</li>\\n</ul>","autoDesc":true}');export{h as comp,J as data};
