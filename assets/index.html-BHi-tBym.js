import{_ as s,c as a,b as e,o as t}from"./app-D4aAnUWn.js";const n={};function l(r,i){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="mongodb-事务" tabindex="-1"><a class="header-anchor" href="#mongodb-事务"><span>MongoDB 事务</span></a></h1><p>writeConcern 可以决定写操作到达多少个节点才算成功。</p><ul><li>默认：多节点复制集不做任何设定，所以是有可能丢失数据。</li><li><code>w: &quot;majority&quot;</code>：大部分节点确认，就视为写成功</li><li><code>w: &quot;all&quot;</code>：全部节点确认，才视为写成功</li></ul><p>journal 则定义如何才算成功。取值包括：</p><ul><li><code>true</code>：写操作落到 journal 文件中才算成功；</li><li><code>false</code>：写操作达到内存即算作成功。</li></ul><p>【示例】在集群中使用 writeConcern 参数</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">writeConcern</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">w</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;majoriy&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">writeConcern</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">w</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;4&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } })</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">db</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">transaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">insert</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({ </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">count</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> }, { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">writeConcern</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">w</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;all&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> } })</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>【示例】配置延迟节点，模拟网络延迟</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>conf=rs.conf()</span></span>
<span class="line"><span>conf.memebers[2].slaveDelay=5</span></span>
<span class="line"><span>conf.memebers[2].priority=0</span></span>
<span class="line"><span>rs.reconfig(conf)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,9)]))}const p=s(n,[["render",l],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/pages/4574fe/","title":"MongoDB 事务","lang":"zh-CN","frontmatter":{"title":"MongoDB 事务","date":"2020-09-20T23:12:17.000Z","order":4,"categories":["数据库","文档数据库","MongoDB"],"tags":["数据库","文档数据库","MongoDB","事务"],"permalink":"/pages/4574fe/","description":"MongoDB 事务 writeConcern 可以决定写操作到达多少个节点才算成功。 默认：多节点复制集不做任何设定，所以是有可能丢失数据。 w: \\"majority\\"：大部分节点确认，就视为写成功 w: \\"all\\"：全部节点确认，才视为写成功 journal 则定义如何才算成功。取值包括： true：写操作落到 journal 文件中才算成功； f...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/4574fe/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"MongoDB 事务"}],["meta",{"property":"og:description","content":"MongoDB 事务 writeConcern 可以决定写操作到达多少个节点才算成功。 默认：多节点复制集不做任何设定，所以是有可能丢失数据。 w: \\"majority\\"：大部分节点确认，就视为写成功 w: \\"all\\"：全部节点确认，才视为写成功 journal 则定义如何才算成功。取值包括： true：写操作落到 journal 文件中才算成功； f..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-18T02:31:38.000Z"}],["meta",{"property":"article:tag","content":"数据库"}],["meta",{"property":"article:tag","content":"文档数据库"}],["meta",{"property":"article:tag","content":"MongoDB"}],["meta",{"property":"article:tag","content":"事务"}],["meta",{"property":"article:published_time","content":"2020-09-20T23:12:17.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-18T02:31:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"MongoDB 事务\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2020-09-20T23:12:17.000Z\\",\\"dateModified\\":\\"2025-02-18T02:31:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[],"git":{"createdTime":1739845898000,"updatedTime":1739845898000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":0.7,"words":209},"filePathRelative":"posts/02.database/04.文档数据库/01.MongoDB/04.MongoDB事务.md","localizedDate":"2020年9月20日","excerpt":"\\n<p>writeConcern 可以决定写操作到达多少个节点才算成功。</p>\\n<ul>\\n<li>默认：多节点复制集不做任何设定，所以是有可能丢失数据。</li>\\n<li><code>w: \\"majority\\"</code>：大部分节点确认，就视为写成功</li>\\n<li><code>w: \\"all\\"</code>：全部节点确认，才视为写成功</li>\\n</ul>\\n<p>journal 则定义如何才算成功。取值包括：</p>\\n<ul>\\n<li><code>true</code>：写操作落到 journal 文件中才算成功；</li>\\n<li><code>false</code>：写操作达到内存即算作成功。</li>\\n</ul>","autoDesc":true}');export{p as comp,o as data};
