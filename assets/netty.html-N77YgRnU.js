import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as i,a as n,b as s,o as l}from"./app-7fp8SYUT.js";const r={};function o(p,e){return l(),a("div",null,[e[0]||(e[0]=i("p",null,"netty 学习",-1)),n(" more "),e[1]||(e[1]=s(`<h1 id="netty-study" tabindex="-1"><a class="header-anchor" href="#netty-study"><span>netty study</span></a></h1><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用"><span>基本使用</span></a></h2><p>在使用springboot的情况下，引入依赖</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;dependency&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">io.netty</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/groupId&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">netty-all</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/artifactId&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/dependency&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>1.实现 discard 协议。 如 example.netty.discard 中的代码实现。启动它，使用 telnet localhost 8080 连接发送消息。您就可以在服务器看到打印内容。 2.实现 echo 协议。 如<br> example.netty.echo 中的代码实现（在discard基础上修改）。然后 telnet localhost 8080 连接成功后，发送什么给服务端您都可以在客户端看见 3.实现 time 协议。 如<br> example.netty.time 中的代码实现（在echo基础上修改）。然后 telnet localhost 8080 连接成功后，控制台有打印，连接立即会断开。</p><h2 id="不同-handler-的作用" tabindex="-1"><a class="header-anchor" href="#不同-handler-的作用"><span>不同 handler 的作用</span></a></h2><ol><li><p>LengthFieldBasedFrameDecoder</p><p>作用</p><ul><li>解决粘包和拆包问题： <ul><li>粘包：多个消息被合并成一个大的数据包发送。</li><li>拆包：一个完整的消息被拆分成多个小的数据包发送。</li></ul></li><li>基于长度字段解析消息： <ul><li>通过解析消息中的长度字段，确定每个消息的实际长度，从而正确地分割出一个个完整的消息帧。</li></ul></li></ul></li><li><p>MessageToMessageCodec&lt;ByteBuf, PacketHeader&gt;</p><p>作用</p><ul><li>编码：将 PacketHeader 对象编码为 ByteBuf，以便在网络中传输。</li><li>解码：将接收到的 ByteBuf 解码为 PacketHeader 对象，以便应用程序处理。</li></ul></li></ol>`,7))])}const c=t(r,[["render",o],["__file","netty.html.vue"]]),y=JSON.parse('{"path":"/posts/java/dependence/netty.html","title":"netty 学习","lang":"zh-CN","frontmatter":{"title":"netty 学习","icon":"pen-to-square","date":"2023-06-01T00:00:00.000Z","lastUpdated":true,"category":["dependence"],"tag":["java","spring","springboot","netty"],"description":"netty 学习","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/posts/java/dependence/netty.html"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"netty 学习"}],["meta",{"property":"og:description","content":"netty 学习"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-22T14:03:31.000Z"}],["meta",{"property":"article:tag","content":"java"}],["meta",{"property":"article:tag","content":"spring"}],["meta",{"property":"article:tag","content":"springboot"}],["meta",{"property":"article:tag","content":"netty"}],["meta",{"property":"article:published_time","content":"2023-06-01T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-22T14:03:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"netty 学习\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-01T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-22T14:03:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"基本使用","slug":"基本使用","link":"#基本使用","children":[]},{"level":2,"title":"不同 handler 的作用","slug":"不同-handler-的作用","link":"#不同-handler-的作用","children":[]}],"git":{"createdTime":1734876211000,"updatedTime":1734876211000,"contributors":[{"name":"coder-xuyong","username":"coder-xuyong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/coder-xuyong"}]},"readingTime":{"minutes":1.15,"words":344},"filePathRelative":"posts/java/dependence/netty.md","localizedDate":"2023年6月1日","excerpt":"<p>netty 学习</p>\\n","autoDesc":true}');export{c as comp,y as data};
