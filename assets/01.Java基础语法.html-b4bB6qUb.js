import{_ as r}from"./Java数组-BbWsDudm.js";import{_ as h}from"./Java枚举-CDZPLUmV.js";import{_ as p,a as d}from"./Java异常-ClZOAZC-.js";import{_ as o,a as g}from"./Java代理--RECmWNP.js";import{_ as k,a as c,b as u,c as m}from"./自定义注解-DWX0LKHQ.js";import{_ as f}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as A,b as t,e as a,h as s,d as l,f as n,r as v,o as y}from"./app-iK0loR_Z.js";const b="/assets/Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-DFmMJ-MD.svg",B="/assets/Java%E6%93%8D%E4%BD%9C%E7%AC%A6-LIr3iCTk.svg",E="/assets/%E6%96%B9%E6%B3%95-BPHFcmCv.png",F="/assets/Java%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5-DSfkIa3Q.svg",J="/assets/Java%E6%B3%9B%E5%9E%8B-DSvO4gJR.svg",_="/assets/Java%E5%BA%8F%E5%88%97%E5%8C%96-SQzEpUxg.svg",x={};function C(D,i){const e=v("RouteLink");return y(),A("div",null,[i[4]||(i[4]=t(`<h1 id="java-基础语法特性" tabindex="-1"><a class="header-anchor" href="#java-基础语法特性"><span>Java 基础语法特性</span></a></h1><h2 id="注释" tabindex="-1"><a class="header-anchor" href="#注释"><span>注释</span></a></h2><p>空白行，或者注释的内容，都会被 Java 编译器忽略掉。</p><p>Java 支持多种注释方式，下面的示例展示了各种注释的使用方式：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HelloWorld</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    /*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     * JavaDoc 注释</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">     */</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        // 单行注释</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">        /* 多行注释：</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           1. 注意点a</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">           2. 注意点b</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">         */</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基本数据类型" tabindex="-1"><a class="header-anchor" href="#基本数据类型"><span>基本数据类型</span></a></h2><figure><img src="`+b+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',7)),a("blockquote",null,[a("p",null,[i[1]||(i[1]=s("👉 扩展阅读：")),l(e,{to:"/posts/01.Java/01.JavaSE/01.%E5%9F%BA%E7%A1%80%E7%89%B9%E6%80%A7/02.Java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.html"},{default:n(()=>i[0]||(i[0]=[s("深入理解 Java 基本数据类型")])),_:1})])]),i[5]||(i[5]=t('<h2 id="变量和常量" tabindex="-1"><a class="header-anchor" href="#变量和常量"><span>变量和常量</span></a></h2><p>Java 支持的变量类型有：</p><ul><li><code>局部变量</code> - 类方法中的变量。</li><li><code>成员变量（也叫实例变量）</code> - 类方法外的变量，不过没有 <code>static</code> 修饰。</li><li><code>静态变量（也叫类变量）</code> - 类方法外的变量，用 <code>static</code> 修饰。</li></ul><p>特性对比：</p><table><thead><tr><th>局部变量</th><th>实例变量（也叫成员变量）</th><th>类变量（也叫静态变量）</th></tr></thead><tbody><tr><td>局部变量声明在方法、构造方法或者语句块中。</td><td>实例变量声明在方法、构造方法和语句块之外。</td><td>类变量声明在方法、构造方法和语句块之外。并且以 static 修饰。</td></tr><tr><td>局部变量在方法、构造方法、或者语句块被执行的时候创建，当它们执行完成后，变量将会被销毁。</td><td>实例变量在对象创建的时候创建，在对象被销毁的时候销毁。</td><td>类变量在第一次被访问时创建，在程序结束时销毁。</td></tr><tr><td>局部变量没有默认值，所以必须经过初始化，才可以使用。</td><td>实例变量具有默认值。数值型变量的默认值是 0，布尔型变量的默认值是 false，引用类型变量的默认值是 null。变量的值可以在声明时指定，也可以在构造方法中指定。</td><td>类变量具有默认值。数值型变量的默认值是 0，布尔型变量的默认值是 false，引用类型变量的默认值是 null。变量的值可以在声明时指定，也可以在构造方法中指定。此外，静态变量还可以在静态语句块中初始化。</td></tr><tr><td>对于局部变量，如果是基本类型，会把值直接存储在栈；如果是引用类型，会把其对象存储在堆，而把这个对象的引用（指针）存储在栈。</td><td>实例变量存储在堆。</td><td>类变量存储在静态存储区。</td></tr><tr><td>访问修饰符不能用于局部变量。</td><td>访问修饰符可以用于实例变量。</td><td>访问修饰符可以用于类变量。</td></tr><tr><td>局部变量只在声明它的方法、构造方法或者语句块中可见。</td><td>实例变量对于类中的方法、构造方法或者语句块是可见的。一般情况下应该把实例变量设为私有。通过使用访问修饰符可以使实例变量对子类可见。</td><td>与实例变量具有相似的可见性。但为了对类的使用者可见，大多数静态变量声明为 public 类型。</td></tr><tr><td></td><td>实例变量可以直接通过变量名访问。但在静态方法以及其他类中，就应该使用完全限定名：ObejectReference.VariableName。</td><td>静态变量可以通过：ClassName.VariableName 的方式访问。</td></tr><tr><td></td><td></td><td>无论一个类创建了多少个对象，类只拥有类变量的一份拷贝。</td></tr><tr><td></td><td></td><td>类变量除了被声明为常量外很少使用。</td></tr></tbody></table><p><strong>变量修饰符</strong></p><ul><li><strong>访问级别修饰符</strong><ul><li>如果变量是实例变量或类变量，可以添加访问级别修饰符（public/protected/private）</li></ul></li><li><strong>静态修饰符</strong><ul><li>如果变量是类变量，需要添加 static 修饰</li></ul></li><li><strong>final</strong><ul><li>如果变量使用 <code>final</code> 修饰符，就表示这是一个常量，不能被修改。</li></ul></li></ul><h2 id="数组" tabindex="-1"><a class="header-anchor" href="#数组"><span>数组</span></a></h2><figure><img src="'+r+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',9)),a("blockquote",null,[a("p",null,[i[3]||(i[3]=s("👉 扩展阅读：")),l(e,{to:"/posts/01.Java/01.JavaSE/01.%E5%9F%BA%E7%A1%80%E7%89%B9%E6%80%A7/05.Java%E6%95%B0%E7%BB%84.html"},{default:n(()=>i[2]||(i[2]=[s("深入理解 Java 数组")])),_:1})])]),i[6]||(i[6]=t('<h2 id="枚举" tabindex="-1"><a class="header-anchor" href="#枚举"><span>枚举</span></a></h2><figure><img src="'+h+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>👉 扩展阅读：<a href="https://dunwu.github.io/waterdrop/pages/979887/" target="_blank" rel="noopener noreferrer">深入理解 Java 枚举</a></p></blockquote><h2 id="操作符" tabindex="-1"><a class="header-anchor" href="#操作符"><span>操作符</span></a></h2><p>Java 中支持的操作符类型如下：</p><figure><img src="'+B+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>👉 扩展阅读：<a href="http://www.runoob.com/java/java-operators.html" target="_blank" rel="noopener noreferrer">Java 操作符</a></p></blockquote><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h2><figure><img src="'+E+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>👉 扩展阅读：<a href="https://dunwu.github.io/waterdrop/pages/7a3ffc/" target="_blank" rel="noopener noreferrer">深入理解 Java 方法</a></p></blockquote><h2 id="控制语句" tabindex="-1"><a class="header-anchor" href="#控制语句"><span>控制语句</span></a></h2><figure><img src="'+F+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>👉 扩展阅读：<a href="https://dunwu.github.io/waterdrop/pages/fb4f8c/" target="_blank" rel="noopener noreferrer">Java 控制语句</a></p></blockquote><h2 id="异常" tabindex="-1"><a class="header-anchor" href="#异常"><span>异常</span></a></h2><figure><img src="'+p+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+d+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>👉 扩展阅读：<a href="https://dunwu.github.io/waterdrop/pages/37415c/" target="_blank" rel="noopener noreferrer">深入理解 Java 异常</a></p></blockquote><h2 id="泛型" tabindex="-1"><a class="header-anchor" href="#泛型"><span>泛型</span></a></h2><figure><img src="'+J+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>👉 扩展阅读：<a href="https://dunwu.github.io/waterdrop/pages/33a820/" target="_blank" rel="noopener noreferrer">深入理解 Java 泛型</a></p></blockquote><h2 id="反射" tabindex="-1"><a class="header-anchor" href="#反射"><span>反射</span></a></h2><figure><img src="'+o+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+g+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>👉 扩展阅读：<a href="https://dunwu.github.io/waterdrop/pages/0d066a/" target="_blank" rel="noopener noreferrer">深入理解 Java 反射和动态代理</a></p></blockquote><h2 id="注解" tabindex="-1"><a class="header-anchor" href="#注解"><span>注解</span></a></h2><figure><img src="'+k+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+c+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+u+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><figure><img src="'+m+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>👉 扩展阅读：<a href="https://dunwu.github.io/waterdrop/pages/ecc011/" target="_blank" rel="noopener noreferrer">深入理解 Java 注解</a></p></blockquote><h2 id="序列化" tabindex="-1"><a class="header-anchor" href="#序列化"><span>序列化</span></a></h2><figure><img src="'+_+'" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><blockquote><p>👉 扩展阅读：<a href="https://dunwu.github.io/waterdrop/pages/2b2f0f/" target="_blank" rel="noopener noreferrer">Java 序列化</a></p></blockquote>',33))])}const $=f(x,[["render",C],["__file","01.Java基础语法.html.vue"]]),V=JSON.parse('{"path":"/posts/01.Java/01.JavaSE/01.%E5%9F%BA%E7%A1%80%E7%89%B9%E6%80%A7/01.Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html","title":"Java 基础语法特性","lang":"zh-CN","frontmatter":{"title":"Java 基础语法特性","date":"2022-01-25T07:31:16.000Z","order":2,"author":[{"name":"钝悟","url":"https://dunwu.github.io/"}],"categories":["Java","JavaSE","基础特性"],"tags":["Java","JavaSE"],"description":"Java 基础语法特性 注释 空白行，或者注释的内容，都会被 Java 编译器忽略掉。 Java 支持多种注释方式，下面的示例展示了各种注释的使用方式： 基本数据类型 imgimg 👉 扩展阅读： 变量和常量 Java 支持的变量类型有： 局部变量 - 类方法中的变量。 成员变量（也叫实例变量） - 类方法外的变量，不过没有 static 修饰。 静...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/posts/01.Java/01.JavaSE/01.%E5%9F%BA%E7%A1%80%E7%89%B9%E6%80%A7/01.Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"Java 基础语法特性"}],["meta",{"property":"og:description","content":"Java 基础语法特性 注释 空白行，或者注释的内容，都会被 Java 编译器忽略掉。 Java 支持多种注释方式，下面的示例展示了各种注释的使用方式： 基本数据类型 imgimg 👉 扩展阅读： 变量和常量 Java 支持的变量类型有： 局部变量 - 类方法中的变量。 成员变量（也叫实例变量） - 类方法外的变量，不过没有 static 修饰。 静..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-02-09T12:27:20.000Z"}],["meta",{"property":"article:author","content":"钝悟"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"JavaSE"}],["meta",{"property":"article:published_time","content":"2022-01-25T07:31:16.000Z"}],["meta",{"property":"article:modified_time","content":"2025-02-09T12:27:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Java 基础语法特性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-01-25T07:31:16.000Z\\",\\"dateModified\\":\\"2025-02-09T12:27:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"钝悟\\",\\"url\\":\\"https://dunwu.github.io/\\"}]}"]]},"headers":[{"level":2,"title":"注释","slug":"注释","link":"#注释","children":[]},{"level":2,"title":"基本数据类型","slug":"基本数据类型","link":"#基本数据类型","children":[]},{"level":2,"title":"变量和常量","slug":"变量和常量","link":"#变量和常量","children":[]},{"level":2,"title":"数组","slug":"数组","link":"#数组","children":[]},{"level":2,"title":"枚举","slug":"枚举","link":"#枚举","children":[]},{"level":2,"title":"操作符","slug":"操作符","link":"#操作符","children":[]},{"level":2,"title":"方法","slug":"方法","link":"#方法","children":[]},{"level":2,"title":"控制语句","slug":"控制语句","link":"#控制语句","children":[]},{"level":2,"title":"异常","slug":"异常","link":"#异常","children":[]},{"level":2,"title":"泛型","slug":"泛型","link":"#泛型","children":[]},{"level":2,"title":"反射","slug":"反射","link":"#反射","children":[]},{"level":2,"title":"注解","slug":"注解","link":"#注解","children":[]},{"level":2,"title":"序列化","slug":"序列化","link":"#序列化","children":[]}],"git":{"createdTime":1739104040000,"updatedTime":1739104040000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":4.15,"words":1244},"filePathRelative":"posts/01.Java/01.JavaSE/01.基础特性/01.Java基础语法.md","localizedDate":"2022年1月25日","excerpt":"\\n<h2>注释</h2>\\n<p>空白行，或者注释的内容，都会被 Java 编译器忽略掉。</p>\\n<p>Java 支持多种注释方式，下面的示例展示了各种注释的使用方式：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"java\\" data-title=\\"java\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">public</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> class</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> HelloWorld</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">    /*</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">     * JavaDoc 注释</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">     */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">    public</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> static</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> void</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> main</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\">String</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">[] </span><span style=\\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\\">args</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">        // 单行注释</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">        /* 多行注释：</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">           1. 注意点a</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">           2. 注意点b</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">         */</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">        System</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#E45649;--shiki-dark:#E5C07B\\">out</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">println</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#50A14F;--shiki-dark:#98C379\\">\\"Hello World\\"</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">);</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    }</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{$ as comp,V as data};
