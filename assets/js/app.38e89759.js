"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3524],{61709:(a,e,i)=>{i.d(e,{l:()=>n});const n={category:{"/":{path:"/category/",map:{使用指南:{path:"/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[0]},idea:{path:"/category/idea/",indexes:[1]},linux:{path:"/category/linux/",indexes:[2,3]},mysql:{path:"/category/mysql/",indexes:[4,5,6,7,8,9,10,11,12]},java:{path:"/category/java/",indexes:[13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73]},network:{path:"/category/network/",indexes:[74]},redis:{path:"/category/redis/",indexes:[75,76,77]},windows:{path:"/category/windows/",indexes:[78,79]},dependence:{path:"/category/dependence/",indexes:[80,81,82,83,84]},spring:{path:"/category/spring/",indexes:[85]},python:{path:"/category/python/",indexes:[86]},Java:{path:"/category/java/",indexes:[87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146]},框架:{path:"/category/%E6%A1%86%E6%9E%B6/",indexes:[87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146]},Spring:{path:"/category/spring/",indexes:[87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146]},Spring综合:{path:"/category/spring%E7%BB%BC%E5%90%88/",indexes:[118,119,120,126,140]},Spring核心:{path:"/category/spring%E6%A0%B8%E5%BF%83/",indexes:[94,95,96,97,98,99,100,101,102,103,104,105,106,107,112,113,115,116,117,123,124,128,130,134]},Spring数据:{path:"/category/spring%E6%95%B0%E6%8D%AE/",indexes:[92,93,108,110,131,132,133,137,139,146]},SpringWeb:{path:"/category/springweb/",indexes:[87,88,89,90,91,121,135,142]},SpringIO:{path:"/category/springio/",indexes:[109,127,129,136]},Spring集成:{path:"/category/spring%E9%9B%86%E6%88%90/",indexes:[125,143,144,145]},Spring安全:{path:"/category/spring%E5%AE%89%E5%85%A8/",indexes:[114]},Spring其他:{path:"/category/spring%E5%85%B6%E4%BB%96/",indexes:[111,122,138,141]}}}},tag:{"/":{path:"/tag/",map:{页面配置:{path:"/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",indexes:[0]},使用指南:{path:"/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[0,1]},linux:{path:"/tag/linux/",indexes:[2,3]},tomcat:{path:"/tag/tomcat/",indexes:[3,32]},shell:{path:"/tag/shell/",indexes:[78,79,3,29]},sql:{path:"/tag/sql/",indexes:[4,5,6,7,8,9,10,11,12]},bug:{path:"/tag/bug/",indexes:[23,25]},internet:{path:"/tag/internet/",indexes:[74]},java:{path:"/tag/java/",indexes:[80,75,76,77,29,81,82,83,84,85,30,31]},spring:{path:"/tag/spring/",indexes:[75,76,77,29,81,82,83,84,85,30,31]},springboot:{path:"/tag/springboot/",indexes:[75,76,77,29,81,82,83,84,85,30,31]},redis:{path:"/tag/redis/",indexes:[75,76,77]},script:{path:"/tag/script/",indexes:[78,79]},"java-basic":{path:"/tag/java-basic/",indexes:[13,14,15,16,17,18,24,26,27,28,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73]},logback:{path:"/tag/logback/",indexes:[81]},maven:{path:"/tag/maven/",indexes:[82]},mybatis:{path:"/tag/mybatis/",indexes:[83]},netty:{path:"/tag/netty/",indexes:[19,20,21,22,84]},nio:{path:"/tag/nio/",indexes:[19]},javaweb:{path:"/tag/javaweb/",indexes:[32,33,34]},http:{path:"/tag/http/",indexes:[32]},servlet:{path:"/tag/servlet/",indexes:[32]},Request:{path:"/tag/request/",indexes:[33]},Response:{path:"/tag/response/",indexes:[33]},jdbc:{path:"/tag/jdbc/",indexes:[34]},djgango:{path:"/tag/djgango/",indexes:[86]},Java:{path:"/tag/java/",indexes:[87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146]},框架:{path:"/tag/%E6%A1%86%E6%9E%B6/",indexes:[87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146]},Spring:{path:"/tag/spring/",indexes:[87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146]},SpringBoot:{path:"/tag/springboot/",indexes:[92,93,108,109,110,111,113,114,118,119,120,121,122,124,125,127,128,129,131,132,133,134,135,136,137,138,139,146]},面试:{path:"/tag/%E9%9D%A2%E8%AF%95/",indexes:[140]},Bean:{path:"/tag/bean/",indexes:[104,105,106,112]},BeanDefinition:{path:"/tag/beandefinition/",indexes:[112]},IOC:{path:"/tag/ioc/",indexes:[107,115,116,117]},依赖查找:{path:"/tag/%E4%BE%9D%E8%B5%96%E6%9F%A5%E6%89%BE/",indexes:[116]},依赖注入:{path:"/tag/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/",indexes:[107,117]},AOP:{path:"/tag/aop/",indexes:[123]},Resource:{path:"/tag/resource/",indexes:[130]},数据绑定:{path:"/tag/%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/",indexes:[101]},数据库:{path:"/tag/%E6%95%B0%E6%8D%AE%E5%BA%93/",indexes:[110,146]},DataSource:{path:"/tag/datasource/",indexes:[146]},JDBC:{path:"/tag/jdbc/",indexes:[132]},JdbcTemplate:{path:"/tag/jdbctemplate/",indexes:[132]},事务:{path:"/tag/%E4%BA%8B%E5%8A%A1/",indexes:[108]},JPA:{path:"/tag/jpa/",indexes:[133]},MyBatis:{path:"/tag/mybatis/",indexes:[131]},PageHelper:{path:"/tag/pagehelper/",indexes:[131]},Mapper:{path:"/tag/mapper/",indexes:[131]},Redis:{path:"/tag/redis/",indexes:[93]},MongoDB:{path:"/tag/mongodb/",indexes:[139]},Elasticsearch:{path:"/tag/elasticsearch/",indexes:[137]},Web:{path:"/tag/web/",indexes:[87,88,89,90,91,121,135,142]},Controller:{path:"/tag/controller/",indexes:[89]},DispatcherServlet:{path:"/tag/dispatcherservlet/",indexes:[91]},Filter:{path:"/tag/filter/",indexes:[90]},CORS:{path:"/tag/cors/",indexes:[88]},View:{path:"/tag/view/",indexes:[87]},异步:{path:"/tag/%E5%BC%82%E6%AD%A5/",indexes:[129]},JSON:{path:"/tag/json/",indexes:[136]},邮件:{path:"/tag/%E9%82%AE%E4%BB%B6/",indexes:[127]},IO:{path:"/tag/io/",indexes:[109]},集成:{path:"/tag/%E9%9B%86%E6%88%90/",indexes:[125,143,144,145]},缓存:{path:"/tag/%E7%BC%93%E5%AD%98/",indexes:[143]},调度器:{path:"/tag/%E8%B0%83%E5%BA%A6%E5%99%A8/",indexes:[144]},Dubbo:{path:"/tag/dubbo/",indexes:[145]},安全:{path:"/tag/%E5%AE%89%E5%85%A8/",indexes:[114]}}}}}},94776:(a,e,i)=>{i.d(e,{M:()=>n});const n=["/posts/markdown.html","/posts/idea/idea.html","/posts/linux/linux.html","/posts/linux/linuxWork.html","/posts/mysql/DDL.html","/posts/mysql/DML_DQL.html","/posts/mysql/mysqlBug.html","/posts/mysql/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html","/posts/mysql/mysql%E5%AE%89%E8%A3%85.html","/posts/mysql/mysql%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.html","/posts/mysql/mysql%E7%BA%A6%E6%9D%9F.html","/posts/mysql/mysql%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0.html","/posts/mysql/mysql%E8%A7%A6%E5%8F%91%E5%99%A8.html","/posts/java/basic/3.java-basic.html","/posts/java/basic/4.collection.html","/posts/java/basic/2.three-features.html","/posts/java/basic/1.object-oriented-programming.html","/posts/java/basic/comparator.html","/posts/java/basic/regularExpression.html","/posts/java/netty/Netty01-nio.html","/posts/java/netty/Netty02-%E5%85%A5%E9%97%A8.html","/posts/java/netty/Netty03-%E8%BF%9B%E9%98%B6.html","/posts/java/netty/Netty04-%E4%BC%98%E5%8C%96%E4%B8%8E%E6%BA%90%E7%A0%81.html","/posts/network/ftp.html","/posts/java/basic/ioStream.html","/posts/java/bug/bug.html","/posts/java/basic/jottings.html","/posts/java/basic/java8Stream.html","/posts/java/basic/multithreading.html","/posts/windows/workcondition.html","/posts/java/spring/spring%E9%9D%A2%E8%AF%95%E9%A2%98.html","/posts/java/springboot/workcondition.html","/posts/java/web/HTTP_Tomcat_Servlet.html","/posts/java/web/Request_Response.html","/posts/java/web/jdbc.html","/posts/java/basic/01-Java%E5%85%A5%E9%97%A8/01-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html","/posts/java/basic/02-Java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/02-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html","/posts/java/basic/03-Java%E8%BF%90%E7%AE%97%E7%AC%A6/03%E7%AC%94%E8%AE%B0.html","/posts/java/basic/04-%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/day04-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5.html","/posts/java/basic/05-%E5%BE%AA%E7%8E%AF%E9%AB%98%E7%BA%A7%E5%92%8C%E6%95%B0%E7%BB%84/%E5%BE%AA%E7%8E%AF%E9%AB%98%E7%BA%A7.html","/posts/java/basic/05-%E5%BE%AA%E7%8E%AF%E9%AB%98%E7%BA%A7%E5%92%8C%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84.html","/posts/java/basic/06-%E6%96%B9%E6%B3%95/%E6%96%B9%E6%B3%95.html","/posts/java/basic/07-%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html","/posts/java/basic/08-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/day08-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html","/posts/java/basic/09-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E8%AE%AD%E7%BB%83/%E6%89%A9%E5%B1%95%EF%BC%9A%E9%94%AE%E7%9B%98%E5%BD%95%E5%85%A5%E7%AC%94%E8%AE%B0.html","/posts/java/basic/09-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E8%AE%AD%E7%BB%83/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E8%AE%AD%E7%BB%83%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html","/posts/java/basic/10-%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%B8%B8%E7%94%A8API.html","/posts/java/basic/11-%E9%9B%86%E5%90%88_%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/ArrayList_%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html","/posts/java/basic/13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88static_%E7%BB%A7%E6%89%BF%EF%BC%89/day13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6.html","/posts/java/basic/14-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E5%A4%9A%E6%80%81_%E5%8C%85_final_%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6_%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%89/day14%E7%AC%94%E8%AE%B0.html","/posts/java/basic/15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB_%E6%8E%A5%E5%8F%A3_%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%89/day15%E7%AC%94%E8%AE%B0.html","/posts/java/basic/16-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%8A%EF%BC%89/day16-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%8A%EF%BC%89.html","/posts/java/basic/17-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%8B%EF%BC%89/day17-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%8B%EF%BC%89.html","/posts/java/basic/18-API%EF%BC%88%E5%B8%B8%E8%A7%81API%EF%BC%8C%E5%AF%B9%E8%B1%A1%E5%85%8B%E9%9A%86%EF%BC%89/API.html","/posts/java/basic/19-API%EF%BC%88%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","/posts/java/basic/20-API%EF%BC%88%E6%97%B6%E9%97%B4%EF%BC%8C%E5%8C%85%E8%A3%85%E7%B1%BB%EF%BC%8C%E7%BB%83%E4%B9%A0%EF%BC%89/API.html","/posts/java/basic/21-API%EF%BC%88%E7%AE%97%E6%B3%95%EF%BC%8Clambda%EF%BC%8C%E7%BB%83%E4%B9%A0%EF%BC%89/%E7%AE%97%E6%B3%95.html","/posts/java/basic/22-%E9%9B%86%E5%90%88%EF%BC%88List%E9%9B%86%E5%90%88%EF%BC%89/%E9%9B%86%E5%90%8801.html","/posts/java/basic/23-%E9%9B%86%E5%90%88%EF%BC%88%E6%B3%9B%E5%9E%8B_Set_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/%E9%9B%86%E5%90%8802.html","/posts/java/basic/24-%E9%9B%86%E5%90%88%EF%BC%88Map_%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0_%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%89/%E9%9B%86%E5%90%8803.html","/posts/java/basic/25-%E9%98%B6%E6%AE%B5%E9%A1%B9%E7%9B%AE%EF%BC%88%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0_doudizhu%E6%B8%B8%E6%88%8F%EF%BC%89/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0_%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html","/posts/java/basic/26-%E9%9B%86%E5%90%88%EF%BC%88Stream%E6%B5%81_%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%EF%BC%89/stream%E6%B5%81%E5%92%8C%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8.html","/posts/java/basic/27-IO(%E5%BC%82%E5%B8%B8_File_%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89/IO(%E5%BC%82%E5%B8%B8_File_%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89.html","/posts/java/basic/28-IO%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81_%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89/IO%E6%B5%81%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81_%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89.html","/posts/java/basic/29-IO%EF%BC%88%E5%85%B6%E4%BB%96%E6%B5%81%EF%BC%89/IO%E6%B5%81%EF%BC%88%E5%85%B6%E4%BB%96%E6%B5%81%EF%BC%89.html","/posts/java/basic/30-%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B01.html","/posts/java/basic/31-%E5%A4%9A%E7%BA%BF%E7%A8%8B_juc/%E5%A4%9A%E7%BA%BF%E7%A8%8B02.html","/posts/java/basic/32-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.html","/posts/java/basic/33-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E5%8F%8D%E5%B0%84%EF%BC%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89/%E5%8F%8D%E5%B0%84_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html","/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/01-log%E6%97%A5%E5%BF%97/log%E6%97%A5%E5%BF%97.html","/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html","/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/03-xml/xml.html","/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/04-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html","/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/05-%E6%B3%A8%E8%A7%A3/%E6%B3%A8%E8%A7%A3.html","/posts/network/internet.html","/posts/redis/redis%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AE%9E%E6%88%98%E7%AF%87.html","/posts/redis/redis%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html","/posts/redis/redisBUG.html","/posts/shell/shellWork.html","/posts/shell/shell.html","/posts/java/dependence/docx4j.html","/posts/java/dependence/log.html","/posts/java/dependence/maven.html","/posts/java/dependence/mybatis.html","/posts/java/dependence/netty.html","/posts/java/spring/spring.html","/posts/python/django/djangoWork.html","/pages/251e31/","/pages/1d2954/","/pages/5d002f/","/pages/4a164d/","/pages/20287b/","/pages/191cdb/","/pages/65e4a2/","/pages/1f743f/","/pages/ad472e/","/pages/03d838/","/pages/b6556f/","/pages/cca414/","/pages/175cbd/","/pages/6662dc/","/pages/267b4c/","/pages/fe6aad/","/pages/b5b8ad/","/pages/55f315/","/pages/4ab176/","/pages/8289f5/","/pages/a5f257/","/pages/128c54/","/pages/56581b/","/pages/b912d1/","/pages/c013cc/","/pages/68097d/","/pages/950e4d/","/pages/568352/","/pages/915530/","/pages/9a6f6b/","/pages/f61a1c/","/pages/430f53/","/pages/dbf521/","/pages/9e0b67/","/pages/e2586a/","/pages/6bb8c1/","/pages/53aedb/","/pages/5e7c20/","/pages/d6025b/","/pages/9d3091/","/pages/2586f1/","/pages/cb598e/","/pages/92add2/","/pages/a1549f/","/pages/88219e/","/pages/cf19fd/","/pages/a03d7b/","/pages/0fb992/","/pages/ad0516/","/pages/676725/","/pages/fac14c/","/pages/bac2ce/","/pages/db2a41/","/pages/db33b0/","/pages/752c6a/","/pages/65351b/","/pages/a311cb/","/pages/a187f0/","/pages/274fd7/","/pages/1b774c/","/intro.html"]},53781:(a,e,i)=>{i.d(e,{U:()=>n});const n={article:{"/":{path:"/article/",indexes:[0,13,14,15,16,1,147,17,18,80,19,20,21,22,86,78,23,74,79,24,25,26,27,28,2,3,4,5,6,7,8,9,10,11,12,75,76,77,29,81,82,83,84,85,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146]}},star:{"/":{path:"/star/",indexes:[0,147]}},timeline:{"/":{path:"/timeline/",indexes:[13,14,15,16,0,1,147,17,18,80,19,20,21,22,86,78,23,74,79,24,25,26,27,28,2,3,4,5,6,7,8,9,10,11,12,75,76,77,29,81,82,83,84,85,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146]}}}},88965:(a,e,i)=>{i.d(e,{B:()=>V});var n={};i.r(n);var t={};i.r(t);var s={};i.r(s);var r={};i.r(r),i.d(r,{default:()=>A});var p={};i.r(p),i.d(p,{default:()=>b});var l={};i.r(l);var E={};i.r(E),i.d(E,{default:()=>f});var o={};i.r(o),i.d(o,{default:()=>R});var B={};i.r(B),i.d(B,{default:()=>N});var d=i(33349),g=i(11781),h=i(19212);const A={enhance:({app:a})=>{a.component("CodeTabs",g.S),a.component("Tabs",h.t)}};var c=i(58031),m=i(83027);const b={enhance:({app:a})=>{a.component("CodeDemo",c.A),a.component("MdDemo",m.A)}};var k=i(38913),v=i(80355),F=i(80457),y=i(6990),C=i(1489),u=i(97786),S=i(79403),j=i(70596),D=i(38831);const f={enhance:({app:a})=>{(0,C.L4)("FontIcon")||a.component("FontIcon",S.A),(0,C.L4)("Badge")||a.component("Badge",j.A),(0,C.L4)("VPCard")||a.component("VPCard",D.A)},setup:()=>{(0,u.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,u.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,u.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]};var x=i(26358),w=i(23827),I=i(31599),_=i(50421),J=i(75054),q=i(80783),O=i(38465),P=i(20641),M=i(77107),L=i(79920);(0,O.M_)((a=>{const e=a.t,i=!1!==a.I,n=a.i;return i?{title:e,content:n?()=>[(0,P.h)(q.GB,{icon:n}),e]:null,order:a.O,index:a.I}:null}));const R={enhance:({app:a,router:e})=>{const{scrollBehavior:i}=e.options;e.options.scrollBehavior=async(...a)=>(await q.lE.wait(),i(...a)),(0,q.fk)(a),a.component("HopeIcon",q.GB),a.component("BloggerInfo",M.tI),a.component("SocialMedias",M.rS),a.component("GlobalEncrypt",L.J),a.component("LocalEncrypt",L.n)},setup:()=>{(0,q.PV)(),(0,q.i$)(),(0,M.su)()},layouts:{Layout:q.PE,NotFound:q.Mk,BlogCategory:M.Pn,BlogHome:M.qX,BlogType:M.z7,Timeline:M.Kf}};var W=i(8278),T=i(61428);const N=(0,W.re)({setup(){(0,T.H)(new Date("2024-12-18"),{"/":"已运行 :day 天 :hour 小时 :minute 分钟 :second 秒"},!0)}}),V=[n,t,s,d,r,p,l,s,k,v,F,y,E,x,w,I,_,J,o,B].map((a=>a.default)).filter(Boolean)},68164:(a,e,i)=>{i.d(e,{J:()=>t,c:()=>n});const n=JSON.parse('{"/posts/mysql/DML&DQL.html":"/posts/mysql/DML_DQL.html","/posts/java/web/HTTP&Tomcat&Servlet.html":"/posts/java/web/HTTP_Tomcat_Servlet.html","/posts/java/web/Request&Response.html":"/posts/java/web/Request_Response.html","/posts/java/basic/11-%E9%9B%86%E5%90%88&%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/ArrayList&%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html":"/posts/java/basic/11-%E9%9B%86%E5%90%88_%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/ArrayList_%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html","/posts/java/basic/13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88static&%E7%BB%A7%E6%89%BF%EF%BC%89/day13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6.html":"/posts/java/basic/13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88static_%E7%BB%A7%E6%89%BF%EF%BC%89/day13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6.html","/posts/java/basic/14-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E5%A4%9A%E6%80%81&%E5%8C%85&final&%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6&%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%89/day14%E7%AC%94%E8%AE%B0.html":"/posts/java/basic/14-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E5%A4%9A%E6%80%81_%E5%8C%85_final_%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6_%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%89/day14%E7%AC%94%E8%AE%B0.html","/posts/java/basic/15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB&%E6%8E%A5%E5%8F%A3&%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%89/day15%E7%AC%94%E8%AE%B0.html":"/posts/java/basic/15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB_%E6%8E%A5%E5%8F%A3_%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%89/day15%E7%AC%94%E8%AE%B0.html","/posts/java/basic/23-%E9%9B%86%E5%90%88%EF%BC%88%E6%B3%9B%E5%9E%8B&Set&%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/%E9%9B%86%E5%90%8802.html":"/posts/java/basic/23-%E9%9B%86%E5%90%88%EF%BC%88%E6%B3%9B%E5%9E%8B_Set_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/%E9%9B%86%E5%90%8802.html","/posts/java/basic/24-%E9%9B%86%E5%90%88%EF%BC%88Map&%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0&%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%89/%E9%9B%86%E5%90%8803.html":"/posts/java/basic/24-%E9%9B%86%E5%90%88%EF%BC%88Map_%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0_%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%89/%E9%9B%86%E5%90%8803.html","/posts/java/basic/25-%E9%98%B6%E6%AE%B5%E9%A1%B9%E7%9B%AE%EF%BC%88%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0&doudizhu%E6%B8%B8%E6%88%8F%EF%BC%89/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0&%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html":"/posts/java/basic/25-%E9%98%B6%E6%AE%B5%E9%A1%B9%E7%9B%AE%EF%BC%88%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0_doudizhu%E6%B8%B8%E6%88%8F%EF%BC%89/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0_%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html","/posts/java/basic/26-%E9%9B%86%E5%90%88%EF%BC%88Stream%E6%B5%81&%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%EF%BC%89/stream%E6%B5%81%E5%92%8C%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8.html":"/posts/java/basic/26-%E9%9B%86%E5%90%88%EF%BC%88Stream%E6%B5%81_%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%EF%BC%89/stream%E6%B5%81%E5%92%8C%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8.html","/posts/java/basic/27-IO(%E5%BC%82%E5%B8%B8&File&%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89/IO(%E5%BC%82%E5%B8%B8&File&%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89.html":"/posts/java/basic/27-IO(%E5%BC%82%E5%B8%B8_File_%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89/IO(%E5%BC%82%E5%B8%B8_File_%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89.html","/posts/java/basic/28-IO%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81&%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89/IO%E6%B5%81%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81&%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89.html":"/posts/java/basic/28-IO%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81_%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89/IO%E6%B5%81%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81_%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89.html","/posts/java/basic/31-%E5%A4%9A%E7%BA%BF%E7%A8%8B&juc/%E5%A4%9A%E7%BA%BF%E7%A8%8B02.html":"/posts/java/basic/31-%E5%A4%9A%E7%BA%BF%E7%A8%8B_juc/%E5%A4%9A%E7%BA%BF%E7%A8%8B02.html","/posts/java/basic/33-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E5%8F%8D%E5%B0%84%EF%BC%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89/%E5%8F%8D%E5%B0%84&%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html":"/posts/java/basic/33-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E5%8F%8D%E5%B0%84%EF%BC%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89/%E5%8F%8D%E5%B0%84_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html","/posts/java/spring/00-Spring%E7%BB%BC%E5%90%88/01.Spring%E6%A6%82%E8%BF%B0.html":"/pages/9d3091/","/posts/java/spring/00-Spring%E7%BB%BC%E5%90%88/21.SpringBoot%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1.html":"/pages/430f53/","/posts/java/spring/00-Spring%E7%BB%BC%E5%90%88/22.SpringBoot%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html":"/pages/dbf521/","/posts/java/spring/00-Spring%E7%BB%BC%E5%90%88/99.Spring%E9%9D%A2%E8%AF%95.html":"/pages/db33b0/","/posts/java/spring/00-Spring%E7%BB%BC%E5%90%88/":"/pages/9e0b67/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/01.SpringBean.html":"/pages/68097d/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/02.SpringIoC.html":"/pages/915530/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/03.Spring%E4%BE%9D%E8%B5%96%E6%9F%A5%E6%89%BE.html":"/pages/9a6f6b/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/04.Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html":"/pages/f61a1c/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/05.SpringIoC%E4%BE%9D%E8%B5%96%E6%9D%A5%E6%BA%90.html":"/pages/a5f257/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/06.SpringBean%E4%BD%9C%E7%94%A8%E5%9F%9F.html":"/pages/8289f5/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/07.SpringBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html":"/pages/4ab176/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/08.Spring%E9%85%8D%E7%BD%AE%E5%85%83%E6%95%B0%E6%8D%AE.html":"/pages/55f315/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/09.Spring%E5%BA%94%E7%94%A8%E4%B8%8A%E4%B8%8B%E6%96%87%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html":"/pages/ad472e/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/10.SpringAop.html":"/pages/53aedb/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/20.Spring%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86.html":"/pages/a1549f/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/21.Spring%E6%A0%A1%E9%AA%8C.html":"/pages/fe6aad/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/22.Spring%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.html":"/pages/267b4c/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/23.Spring%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html":"/pages/6662dc/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/24.SpringEL.html":"/pages/1f743f/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/25.Spring%E4%BA%8B%E4%BB%B6.html":"/pages/cca414/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/26.Spring%E5%9B%BD%E9%99%85%E5%8C%96.html":"/pages/b5b8ad/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/27.Spring%E6%B3%9B%E5%9E%8B%E5%A4%84%E7%90%86.html":"/pages/175cbd/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/28.Spring%E6%B3%A8%E8%A7%A3.html":"/pages/b6556f/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/29.SpringEnvironment%E6%8A%BD%E8%B1%A1.html":"/pages/03d838/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/31.SpringBoot%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html":"/pages/950e4d/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/32.SpringBoot%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A0%E8%BD%BD.html":"/pages/0fb992/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/33.SpringBoot%E4%B9%8BProfile.html":"/pages/cb598e/","/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/":"/pages/5e7c20/","/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/01.Spring%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%BA%90.html":"/pages/1b774c/","/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/02.Spring%E4%B9%8BJDBC.html":"/pages/cf19fd/","/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/03.Spring%E4%B9%8B%E4%BA%8B%E5%8A%A1.html":"/pages/128c54/","/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/04.Spring%E4%B9%8BJPA.html":"/pages/a03d7b/","/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/10.Spring%E9%9B%86%E6%88%90Mybatis.html":"/pages/88219e/","/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/20.SpringData%E7%BB%BC%E5%90%88.html":"/pages/191cdb/","/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/21.Spring%E8%AE%BF%E9%97%AERedis.html":"/pages/65e4a2/","/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/22.Spring%E8%AE%BF%E9%97%AEMongoDB.html":"/pages/db2a41/","/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/23.Spring%E8%AE%BF%E9%97%AEElasticsearch.html":"/pages/fac14c/","/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/":"/pages/b912d1/","/posts/java/spring/03-SpringWeb/01.SpringWeb%E7%BB%BC%E8%BF%B0.html":"/pages/65351b/","/posts/java/spring/03-SpringWeb/02.SpringWeb%E5%BA%94%E7%94%A8.html":"/pages/5d002f/","/posts/java/spring/03-SpringWeb/03.DispatcherServlet.html":"/pages/20287b/","/posts/java/spring/03-SpringWeb/04.Spring%E8%BF%87%E6%BB%A4%E5%99%A8.html":"/pages/4a164d/","/posts/java/spring/03-SpringWeb/05.Spring%E8%B7%A8%E5%9F%9F.html":"/pages/1d2954/","/posts/java/spring/03-SpringWeb/06.Spring%E8%A7%86%E5%9B%BE.html":"/pages/251e31/","/posts/java/spring/03-SpringWeb/21.SpringBoot%E4%B9%8B%E5%BA%94%E7%94%A8EasyUI.html":"/pages/ad0516/","/posts/java/spring/03-SpringWeb/":"/pages/e2586a/","/posts/java/spring/04-SpringIO/01.SpringBoot%E4%B9%8B%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82.html":"/pages/92add2/","/posts/java/spring/04-SpringIO/02.SpringBoot%E4%B9%8BJson.html":"/pages/676725/","/posts/java/spring/04-SpringIO/03.SpringBoot%E4%B9%8B%E9%82%AE%E4%BB%B6.html":"/pages/2586f1/","/posts/java/spring/04-SpringIO/":"/pages/56581b/","/posts/java/spring/05-Spring%E9%9B%86%E6%88%90/01.Spring%E9%9B%86%E6%88%90%E7%BC%93%E5%AD%98.html":"/pages/a311cb/","/posts/java/spring/05-Spring%E9%9B%86%E6%88%90/02.Spring%E9%9B%86%E6%88%90%E8%B0%83%E5%BA%A6%E5%99%A8.html":"/pages/a187f0/","/posts/java/spring/05-Spring%E9%9B%86%E6%88%90/03.Spring%E9%9B%86%E6%88%90Dubbo.html":"/pages/274fd7/","/posts/java/spring/05-Spring%E9%9B%86%E6%88%90/":"/pages/d6025b/","/posts/java/spring/10-Spring%E5%AE%89%E5%85%A8/01.SpringBoot%E4%B9%8B%E5%AE%89%E5%85%A8%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html":"/pages/568352/","/posts/java/spring/99-Spring%E5%85%B6%E4%BB%96/01.Spring4%E5%8D%87%E7%BA%A7.html":"/pages/752c6a/","/posts/java/spring/99-Spring%E5%85%B6%E4%BB%96/21.SpringBoot%E4%B9%8Bbanner.html":"/pages/bac2ce/","/posts/java/spring/99-Spring%E5%85%B6%E4%BB%96/22.SpringBoot%E4%B9%8BActuator.html":"/pages/c013cc/","/posts/java/spring/99-Spring%E5%85%B6%E4%BB%96/":"/pages/6bb8c1/"}'),t=Object.fromEntries([["/",{loader:()=>i.e(4470).then(i.bind(i,62744)),meta:{t:"主页",i:"home"}}],["/intro.html",{loader:()=>i.e(1531).then(i.bind(i,6924)),meta:{d:1734619579e3,v:"https://webstatic.mihoyo.com/upload/contentweb/2022/06/30/e699d7e2413ed5dfb384ee48c2b872d3_5181262111088024686.png",e:"\n<p>重生之我在提瓦特大陆当牛马</p>\n",r:{minutes:.09,words:26},t:"介绍页",i:"circle-info",y:"a"}}],["/demo/",{loader:()=>i.e(3320).then(i.bind(i,85351)),meta:{t:"主要功能与配置演示",i:"laptop-code"}}],["/demo/disable.html",{loader:()=>i.e(2756).then(i.bind(i,24139)),meta:{t:"布局与功能禁用",i:"gears",O:4}}],["/demo/encrypt.html",{loader:()=>i.e(2581).then(i.bind(i,71314)),meta:{t:"密码加密的文章",i:"lock"}}],["/demo/layout.html",{loader:()=>i.e(6216).then(i.bind(i,74087)),meta:{t:"布局",i:"object-group",O:2}}],["/demo/markdown.html",{loader:()=>i.e(8711).then(i.bind(i,36175)),meta:{t:"Markdown 展示",i:"fab fa-markdown",O:2}}],["/demo/page.html",{loader:()=>i.e(645).then(i.bind(i,95397)),meta:{t:"页面配置使用说明",i:"file",O:3}}],["/posts/markdown.html",{loader:()=>i.e(1629).then(i.bind(i,49531)),meta:{a:"xuyong",d:17347392e5,l:"2024年12月21日",c:["使用指南"],g:["页面配置","使用指南"],u:!0,v:"https://webstatic.mihoyo.com/upload/contentweb/2022/06/30/fdcbc9ef8859b7077d92ae38d925e15e_7767077963502328666.png",e:"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n",r:{minutes:2.02,words:606},t:"页面配置使用说明",i:"file",O:3,y:"a"}}],["/posts/idea/idea.html",{loader:()=>i.e(8565).then(i.bind(i,18830)),meta:{a:"xuyong",d:17347392e5,l:"2024年12月21日",c:["idea"],g:["使用指南"],u:!1,v:"https://webstatic.mihoyo.com/upload/contentweb/2022/07/04/d063646e97392638e07da24ce6b8c3cb_3567507076955258130.png",e:"<p>记录 idea 使用过程中遇到的问题</p>\n",r:{minutes:.98,words:294},t:"idea 使用方便记录",i:"file",y:"a"}}],["/posts/linux/linux.html",{loader:()=>i.e(4261).then(i.bind(i,15628)),meta:{d:16855776e5,l:"2023年6月1日",c:["linux"],g:["linux"],e:"<p>linux 命令集</p>\n",r:{minutes:29.18,words:8754},t:"linux 命令集",i:"pen-to-square",y:"a"}}],["/posts/linux/linuxWork.html",{loader:()=>i.e(4292).then(i.bind(i,60195)),meta:{d:16855776e5,l:"2023年6月1日",c:["linux"],g:["linux","tomcat","shell"],e:"<p>在工作中遇到的有关Linux的问题</p>\n",r:{minutes:2.81,words:842},t:"在工作中遇到的有关Linux的问题",i:"pen-to-square",y:"a"}}],["/posts/mysql/DDL.html",{loader:()=>i.e(779).then(i.bind(i,35486)),meta:{d:16855776e5,l:"2023年6月1日",c:["mysql"],g:["sql"],e:"<p>DDL常用命令，操作数据库和表结构</p>\n",r:{minutes:1.88,words:564},t:"DDL常用命令，操作数据库和表结构",i:"pen-to-square",y:"a"}}],["/posts/mysql/DML_DQL.html",{loader:()=>i.e(532).then(i.bind(i,29099)),meta:{d:16855776e5,l:"2023年6月1日",c:["mysql"],g:["sql"],e:"<p>DML和DQL常用命令，操作表数据</p>\n",r:{minutes:1.84,words:551},t:"DML和DQL常用命令，操作表数据",i:"pen-to-square",y:"a"}}],["/posts/mysql/mysqlBug.html",{loader:()=>i.e(2755).then(i.bind(i,57114)),meta:{d:16855776e5,l:"2023年6月1日",c:["mysql"],g:["sql"],e:"<p>mysql使用中遇到的问题记录</p>\n",r:{minutes:.53,words:160},t:"mysql使用中遇到的问题记录",i:"pen-to-square",y:"a"}}],["/posts/mysql/mysql%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B.html",{loader:()=>i.e(7219).then(i.bind(i,59e3)),meta:{d:16855776e5,l:"2023年6月1日",c:["mysql"],g:["sql"],e:"<p>DDL常用命令，操作数据库和表结构</p>\n",r:{minutes:2.33,words:698},t:"mysql 存储过程",i:"pen-to-square",y:"a"}}],["/posts/mysql/mysql%E5%AE%89%E8%A3%85.html",{loader:()=>i.e(2851).then(i.bind(i,74326)),meta:{d:16855776e5,l:"2023年6月1日",c:["mysql"],g:["sql"],e:"<p>mysql 安装指南</p>\n",r:{minutes:.96,words:287},t:"mysql 安装",i:"pen-to-square",y:"a"}}],["/posts/mysql/mysql%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F.html",{loader:()=>i.e(8122).then(i.bind(i,72388)),meta:{d:16855776e5,l:"2023年6月1日",c:["mysql"],g:["sql"],e:"<p>mysql 数据格式</p>\n",r:{minutes:1.36,words:409},t:"mysql 数据格式",i:"pen-to-square",y:"a"}}],["/posts/mysql/mysql%E7%BA%A6%E6%9D%9F.html",{loader:()=>i.e(9610).then(i.bind(i,88366)),meta:{d:16855776e5,l:"2023年6月1日",c:["mysql"],g:["sql"],e:"<p>mysql约束</p>\n",r:{minutes:7.92,words:2376},t:"mysql约束",i:"pen-to-square",y:"a"}}],["/posts/mysql/mysql%E8%87%AA%E5%AE%9A%E4%B9%89%E5%87%BD%E6%95%B0.html",{loader:()=>i.e(8587).then(i.bind(i,33636)),meta:{d:16855776e5,l:"2023年6月1日",c:["mysql"],g:["sql"],e:"<p>mysql自定义函数</p>\n",r:{minutes:3.32,words:996},t:"mysql自定义函数",i:"pen-to-square",y:"a"}}],["/posts/mysql/mysql%E8%A7%A6%E5%8F%91%E5%99%A8.html",{loader:()=>i.e(5558).then(i.bind(i,32454)),meta:{d:16855776e5,l:"2023年6月1日",c:["mysql"],g:["sql"],e:"<p>触发器</p>\n",r:{minutes:.74,words:221},t:"触发器",i:"pen-to-square",y:"a"}}],["/posts/network/ftp.html",{loader:()=>i.e(9434).then(i.bind(i,48704)),meta:{d:16859232e5,l:"2023年6月5日",c:["java"],g:["bug"],e:"<p>ftp 的一些基础内容</p>\n",r:{minutes:1.6,words:481},t:"ftp",i:"pen-to-square",y:"a"}}],["/posts/network/internet.html",{loader:()=>i.e(638).then(i.bind(i,30020)),meta:{d:16859232e5,l:"2023年6月5日",c:["network"],g:["internet"],e:"<p>计算机网络学习笔记</p>\n",r:{minutes:14.73,words:4418},t:"计算机网络",i:"pen-to-square",y:"a"}}],["/posts/redis/redis%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%AE%9E%E6%88%98%E7%AF%87.html",{loader:()=>i.e(6059).then(i.bind(i,17549)),meta:{d:16855776e5,l:"2023年6月1日",c:["redis"],g:["java","spring","springboot","redis"],e:"<p>redis 学习笔记之实战篇</p>\n",r:{minutes:47.09,words:14126},t:"redis 学习笔记之实战篇",i:"pen-to-square",y:"a"}}],["/posts/redis/redis%20%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html",{loader:()=>i.e(9793).then(i.bind(i,61419)),meta:{d:16855776e5,l:"2023年6月1日",c:["redis"],g:["java","spring","springboot","redis"],e:"<p>redis 学习笔记之快速入门</p>\n",r:{minutes:16.98,words:5093},t:"redis 学习笔记之快速入门",i:"pen-to-square",y:"a"}}],["/posts/redis/redisBUG.html",{loader:()=>i.e(5183).then(i.bind(i,69299)),meta:{d:16855776e5,l:"2023年6月1日",c:["redis"],g:["java","spring","springboot","redis"],e:"<p>redis 使用过程中的bug记录</p>\n",r:{minutes:1.42,words:427},t:"redis 使用过程中的bug记录",i:"pen-to-square",y:"a"}}],["/posts/shell/shell.html",{loader:()=>i.e(1669).then(i.bind(i,73730)),meta:{d:16859232e5,l:"2023年6月5日",c:["windows"],g:["script","shell"],e:"<p>入门 shell 脚本的基础知识</p>\n",r:{minutes:34.53,words:10358},t:"shell 基础知识",i:"pen-to-square",y:"a"}}],["/posts/shell/shellWork.html",{loader:()=>i.e(8628).then(i.bind(i,81709)),meta:{d:17155584e5,l:"2024年5月13日",c:["windows"],g:["script","shell"],e:"<p>工作中遇到有关 shell 脚本的情景和处理记录</p>\n",r:{minutes:.69,words:208},t:"工作中遇到的 shell",i:"pen-to-square",y:"a"}}],["/posts/windows/workcondition.html",{loader:()=>i.e(486).then(i.bind(i,75994)),meta:{d:16855776e5,l:"2023年6月1日",c:["java"],g:["java","spring","springboot","shell"],e:"<p>Windows 工作中遇到的问题</p>\n",r:{minutes:2.66,words:797},t:"Windows 工作中遇到的问题",i:"pen-to-square",y:"a"}}],["/posts/java/basic/1.object-oriented-programming.html",{loader:()=>i.e(6233).then(i.bind(i,92717)),meta:{d:1734912e6,l:"2024年12月23日",c:["java"],g:["java-basic"],v:"https://webstatic.mihoyo.com/upload/contentweb/2022/06/30/4c4b8babc68ffedce9bd5766b60e1ae5_8781849729625946129.png",e:"<p>java 面向对象基本信息介绍</p>\n",r:{minutes:10.38,words:3115},t:"什么是面向对象编程",i:"pen-to-square",O:-1,y:"a"}}],["/posts/java/basic/2.three-features.html",{loader:()=>i.e(1088).then(i.bind(i,66658)),meta:{d:17349984e5,l:"2024年12月24日",c:["java"],g:["java-basic"],v:"https://webstatic.mihoyo.com/upload/contentweb/2023/02/06/df329c62acad08953832134777166e57_5667154156652123154.png",e:"<p>java 封装、继承、多态介绍</p>\n",r:{minutes:10.28,words:3083},t:"面向对象的三大基本特征",i:"pen-to-square",O:-1,y:"a"}}],["/posts/java/basic/3.java-basic.html",{loader:()=>i.e(7462).then(i.bind(i,41909)),meta:{d:17352576e5,l:"2024年12月27日",c:["java"],g:["java-basic"],v:"https://webstatic.mihoyo.com/upload/contentweb/2022/06/30/96297a7f2679bf0dce4fb9d11120b882_7601596078607350699.png",e:"<p>java 基本类型、String、关键字等内容介绍</p>\n",r:{minutes:6.86,words:2059},t:"java 基础知识",i:"pen-to-square",y:"a"}}],["/posts/java/basic/4.collection.html",{loader:()=>i.e(8653).then(i.bind(i,96534)),meta:{d:17352576e5,l:"2024年12月27日",c:["java"],g:["java-basic"],v:"https://uploadstatic.mihoyo.com/contentweb/20200312/2020031219451784892.png",e:"<p>java 集合相关内容</p>\n",r:{minutes:6.87,words:2060},t:"java 集合",i:"pen-to-square",y:"a"}}],["/posts/java/basic/comparator.html",{loader:()=>i.e(7352).then(i.bind(i,89030)),meta:{d:17343936e5,l:"2024年12月17日",c:["java"],g:["java-basic"],e:"<p>Comparator 的一些基本使用</p>\n",r:{minutes:2.57,words:770},t:"comparator 基本使用",i:"pen-to-square",O:-1,y:"a"}}],["/posts/java/basic/ioStream.html",{loader:()=>i.e(1816).then(i.bind(i,87982)),meta:{d:16859232e5,l:"2023年6月5日",c:["java"],g:["java-basic"],e:"<p>IO 流的一些基本使用，后续记得完善</p>\n",r:{minutes:.25,words:76},t:"io 流的基本使用",i:"pen-to-square",y:"a"}}],["/posts/java/basic/java8Stream.html",{loader:()=>i.e(8810).then(i.bind(i,93838)),meta:{d:16857504e5,l:"2023年6月3日",c:["java"],g:["java-basic"],e:"<p>java8 stream 梳理</p>\n",r:{minutes:17.43,words:5228},t:"java8 stream",i:"pen-to-square",y:"a"}}],["/posts/java/basic/jottings.html",{loader:()=>i.e(2222).then(i.bind(i,65432)),meta:{d:16858368e5,l:"2023年6月4日",c:["java"],g:["java-basic"],e:"<p>java 零碎知识点记录</p>\n",r:{minutes:2.55,words:764},t:"java 零碎知识点",i:"pen-to-square",y:"a"}}],["/posts/java/basic/multithreading.html",{loader:()=>i.e(5763).then(i.bind(i,98773)),meta:{d:1685664e6,l:"2023年6月2日",c:["java"],g:["java-basic"],e:"<p>多线程基础</p>\n",r:{minutes:13.31,words:3993},t:"多线程基础",i:"pen-to-square",O:-1,y:"a"}}],["/posts/java/basic/regularExpression.html",{loader:()=>i.e(3512).then(i.bind(i,68589)),meta:{d:17343936e5,l:"2024年12月17日",c:["java"],g:["java-basic"],e:"<p>java 正则表达式的基础使用</p>\n",r:{minutes:5.53,words:1658},t:"java 使用正则表达式",i:"pen-to-square",y:"a"}}],["/posts/java/bug/bug.html",{loader:()=>i.e(1796).then(i.bind(i,75441)),meta:{d:16859232e5,l:"2023年6月5日",c:["java"],g:["bug"],e:"<p>记录遇见的 Java 相关疑难杂症的 bug</p>\n",r:{minutes:.3,words:89},t:"java bug 合集",i:"pen-to-square",y:"a"}}],["/posts/java/dependence/docx4j.html",{loader:()=>i.e(4337).then(i.bind(i,45574)),meta:{d:17343936e5,l:"2024年12月17日",c:["dependence"],g:["java"],e:"<p>docx4j 的一些基本使用</p>\n",r:{minutes:4.43,words:1330},t:"docx4j 基本使用",i:"pen-to-square",y:"a"}}],["/posts/java/dependence/log.html",{loader:()=>i.e(7119).then(i.bind(i,34513)),meta:{d:16855776e5,l:"2023年6月1日",c:["dependence"],g:["java","spring","springboot","logback"],e:"<p>Java 有关log的第三方依赖的使用</p>\n",r:{minutes:5.86,words:1758},t:"Java 有关log的第三方依赖的使用",i:"pen-to-square",y:"a"}}],["/posts/java/dependence/maven.html",{loader:()=>i.e(6574).then(i.bind(i,40565)),meta:{d:16855776e5,l:"2023年6月1日",c:["dependence"],g:["java","spring","springboot","maven"],e:"<p>maven的基本使用</p>\n",r:{minutes:9.77,words:2931},t:"有关maven的使用",i:"pen-to-square",y:"a"}}],["/posts/java/dependence/mybatis.html",{loader:()=>i.e(5304).then(i.bind(i,55831)),meta:{d:16855776e5,l:"2023年6月1日",c:["dependence"],g:["java","spring","springboot","mybatis"],e:"<p>mybatis 的基本使用</p>\n",r:{minutes:21.93,words:6580},t:"mybatis 的基础知识",i:"pen-to-square",y:"a"}}],["/posts/java/dependence/netty.html",{loader:()=>i.e(2709).then(i.bind(i,93595)),meta:{d:16855776e5,l:"2023年6月1日",c:["dependence"],g:["java","spring","springboot","netty"],e:"<p>netty 学习</p>\n",r:{minutes:1.15,words:344},t:"netty 学习",i:"pen-to-square",y:"a"}}],["/posts/java/netty/Netty01-nio.html",{loader:()=>i.e(1100).then(i.bind(i,65497)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:17217792e5,l:"2024年7月24日",c:["java"],g:["netty","nio"],e:"<p>non-blocking io 非阻塞 IO</p>\n",r:{minutes:32.01,words:9603},t:"NIO 基础",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/netty/Netty02-%E5%85%A5%E9%97%A8.html",{loader:()=>i.e(2022).then(i.bind(i,70471)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:17217792e5,l:"2024年7月24日",c:["java"],g:["netty"],e:"<p>Netty 入门</p>\n",r:{minutes:30.61,words:9183},t:"Netty 入门",i:"pen-to-square",O:2,y:"a"}}],["/posts/java/netty/Netty03-%E8%BF%9B%E9%98%B6.html",{loader:()=>i.e(4051).then(i.bind(i,49242)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:17217792e5,l:"2024年7月24日",c:["java"],g:["netty"],e:"<p>Netty 进阶</p>\n",r:{minutes:29.55,words:8865},t:"Netty 进阶",i:"pen-to-square",O:3,y:"a"}}],["/posts/java/netty/Netty04-%E4%BC%98%E5%8C%96%E4%B8%8E%E6%BA%90%E7%A0%81.html",{loader:()=>i.e(3222).then(i.bind(i,98228)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:17217792e5,l:"2024年7月24日",c:["java"],g:["netty"],e:"<p>优化与源码</p>\n",r:{minutes:21.53,words:6459},t:"优化与源码",i:"pen-to-square",O:4,y:"a"}}],["/posts/java/spring/spring.html",{loader:()=>i.e(3516).then(i.bind(i,6634)),meta:{d:16855776e5,l:"2023年6月1日",c:["spring"],g:["java","spring","springboot"],e:"<p>上帝赋予java生命，spring赋予java生命的延续</p>\n",r:{minutes:8.54,words:2562},t:"spring 学习笔记",i:"pen-to-square",y:"a"}}],["/posts/java/spring/spring%E9%9D%A2%E8%AF%95%E9%A2%98.html",{loader:()=>i.e(3117).then(i.bind(i,64728)),meta:{d:16855776e5,l:"2023年6月1日",c:["java"],g:["java","spring","springboot"],e:"<p>上帝赋予java生命，spring赋予java生命的延续</p>\n",r:{minutes:.73,words:219},t:"spring面试题",i:"pen-to-square",y:"a"}}],["/posts/java/springboot/workcondition.html",{loader:()=>i.e(5227).then(i.bind(i,57119)),meta:{d:16855776e5,l:"2023年6月1日",c:["java"],g:["java","spring","springboot"],e:"<p>上帝赋予java生命，spring赋予java生命的延续</p>\n",r:{minutes:20.72,words:6215},t:"springboot 工作中遇到的问题",i:"pen-to-square",y:"a"}}],["/posts/java/web/HTTP_Tomcat_Servlet.html",{loader:()=>i.e(3821).then(i.bind(i,14485)),meta:{d:16855776e5,l:"2023年6月1日",c:["java"],g:["javaweb","http","tomcat","servlet"],e:"<p>HTTP tomcat Servlet 基础知识</p>\n",r:{minutes:38.71,words:11612},t:"HTTP tomcat Servlet 基础知识",i:"pen-to-square",y:"a"}}],["/posts/java/web/Request_Response.html",{loader:()=>i.e(9861).then(i.bind(i,8994)),meta:{d:16855776e5,l:"2023年6月1日",c:["java"],g:["javaweb","Request","Response"],e:"<p>Request&amp;Response 基础知识</p>\n",r:{minutes:39.2,words:11761},t:"Request&Response 的基本使用",i:"pen-to-square",y:"a"}}],["/posts/java/web/jdbc.html",{loader:()=>i.e(57).then(i.bind(i,4634)),meta:{d:16855776e5,l:"2023年6月1日",c:["java"],g:["javaweb","jdbc"],e:"<p>jdbc 基础使用</p>\n",r:{minutes:21.81,words:6543},t:"jdbc 的基本使用",i:"pen-to-square",y:"a"}}],["/posts/python/django/djangoWork.html",{loader:()=>i.e(6855).then(i.bind(i,12215)),meta:{d:17169408e5,l:"2024年5月29日",c:["python"],g:["djgango"],e:"<p>在工作中遇到了 django  框架，记录一些使用过程中遇到的问题</p>\n",r:{minutes:2.18,words:655},t:"django 使用过程中发生的问题",i:"pen-to-square",y:"a"}}],["/posts/java/basic/01-Java%E5%85%A5%E9%97%A8/01-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html",{loader:()=>i.e(1664).then(i.bind(i,82832)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>Java入门介绍，编写hello world</p>\n",r:{minutes:10.55,words:3165},t:"Java入门",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/02-Java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/02-Java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95.html",{loader:()=>i.e(8906).then(i.bind(i,61025)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>Java基础概念学习</p>\n",r:{minutes:22.64,words:6791},t:"Java基础概念",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/03-Java%E8%BF%90%E7%AE%97%E7%AC%A6/03%E7%AC%94%E8%AE%B0.html",{loader:()=>i.e(4417).then(i.bind(i,26525)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>运算符和表达式记录</p>\n",r:{minutes:14.82,words:4447},t:"运算符和表达式",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/04-%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/day04-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A5.html",{loader:()=>i.e(5404).then(i.bind(i,75772)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>流程控制语句</p>\n",r:{minutes:12.62,words:3785},t:"流程控制语句",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/05-%E5%BE%AA%E7%8E%AF%E9%AB%98%E7%BA%A7%E5%92%8C%E6%95%B0%E7%BB%84/%E5%BE%AA%E7%8E%AF%E9%AB%98%E7%BA%A7.html",{loader:()=>i.e(2741).then(i.bind(i,56605)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>循环高级</p>\n",r:{minutes:6.78,words:2034},t:"循环高级",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/05-%E5%BE%AA%E7%8E%AF%E9%AB%98%E7%BA%A7%E5%92%8C%E6%95%B0%E7%BB%84/%E6%95%B0%E7%BB%84.html",{loader:()=>i.e(1255).then(i.bind(i,5725)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>数组</p>\n",r:{minutes:11.52,words:3455},t:"数组",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/06-%E6%96%B9%E6%B3%95/%E6%96%B9%E6%B3%95.html",{loader:()=>i.e(3266).then(i.bind(i,54768)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>方法概述</p>\n",r:{minutes:12.48,words:3745},t:"方法概述",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/07-%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html",{loader:()=>i.e(843).then(i.bind(i,33838)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>综合练习</p>\n",r:{minutes:14.22,words:4267},t:"综合练习",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/08-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/day08-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1.html",{loader:()=>i.e(4867).then(i.bind(i,75470)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>类和对象</p>\n",r:{minutes:9.69,words:2908},t:"类和对象",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/09-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E8%AE%AD%E7%BB%83/%E6%89%A9%E5%B1%95%EF%BC%9A%E9%94%AE%E7%9B%98%E5%BD%95%E5%85%A5%E7%AC%94%E8%AE%B0.html",{loader:()=>i.e(1524).then(i.bind(i,9313)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>扩展：键盘录入笔记</p>\n",r:{minutes:3.97,words:1192},t:"扩展：键盘录入笔记",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/09-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E8%AE%AD%E7%BB%83/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E8%AE%AD%E7%BB%83%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html",{loader:()=>i.e(3870).then(i.bind(i,75761)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>面向对象综合训练综合练习</p>\n",r:{minutes:18.04,words:5413},t:"面向对象综合训练综合练习",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/10-%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%B8%B8%E7%94%A8API.html",{loader:()=>i.e(8238).then(i.bind(i,73913)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>常用API</p>\n",r:{minutes:15.69,words:4708},t:"常用API",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/11-%E9%9B%86%E5%90%88_%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/ArrayList_%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html",{loader:()=>i.e(689).then(i.bind(i,95292)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>ArrayList&amp;学生管理系统</p>\n",r:{minutes:10.94,words:3283},t:"ArrayList&学生管理系统",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88static_%E7%BB%A7%E6%89%BF%EF%BC%89/day13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6.html",{loader:()=>i.e(3336).then(i.bind(i,16982)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>面向对象进阶部分学习方法</p>\n",r:{minutes:24.27,words:7282},t:"面向对象进阶部分学习方法",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/14-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E5%A4%9A%E6%80%81_%E5%8C%85_final_%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6_%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%89/day14%E7%AC%94%E8%AE%B0.html",{loader:()=>i.e(9537).then(i.bind(i,78744)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>多态</p>\n",r:{minutes:15.02,words:4507},t:"多态",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB_%E6%8E%A5%E5%8F%A3_%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%89/day15%E7%AC%94%E8%AE%B0.html",{loader:()=>i.e(9094).then(i.bind(i,46259)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>抽象类</p>\n",r:{minutes:18.32,words:5497},t:"抽象类",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/16-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%8A%EF%BC%89/day16-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%8A%EF%BC%89.html",{loader:()=>i.e(8373).then(i.bind(i,25099)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>day16-面向对象综合练习（上）</p>\n",r:{minutes:13.04,words:3913},t:"day16-面向对象综合练习（上）",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/17-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%8B%EF%BC%89/day17-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%8B%EF%BC%89.html",{loader:()=>i.e(2077).then(i.bind(i,35599)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>day16-面向对象综合练习（下）</p>\n",r:{minutes:19.75,words:5925},t:"day16-面向对象综合练习（下）",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/18-API%EF%BC%88%E5%B8%B8%E8%A7%81API%EF%BC%8C%E5%AF%B9%E8%B1%A1%E5%85%8B%E9%9A%86%EF%BC%89/API.html",{loader:()=>i.e(6636).then(i.bind(i,27933)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>常见API，对象克隆</p>\n",r:{minutes:39.65,words:11896},t:"常见API，对象克隆",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/19-API%EF%BC%88%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",{loader:()=>i.e(1361).then(i.bind(i,23839)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>正则表达式</p>\n",r:{minutes:22.4,words:6719},t:"正则表达式",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/20-API%EF%BC%88%E6%97%B6%E9%97%B4%EF%BC%8C%E5%8C%85%E8%A3%85%E7%B1%BB%EF%BC%8C%E7%BB%83%E4%B9%A0%EF%BC%89/API.html",{loader:()=>i.e(743).then(i.bind(i,41897)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>常用API</p>\n",r:{minutes:23.9,words:7169},t:"常用API",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/21-API%EF%BC%88%E7%AE%97%E6%B3%95%EF%BC%8Clambda%EF%BC%8C%E7%BB%83%E4%B9%A0%EF%BC%89/%E7%AE%97%E6%B3%95.html",{loader:()=>i.e(7848).then(i.bind(i,15853)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>常见的七种查找算法：</p>\n",r:{minutes:19.57,words:5871},t:"常见的七种查找算法",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/22-%E9%9B%86%E5%90%88%EF%BC%88List%E9%9B%86%E5%90%88%EF%BC%89/%E9%9B%86%E5%90%8801.html",{loader:()=>i.e(9740).then(i.bind(i,93939)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>Collection集合</p>\n",r:{minutes:11.8,words:3539},t:"Collection集合",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/23-%E9%9B%86%E5%90%88%EF%BC%88%E6%B3%9B%E5%9E%8B_Set_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/%E9%9B%86%E5%90%8802.html",{loader:()=>i.e(7509).then(i.bind(i,78110)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>泛型</p>\n",r:{minutes:11.69,words:3508},t:"泛型",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/24-%E9%9B%86%E5%90%88%EF%BC%88Map_%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0_%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%89/%E9%9B%86%E5%90%8803.html",{loader:()=>i.e(1264).then(i.bind(i,34831)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>Map集合</p>\n",r:{minutes:6.37,words:1910},t:"Map集合",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/25-%E9%98%B6%E6%AE%B5%E9%A1%B9%E7%9B%AE%EF%BC%88%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0_doudizhu%E6%B8%B8%E6%88%8F%EF%BC%89/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0_%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html",{loader:()=>i.e(9920).then(i.bind(i,77626)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>可变参数&amp;综合练习</p>\n",r:{minutes:10.91,words:3273},t:"可变参数&综合练习",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/26-%E9%9B%86%E5%90%88%EF%BC%88Stream%E6%B5%81_%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%EF%BC%89/stream%E6%B5%81%E5%92%8C%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8.html",{loader:()=>i.e(2790).then(i.bind(i,55364)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>stream流和方法引用</p>\n",r:{minutes:17.44,words:5233},t:"stream流和方法引用",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/27-IO(%E5%BC%82%E5%B8%B8_File_%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89/IO(%E5%BC%82%E5%B8%B8_File_%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89.html",{loader:()=>i.e(7343).then(i.bind(i,42136)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>IO(异常&amp;File&amp;综合案例）</p>\n",r:{minutes:21.44,words:6431},t:"IO(异常&File&综合案例）",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/28-IO%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81_%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89/IO%E6%B5%81%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81_%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89.html",{loader:()=>i.e(9227).then(i.bind(i,72275)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>IO流（字节流&amp;字符流）</p>\n",r:{minutes:21.1,words:6330},t:"IO流（字节流&字符流）",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/29-IO%EF%BC%88%E5%85%B6%E4%BB%96%E6%B5%81%EF%BC%89/IO%E6%B5%81%EF%BC%88%E5%85%B6%E4%BB%96%E6%B5%81%EF%BC%89.html",{loader:()=>i.e(7078).then(i.bind(i,94095)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>IO流（其他流）</p>\n",r:{minutes:23.73,words:7120},t:"IO流（其他流）",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/30-%E5%A4%9A%E7%BA%BF%E7%A8%8B/%E5%A4%9A%E7%BA%BF%E7%A8%8B01.html",{loader:()=>i.e(7378).then(i.bind(i,27970)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>实现多线程</p>\n",r:{minutes:20.83,words:6249},t:"实现多线程",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/31-%E5%A4%9A%E7%BA%BF%E7%A8%8B_juc/%E5%A4%9A%E7%BA%BF%E7%A8%8B02.html",{loader:()=>i.e(2613).then(i.bind(i,29737)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>线程池</p>\n",r:{minutes:34.15,words:10245},t:"线程池",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/32-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B.html",{loader:()=>i.e(2193).then(i.bind(i,71946)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>网络编程入门</p>\n",r:{minutes:22.51,words:6753},t:"网络编程入门",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/33-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E5%8F%8D%E5%B0%84%EF%BC%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89/%E5%8F%8D%E5%B0%84_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html",{loader:()=>i.e(9484).then(i.bind(i,28492)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>反射&amp;动态代理</p>\n",r:{minutes:19.3,words:5791},t:"反射&动态代理",i:"pen-to-square",O:1,y:"a"}}],["/pages/9d3091/",{loader:()=>i.e(6026).then(i.bind(i,26057)),meta:{d:1574419562e3,l:"2019年11月22日",c:["Java","框架","Spring","Spring综合"],g:["Java","框架","Spring"],e:"\n<h2>Spring Framework 简介</h2>\n<p>Spring Framework 是最受欢迎的企业级 Java 应用程序开发框架。用于构建企业级应用的轻量级、一站式解决方案。</p>\n<p>当谈论到大小和透明度时， Spring 是轻量级的。 Spring 框架的基础版本是在 2 MB 左右的。</p>\n<p>Spring 框架的核心特性可以用于开发任何 Java 应用程序，但是在 Java EE 平台上构建 web 应用程序是需要扩展的。 Spring 框架的目标是使 J2EE 开发变得更容易使用，通过启用基于 POJO 编程模型来促进良好的编程实践。</p>\n<p>Spring Framework 设计理念如下：</p>",r:{minutes:9.58,words:2875},t:"Spring Framework 综述",y:"a"}}],["/pages/430f53/",{loader:()=>i.e(1909).then(i.bind(i,63511)),meta:{d:1597215686e3,l:"2020年8月12日",c:["Java","框架","Spring","Spring综合"],g:["Java","框架","Spring","SpringBoot"],e:"\n<blockquote>\n<ol>\n<li>预警：本文非常长，建议先 mark 后看，也许是最后一次写这么长的文章</li>\n<li>说明：前面有 4 个小节关于 Spring 的基础知识，分别是：IOC 容器、JavaConfig、事件监听、SpringFactoriesLoader 详解，它们占据了本文的大部分内容，虽然它们之间可能没有太多的联系，但这些知识对于理解 Spring Boot 的核心原理至关重要，如果你对 Spring 框架烂熟于心，完全可以跳过这 4 个小节。正是因为这个系列的文章是由这些看似不相关的知识点组成，因此取名知识清单。</li>\n</ol>\n</blockquote>",r:{minutes:37.48,words:11245},t:"SpringBoot 知识图谱",y:"a"}}],["/pages/dbf521/",{loader:()=>i.e(4264).then(i.bind(i,66576)),meta:{d:1597215686e3,l:"2020年8月12日",c:["Java","框架","Spring","Spring综合"],g:["Java","框架","Spring","SpringBoot"],e:'\n<p>SpringBoot 为我们做的自动配置，确实方便快捷，但一直搞不明白它的内部启动原理，这次就来一步步解开 SpringBoot 的神秘面纱，让它不再神秘。</p>\n<figure><img src="https:////upload-images.jianshu.io/upload_images/6430208-ebcb376f96103703.png?imageMogr2/auto-orient/strip|imageView2/2/w/1200/format/webp" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',r:{minutes:6.26,words:1878},t:"SpringBoot 基本原理",y:"a"}}],["/pages/db33b0/",{loader:()=>i.e(9084).then(i.bind(i,26763)),meta:{d:1533231212e3,l:"2018年8月2日",c:["Java","框架","Spring","Spring综合"],g:["Java","框架","Spring","面试"],e:"\n<h2>综合篇</h2>\n<h3>不同版本的 Spring Framework 有哪些主要功能？</h3>\n<table>\n<thead>\n<tr>\n<th>Version</th>\n<th>Feature</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Spring 2.5</td>\n<td>发布于 2007 年。这是第一个支持注解的版本。</td>\n</tr>\n<tr>\n<td>Spring 3.0</td>\n<td>发布于 2009 年。它完全利用了 Java5 中的改进，并为 JEE6 提供了支持。</td>\n</tr>\n<tr>\n<td>Spring 4.0</td>\n<td>发布于 2013 年。这是第一个完全支持 JAVA8 的版本。</td>\n</tr>\n</tbody>\n</table>",r:{minutes:20.87,words:6260},t:"Spring 面试",y:"a"}}],["/pages/9e0b67/",{loader:()=>i.e(9797).then(i.bind(i,50729)),meta:{d:1582760886e3,l:"2020年2月26日",c:["Java","框架","Spring","Spring综合"],g:["Java","框架","Spring","SpringBoot"],e:'\n<h2>📖 内容</h2>\n<ul>\n<li><a href="/blog/posts/java/spring/00-Spring%E7%BB%BC%E5%90%88/01.Spring%E6%A6%82%E8%BF%B0.html" target="_blank">Spring 概述</a></li>\n<li><a href="/blog/posts/java/spring/00-Spring%E7%BB%BC%E5%90%88/21.SpringBoot%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1.html" target="_blank">SpringBoot 知识图谱</a></li>\n<li><a href="/blog/posts/java/spring/00-Spring%E7%BB%BC%E5%90%88/22.SpringBoot%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html" target="_blank">SpringBoot 基本原理</a></li>\n<li><a href="/blog/posts/java/spring/00-Spring%E7%BB%BC%E5%90%88/99.Spring%E9%9D%A2%E8%AF%95.html" target="_blank">Spring 面试</a></li>\n</ul>',r:{minutes:.48,words:144},t:"Spring 综述",y:"a"}}],["/pages/68097d/",{loader:()=>i.e(1804).then(i.bind(i,39763)),meta:{d:1639163742e3,l:"2021年12月10日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","Bean","BeanDefinition"],e:"\n<p>在 Spring 中，构成应用程序主体由 Spring IoC 容器管理的对象称为 Bean。<strong>Bean 是由 Spring IoC 容器实例化、装配和管理的对象</strong>。 Bean 以及它们之间的依赖关系反映在容器使用的配置元数据中。</p>\n<h2>Spring Bean 定义</h2>\n<h3>BeanDefinition</h3>\n<p>Spring IoC 容器本身，并不能识别配置的元数据。为此，要将这些配置信息转为 Spring 能识别的格式——<code>BeanDefinition</code> 对象。</p>\n<p><strong><code>BeanDefinition</code> 是 Spring 中定义 Bean 的配置元信息接口</strong>，它包含：</p>",r:{minutes:7.16,words:2147},t:"Spring Bean",y:"a"}}],["/pages/915530/",{loader:()=>i.e(4441).then(i.bind(i,52957)),meta:{d:159880357e4,l:"2020年8月30日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","IOC"],e:"\n<h2>IoC 简介</h2>\n<h3>IoC 是什么</h3>\n<p><strong>IoC</strong> 即<strong>控制反转</strong>（Inversion of Control，缩写为 IoC）。IoC 又称为<strong>依赖倒置原则</strong>（设计模式六大原则之一），它的要点在于：<strong>程序要依赖于抽象接口，不要依赖于具体实现</strong>。它的作用就是<strong>用于降低代码间的耦合度</strong>。</p>\n<p>IoC 的实现方式有两种：</p>\n<ul>\n<li><strong>依赖注入</strong>（Dependency Injection，简称 DI）：不通过 <code>new()</code> 的方式在类内部创建依赖类对象，而是将依赖的类对象在外部创建好之后，通过构造函数、函数参数等方式传递（或注入）给类使用。</li>\n<li><strong>依赖查找</strong>（Dependency Lookup）：容器中的受控对象通过容器的 API 来查找自己所依赖的资源和协作对象。</li>\n</ul>",r:{minutes:23.88,words:7165},t:"Spring IoC",y:"a"}}],["/pages/9a6f6b/",{loader:()=>i.e(6724).then(i.bind(i,90468)),meta:{d:159880357e4,l:"2020年8月30日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","IOC","依赖查找"],e:"\n<p><strong>依赖查找是主动或手动的依赖查找方式，通常需要依赖容器或标准 API 实现</strong>。</p>\n<p>IoC 依赖查找大致可以分为以下几类：</p>\n<ul>\n<li>根据 Bean 名称查找</li>\n<li>根据 Bean 类型查找</li>\n<li>根据 Bean 名称 + 类型查找</li>\n<li>根据 Java 注解查找</li>\n</ul>\n<p>此外，根据查找的 Bean 对象是单一或集合对象，是否需要延迟查找等特定常见，有相应不同的 API。</p>\n<h2>单一类型依赖查找</h2>\n<p>单一类型依赖查找接口- <code>BeanFactory</code></p>",r:{minutes:3.05,words:915},t:"Spring 依赖查找",y:"a"}}],["/pages/f61a1c/",{loader:()=>i.e(832).then(i.bind(i,72411)),meta:{d:159880357e4,l:"2020年8月30日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","IOC","依赖注入"],e:"\n<p>DI，是 Dependency Injection 的缩写，即依赖注入。依赖注入是 IoC 的最常见形式。依赖注入是手动或自动绑定的方式，无需依赖特定的容器或 API。</p>\n<p>依赖注入 (Dependency Injection，简称 DI) 是一个过程，其中对象仅通过构造函数参数、工厂方法的参数或对象实例在构造或从工厂方法返回。然后容器在创建 bean 时注入这些依赖项。这个过程基本上是 bean 本身的逆过程（因此得名，控制反转），它通过使用类的直接构造或服务定位器模式自行控制其依赖项的实例化或位置。</p>\n<p>使用 DI，代码更干净，当对象具有依赖关系时，解耦更有效。对象不查找其依赖项，也不知道依赖项的位置或类别。结果，您的类变得更容易测试，特别是当依赖关系在接口或抽象基类上时，它们允许在单元测试中使用存根或模拟实现。</p>",r:{minutes:9.77,words:2931},t:"Spring 依赖注入",y:"a"}}],["/pages/a5f257/",{loader:()=>i.e(9136).then(i.bind(i,33121)),meta:{d:1671568431e3,l:"2022年12月20日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","IOC","依赖注入"],e:'\n<h2>依赖查找的来源</h2>\n<p>查找来源</p>\n<table>\n<thead>\n<tr>\n<th>来源</th>\n<th>配置元数据</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Spring BeanDefinition</td>\n<td><code>&lt;bean id ="user" class="xxx.xxx.User"&gt;</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>@Bean public User user() {...}</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>BeanDefinitionBuilder</code></td>\n</tr>\n<tr>\n<td>单例对象</td>\n<td>API 实现</td>\n</tr>\n</tbody>\n</table>',r:{minutes:2.33,words:698},t:"Spring IoC 依赖来源",y:"a"}}],["/pages/8289f5/",{loader:()=>i.e(9070).then(i.bind(i,63019)),meta:{d:167162292e4,l:"2022年12月21日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","Bean"],e:"\n<h2>Spring Bean 作用域</h2>\n<table>\n<thead>\n<tr>\n<th>来源</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>singleton</td>\n<td>默认 Spring Bean 作用域，一个 BeanFactory 有且仅有一个实例</td>\n</tr>\n<tr>\n<td>prototype</td>\n<td>原型作用域，每次依赖查找和依赖注入生成新 Bean 对象</td>\n</tr>\n<tr>\n<td>request</td>\n<td>将 Spring Bean 存储在 ServletRequest 上下文中</td>\n</tr>\n<tr>\n<td>session</td>\n<td>将 Spring Bean 存储在 HttpSession 中</td>\n</tr>\n<tr>\n<td>application</td>\n<td>将 Spring Bean 存储在 ServletContext 中</td>\n</tr>\n</tbody>\n</table>",r:{minutes:1.34,words:403},t:"Spring Bean 作用域",y:"a"}}],["/pages/4ab176/",{loader:()=>i.e(6149).then(i.bind(i,73057)),meta:{d:1671650761e3,l:"2022年12月21日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","Bean"],e:"\n<h2>Spring Bean 元信息配置阶段</h2>\n<p>BeanDefinition 配置</p>\n<ul>\n<li>面向资源\n<ul>\n<li>XML 配置</li>\n<li>Properties 资源配置</li>\n</ul>\n</li>\n<li>面向注解</li>\n<li>面向 API</li>\n</ul>\n<h2>Spring Bean 元信息解析阶段</h2>\n<ul>\n<li>面向资源 BeanDefinition 解析\n<ul>\n<li>BeanDefinitionReader</li>\n<li>XML 解析器 - BeanDefinitionParser</li>\n</ul>\n</li>\n<li>面向注解 BeanDefinition 解析\n<ul>\n<li>AnnotatedBeanDefinitionReader</li>\n</ul>\n</li>\n</ul>",r:{minutes:2.62,words:787},t:"Spring Bean 生命周期",y:"a"}}],["/pages/55f315/",{loader:()=>i.e(7249).then(i.bind(i,98693)),meta:{d:1671652188e3,l:"2022年12月21日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","Bean"],e:"\n<h2>Spring 配置元信息</h2>\n<ul>\n<li>Spring Bean 配置元信息 - BeanDefinition</li>\n<li>Spring Bean 属性元信息 - PropertyValues</li>\n<li>Spring 容器配置元信息</li>\n<li>Spring 外部化配置元信息 - PropertySource</li>\n<li>Spring Profile 元信息 - @Profile</li>\n</ul>\n<h2>Spring Bean 配置元信息</h2>\n<p>Bean 配置元信息 - BeanDefinition</p>\n<ul>\n<li>GenericBeanDefinition：通用型 BeanDefinition</li>\n<li>RootBeanDefinition：无 Parent 的 BeanDefinition 或者合并后 BeanDefinition</li>\n<li>AnnotatedBeanDefinition：注解标注的 BeanDefinition</li>\n</ul>",r:{minutes:5.73,words:1719},t:"Spring 配置元数据",y:"a"}}],["/pages/ad472e/",{loader:()=>i.e(2075).then(i.bind(i,93739)),meta:{d:1671789489e3,l:"2022年12月23日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring"],e:"\n<h2>Spring 应用上下文启动准备阶段</h2>\n<p>AbstractApplicationContext#prepareRefresh() 方法</p>\n<ul>\n<li>启动时间 - startupDate</li>\n<li>状态标识 - closed(false)、active(true)</li>\n<li>初始化 PropertySources - initPropertySources()</li>\n<li>检验 Environment 中必须属性</li>\n<li>初始化事件监听器集合</li>\n<li>初始化早期 Spring 事件集合</li>\n</ul>\n<h2>BeanFactory 创建阶段</h2>",r:{minutes:2.77,words:831},t:"Spring 应用上下文生命周期",y:"a"}}],["/pages/53aedb/",{loader:()=>i.e(4882).then(i.bind(i,60915)),meta:{d:1582760867e3,l:"2020年2月26日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","AOP"],e:"\n<h2>AOP 概念</h2>\n<h3>什么是 AOP</h3>\n<p>AOP(Aspect-Oriented Programming，即 <strong>面向切面编程</strong>)与 OOP( Object-Oriented Programming，面向对象编程) 相辅相成，提供了与 OOP 不同的抽象软件结构的视角。</p>\n<p>在 OOP 中，我们以类(class)作为我们的基本单元，而 AOP 中的基本单元是 <strong>Aspect(切面)</strong></p>\n<h3>术语</h3>\n<h4>Aspect(切面)</h4>\n<p><code>aspect</code> 由 <code>pointcount</code> 和 <code>advice</code> 组成, 它既包含了横切逻辑的定义, 也包括了连接点的定义. Spring AOP 就是负责实施切面的框架, 它将切面所定义的横切逻辑织入到切面所指定的连接点中.<br>\nAOP 的工作重心在于如何将增强织入目标对象的连接点上, 这里包含两个工作:</p>",r:{minutes:13.7,words:4109},t:"Spring AOP",y:"a"}}],["/pages/a1549f/",{loader:()=>i.e(2754).then(i.bind(i,74134)),meta:{d:1567626401e3,l:"2019年9月4日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","Resource"],e:'\n<blockquote>\n<p>Version 6.0.3</p>\n</blockquote>\n<h2>Resource 接口</h2>\n<p>相对标准 URL 访问机制，Spring 的 <code>org.springframework.core.io.Resource</code> 接口抽象了对底层资源的访问接口，提供了一套更好的访问方式。</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Resource</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> extends</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> InputStreamSource</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> exists</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> isReadable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> isOpen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    boolean</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> isFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    URL</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getURL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    URI</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getURI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    File</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getFile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    ReadableByteChannel</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> readableChannel</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    long</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> contentLength</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    long</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> lastModified</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    Resource</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> createRelative</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> relativePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> throws</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> IOException</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getFilename</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> getDescription</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:7.56,words:2269},t:"Spring 资源管理",y:"a"}}],["/pages/fe6aad/",{loader:()=>i.e(8555).then(i.bind(i,1332)),meta:{d:1671730948e3,l:"2022年12月22日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring"],e:"\n<p>Java API 规范(<code>JSR303</code>)定义了<code>Bean</code>校验的标准<code>validation-api</code>，但没有提供实现。<code>hibernate validation</code>是对这个规范的实现，并增加了校验注解如<code>@Email</code>、<code>@Length</code>等。<code>Spring Validation</code>是对<code>hibernate validation</code>的二次封装，用于支持<code>spring mvc</code>参数自动校验。</p>",r:{minutes:8.99,words:2696},t:"Spring 校验",y:"a"}}],["/pages/267b4c/",{loader:()=>i.e(6462).then(i.bind(i,34730)),meta:{d:1671737217e3,l:"2022年12月22日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","数据绑定"],e:'\n<p><strong>Spring 数据绑定(Data Binding)的作用是将用户的输入动态绑定到 JavaBean</strong>。换句话说，Spring 数据绑定机制是将属性值设置到目标对象中。</p>\n<p>在 Spring 中，数据绑定功能主要由 <code>DataBinder</code> 类实现。此外，<code>BeanWrapper</code> 也具有类似的功能，但 <code>DataBinder</code> 额外支持字段验证、字段格式化和绑定结果分析。</p>\n<figure><img src="https://raw.githubusercontent.com/dunwu/images/master/snap/20230111150930.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',r:{minutes:3.22,words:967},t:"Spring 数据绑定",y:"a"}}],["/pages/6662dc/",{loader:()=>i.e(551).then(i.bind(i,15861)),meta:{d:1671738239e3,l:"2022年12月22日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring"],e:"\n<h2>Spring 类型转换的实现</h2>\n<ul>\n<li>基于 JavaBeans 接口的类型转换实现\n<ul>\n<li>基于 java.beans.PropertyEditor 接口扩展</li>\n</ul>\n</li>\n<li>Spring 3.0+ 通用类型转换实现</li>\n</ul>\n<h2>使用场景</h2>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th>基于 JavaBeans 接口的类型转换实现</th>\n<th>Spring 3.0+ 通用类型转换实现</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>数据绑定</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>BeanWrapper</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>Bean 属性类型转换</td>\n<td>YES</td>\n<td>YES</td>\n</tr>\n<tr>\n<td>外部化属性类型转换</td>\n<td>NO</td>\n<td>YES</td>\n</tr>\n</tbody>\n</table>",r:{minutes:3.49,words:1047},t:"Spring 类型转换",y:"a"}}],["/pages/1f743f/",{loader:()=>i.e(4407).then(i.bind(i,93191)),meta:{d:1673555206e3,l:"2023年1月12日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring"],e:'\n<h2>参考资料</h2>\n<ul>\n<li><a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/core.html#beans" target="_blank" rel="noopener noreferrer">Spring 官方文档之 Core Technologies</a></li>\n<li><a href="https://time.geekbang.org/course/intro/265" target="_blank" rel="noopener noreferrer">《小马哥讲 Spring 核心编程思想》</a></li>\n</ul>',r:{minutes:.22,words:66},t:"Spring EL 表达式",y:"a"}}],["/pages/cca414/",{loader:()=>i.e(6768).then(i.bind(i,12330)),meta:{d:1671741062e3,l:"2022年12月22日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring"],e:"\n<h2>Java 事件/监听器编程模型</h2>\n<p>设计模式 - 观察者模式扩展</p>\n<ul>\n<li>可观者对象（消息发送者） - java.util.Observable</li>\n<li>观察者 - java.util.Observer</li>\n</ul>\n<p>标准化接口</p>\n<ul>\n<li>事件对象 - java.util.EventObject</li>\n<li>事件监听器 - java.util.EventListener</li>\n</ul>\n<h2>面向接口的事件/监听器设计模式</h2>\n<p>事件/监听器场景举例</p>\n<table>\n<thead>\n<tr>\n<th>Java 技术规范</th>\n<th>事件接口</th>\n<th>监听器接口</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JavaBeans</td>\n<td>java.beans.PropertyChangeEvent</td>\n<td>java.beans.PropertyChangeListener</td>\n</tr>\n<tr>\n<td>Java AWT</td>\n<td>java.awt.event.MouseEvent</td>\n<td>java.awt.event.MouseListener</td>\n</tr>\n<tr>\n<td>Java Swing</td>\n<td>javax.swing.event.MenuEvent</td>\n<td>javax.swing.event.MenuListener</td>\n</tr>\n<tr>\n<td>Java Preference</td>\n<td>java.util.prefs.PreferenceChangeEvent</td>\n<td>java.util.prefs.PreferenceChangeListener</td>\n</tr>\n</tbody>\n</table>",r:{minutes:3.98,words:1194},t:"Spring 事件",y:"a"}}],["/pages/b5b8ad/",{loader:()=>i.e(7504).then(i.bind(i,32390)),meta:{d:1671709494e3,l:"2022年12月22日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring"],e:"\n<h2>Spring 国际化使用场景</h2>\n<ul>\n<li>普通国际化文案</li>\n<li>Bean Validation 校验国际化文案</li>\n<li>Web 站点页面渲染</li>\n<li>Web MVC 错误消息提示</li>\n</ul>\n<h2>Spring 国际化接口</h2>\n<ul>\n<li>核心接口：<code>org.springframework.context.MessageSource</code></li>\n<li>主要概念\n<ul>\n<li>文案模板编码（code）</li>\n<li>文案模板参数（args）</li>\n<li>区域（Locale）</li>\n</ul>\n</li>\n</ul>",r:{minutes:1.69,words:507},t:"Spring 国际化",y:"a"}}],["/pages/175cbd/",{loader:()=>i.e(4736).then(i.bind(i,78724)),meta:{d:1671739912e3,l:"2022年12月22日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring"],e:"\n<h2>Java 泛型基础</h2>\n<p>泛型类型</p>\n<ul>\n<li>泛型类型是在类型上参数化的泛型类或接口</li>\n</ul>\n<p>泛型使用场景</p>\n<ul>\n<li>编译时强类型检查</li>\n<li>避免类型强转</li>\n<li>实现通用算法</li>\n</ul>\n<p>泛型类型擦写</p>\n<ul>\n<li>泛型被引入到 Java 语言中，以便在编译时提供更严格的类型检查并支持泛型编程。类型擦除确保不会<br>\n为参数化类型创建新类；因此，泛型不会产生运行时开销。为了实现泛型，编译器将类型擦除应用于：\n<ul>\n<li>将泛型类型中的所有类型参数替换为其边界，如果类型参数是无边界的，则将其替换为<br>\n“Object”。因此，生成的字节码只包含普通类、接口和方法</li>\n<li>必要时插入类型转换以保持类型安全</li>\n<li>生成桥方法以保留扩展泛型类型中的多态性</li>\n</ul>\n</li>\n</ul>",r:{minutes:2.53,words:758},t:"Spring 泛型处理",y:"a"}}],["/pages/b6556f/",{loader:()=>i.e(6492).then(i.bind(i,37939)),meta:{d:1671786495e3,l:"2022年12月23日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring"],e:"\n<h2>Spring 注解驱动编程发展历程</h2>\n<ul>\n<li>注解驱动启蒙时代：Spring Framework 1.x</li>\n<li>注解驱动过渡时代：Spring Framework 2.x</li>\n<li>注解驱动黄金时代：Spring Framework 3.x</li>\n<li>注解驱动完善时代：Spring Framework 4.x</li>\n<li>注解驱动当下时代：Spring Framework 5.x</li>\n</ul>\n<h2>Spring 核心注解场景分类</h2>\n<p>Spring 模式注解</p>\n<table>\n<thead>\n<tr>\n<th>Spring 注解</th>\n<th>场景说明</th>\n<th>起始版本</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>@Repository</td>\n<td>数据仓储模式注解</td>\n<td>2.0</td>\n</tr>\n<tr>\n<td>@Component</td>\n<td>通用组件模式注解</td>\n<td>2.5</td>\n</tr>\n<tr>\n<td>@Service</td>\n<td>服务模式注解</td>\n<td>2.5</td>\n</tr>\n<tr>\n<td>@Controller</td>\n<td>Web 控制器模式注解</td>\n<td>2.5</td>\n</tr>\n<tr>\n<td>@Configuration</td>\n<td>配置类模式注解</td>\n<td>3.0</td>\n</tr>\n</tbody>\n</table>",r:{minutes:2.48,words:745},t:"Spring 注解",y:"a"}}],["/pages/03d838/",{loader:()=>i.e(1592).then(i.bind(i,6554)),meta:{d:1671787664e3,l:"2022年12月23日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring"],e:"\n<h2>理解 Spring Environment 抽象</h2>\n<p>统一的 Spring 配置属性管理</p>\n<p>Spring Framework 3.1 开始引入 Environment 抽象，它统一 Spring 配置属性的存储，包括占位符处理和类型转换，不仅完整地替换 PropertyPlaceholderConfigurer，而且还支持更丰富的配置属性源（PropertySource）</p>\n<p>条件化 Spring Bean 装配管理</p>\n<p>通过 Environment Profiles 信息，帮助 Spring 容器提供条件化地装配 Bean</p>\n<h2>Spring Environment 接口使用场景</h2>",r:{minutes:2.28,words:684},t:"Spring Environment 抽象",y:"a"}}],["/pages/950e4d/",{loader:()=>i.e(7887).then(i.bind(i,339)),meta:{d:1639160546e3,l:"2021年12月10日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","SpringBoot"],e:'\n<h2>Spring Boot 简介</h2>\n<p>Spring Boot 可以让使用者非常方便的创建 Spring 应用。</p>\n<p>Spring Boot 的目标是：</p>\n<ul>\n<li>为所有 Spring 开发者提供更快且可广泛访问的入门体验。</li>\n<li>开箱即用</li>\n<li>提供一系列通用的非功能特性（例如嵌入式服务、安全、指标、健康检查和外部化配置）</li>\n<li>完全不需要代码生成，也不需要 XML 配置。</li>\n</ul>\n<h2>Spring Boot 系统要求</h2>\n<p>Spring Boot 的构建工具要求：</p>\n<table>\n<thead>\n<tr>\n<th style="text-align:left">Build Tool</th>\n<th style="text-align:left">Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style="text-align:left">Maven</td>\n<td style="text-align:left">3.5+</td>\n</tr>\n<tr>\n<td style="text-align:left">Gradle</td>\n<td style="text-align:left">6.8.x, 6.9.x, and 7.x</td>\n</tr>\n</tbody>\n</table>',r:{minutes:7.74,words:2321},t:"SpringBoot 之快速入门",y:"a"}}],["/pages/0fb992/",{loader:()=>i.e(7882).then(i.bind(i,33833)),meta:{d:1547121354e3,l:"2019年1月10日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","SpringBoot"],e:'\n<h2>加载 property 顺序</h2>\n<p>Spring Boot 加载 property 顺序如下：</p>\n<ol>\n<li><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-devtools-globalsettings" target="_blank" rel="noopener noreferrer">Devtools 全局配置</a> (当 devtools 被激活 <code>~/.spring-boot-devtools.properties</code>).</li>\n<li><a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/test/context/TestPropertySource.html" target="_blank" rel="noopener noreferrer">测试环境中的 <code>@TestPropertySource</code> 注解配置</a></li>\n<li>测试环境中的属性 <code>properties</code>：<a href="https://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/test/context/SpringBootTest.html" target="_blank" rel="noopener noreferrer"><code>@SpringBootTest</code></a> 和 <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-testing-spring-boot-applications-testing-autoconfigured-tests" target="_blank" rel="noopener noreferrer">测试注解</a>.</li>\n<li>命令行参数</li>\n<li><code>SPRING_APPLICATION_JSON</code> 属性</li>\n<li><code>ServletConfig</code> 初始化参数</li>\n<li><code>ServletContext</code> 初始化参数</li>\n<li>JNDI attributes from 通过 <code>java:comp/env</code> 配置的 JNDI 属性</li>\n<li>Java 系统属性 (<code>System.getProperties()</code>)</li>\n<li>操作系统环境比那里</li>\n<li><code>RandomValuePropertySource</code> 加载 <code>random.*</code> 形式的属性</li>\n<li>jar 包外的 <code>application-{profile}.properties</code> 或 <code>application-{profile}.yml</code> 配置</li>\n<li>jar 包内的 <code>application-{profile}.properties</code> 或 <code>application-{profile}.yml</code> 配置</li>\n<li>jar 包外的 <code>application.properties</code> 或 <code>application.yml</code> 配置</li>\n<li>jar 包内的 <code>application.properties</code> 或 <code>application.yml</code> 配置</li>\n<li><code>@PropertySource</code> 绑定的配置</li>\n<li>默认属性 (通过 <code>SpringApplication.setDefaultProperties</code> 指定)</li>\n</ol>',r:{minutes:4.9,words:1470},t:"SpringBoot 之属性加载详解",y:"a"}}],["/pages/cb598e/",{loader:()=>i.e(9886).then(i.bind(i,73723)),meta:{d:1574088901e3,l:"2019年11月18日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","SpringBoot"],e:"\n<blockquote>\n<p>一个应用为了在不同的环境下工作，常常会有不同的配置，代码逻辑处理。Spring Boot 对此提供了简便的支持。</p>\n<p>关键词： <code>@Profile</code>、<code>spring.profiles.active</code></p>\n</blockquote>\n<h2>区分环境的配置</h2>\n<h3>properties 配置</h3>\n<p>假设，一个应用的工作环境有：dev、test、prod</p>\n<p>那么，我们可以添加 4 个配置文件：</p>\n<ul>\n<li><code>applcation.properties</code> - 公共配置</li>\n<li><code>application-dev.properties</code> - 开发环境配置</li>\n<li><code>application-test.properties</code> - 测试环境配置</li>\n<li><code>application-prod.properties</code> - 生产环境配置</li>\n</ul>",r:{minutes:1.92,words:575},t:"SpringBoot 之 Profile",y:"a"}}],["/pages/5e7c20/",{loader:()=>i.e(2508).then(i.bind(i,19115)),meta:{d:1582760867e3,l:"2020年2月26日",c:["Java","框架","Spring","Spring核心"],g:["Java","框架","Spring","SpringBoot"],e:'\n<blockquote>\n<p>章节主要针对：Spring &amp; Spring Boot 框架的核心技术。如；Spring Bean、IoC、依赖查找、依赖注入、AOP、数据绑定、资源管理等。</p>\n</blockquote>\n<h2>📖 内容</h2>\n<ul>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/01.SpringBean.html" target="_blank">Spring Bean</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/02.SpringIoC.html" target="_blank">Spring IoC</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/03.Spring%E4%BE%9D%E8%B5%96%E6%9F%A5%E6%89%BE.html" target="_blank">Spring 依赖查找</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/04.Spring%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5.html" target="_blank">Spring 依赖注入</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/05.SpringIoC%E4%BE%9D%E8%B5%96%E6%9D%A5%E6%BA%90.html" target="_blank">Spring IoC 依赖来源</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/06.SpringBean%E4%BD%9C%E7%94%A8%E5%9F%9F.html" target="_blank">Spring Bean 作用域</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/07.SpringBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.html" target="_blank">Spring Bean 生命周期</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/08.Spring%E9%85%8D%E7%BD%AE%E5%85%83%E6%95%B0%E6%8D%AE.html" target="_blank">Spring 配置元数据</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/10.SpringAop.html" target="_blank">Spring AOP</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/20.Spring%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86.html" target="_blank">Spring 资源管理</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/21.Spring%E6%A0%A1%E9%AA%8C.html" target="_blank">Spring 校验</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/22.Spring%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A.html" target="_blank">Spring 数据绑定</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/23.Spring%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2.html" target="_blank">Spring 类型转换</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/24.SpringEL.html" target="_blank">Spring EL 表达式</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/25.Spring%E4%BA%8B%E4%BB%B6.html" target="_blank">Spring 事件</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/26.Spring%E5%9B%BD%E9%99%85%E5%8C%96.html" target="_blank">Spring 国际化</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/27.Spring%E6%B3%9B%E5%9E%8B%E5%A4%84%E7%90%86.html" target="_blank">Spring 泛型处理</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/28.Spring%E6%B3%A8%E8%A7%A3.html" target="_blank">Spring 注解</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/31.SpringBoot%E4%B9%8B%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html" target="_blank">SpringBoot 教程之快速入门</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/32.SpringBoot%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A0%E8%BD%BD.html" target="_blank">SpringBoot 之属性加载</a></li>\n<li><a href="/blog/posts/java/spring/01-Spring%E6%A0%B8%E5%BF%83/33.SpringBoot%E4%B9%8BProfile.html" target="_blank">SpringBoot 之 Profile</a></li>\n</ul>',r:{minutes:1.15,words:344},t:"Spring 核心",y:"a"}}],["/pages/1b774c/",{loader:()=>i.e(7106).then(i.bind(i,49977)),meta:{d:1508491675e3,l:"2017年10月20日",c:["Java","框架","Spring","Spring数据"],g:["Java","框架","Spring","SpringBoot","数据库","DataSource"],e:'\n<blockquote>\n<p>本文基于 Spring Boot 2.7.3 版本。</p>\n</blockquote>\n<h2>Spring Boot 数据源基本配置</h2>\n<p>Spring Boot 提供了一系列 <code>spring.datasource.*</code> 配置来控制 <code>DataSource</code> 的配置。用户可以在 <code>application.properties</code> 或 <code>application.yml</code> 文件中指定数据源配置。这些配置项维护在 <a href="https://github.com/spring-projects/spring-boot/tree/v2.7.4/spring-boot-project/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/jdbc/DataSourceProperties.java" target="_blank" rel="noopener noreferrer"><code>DataSourceProperties</code></a> 。</p>',r:{minutes:10.39,words:3117},t:"Spring 之数据源",y:"a"}}],["/pages/cf19fd/",{loader:()=>i.e(6435).then(i.bind(i,55490)),meta:{d:1550500435e3,l:"2019年2月18日",c:["Java","框架","Spring","Spring数据"],g:["Java","框架","Spring","SpringBoot","JDBC","JdbcTemplate"],e:"\n<p>JDBC 是 Java 语言中用来规范客户端程序如何访问数据库的应用程序接口，提供了增、删、改、查数据库的方法。</p>\n<h2>JDBC 入门示例</h2>\n<p>JDBC 的工作步骤大致如下：</p>\n<ol>\n<li>创建实体类。</li>\n<li>声明数据库读写接口的 DAO 接口。定义 DAO 的好处在于对于数据层上层的业务，调用 DAO 时仅关注对外暴露的读写方法，而不考虑底层的具体持久化方式。这样，便于替换持久化方式。</li>\n<li>创建一个 DAO 接口的实现类，使用 Spring 的 JDBC 模板去实现接口。</li>\n<li>最后，定义一个 DAO 接口的实现类的 JavaBean，并将数据源注入进去。</li>\n</ol>",r:{minutes:9.71,words:2912},t:"Spring 之 JDBC",y:"a"}}],["/pages/128c54/",{loader:()=>i.e(9881).then(i.bind(i,57365)),meta:{d:1663832809e3,l:"2022年9月22日",c:["Java","框架","Spring","Spring数据"],g:["Java","框架","Spring","SpringBoot","事务"],e:"\n<p>Spring 针对 Java Transaction API (JTA)、JDBC、Hibernate 和 Java Persistence API(JPA) 等事务 API，实现了一致的编程模型，而 Spring 的声明式事务功能更是提供了极其方便的事务配置方式，配合 Spring Boot 的自动配置，大多数 Spring Boot 项目只需要在方法上标记 <code>@Transactional</code> 注解，即可一键开启方法的事务性配置。</p>\n<h2>理解事务</h2>\n<p>在软件开发领域，全有或全无的操作被称为<strong>事务（transaction）</strong>。事务允许你将几个操作组合成一个要么全部发生要么全部不发生的工作单元。传统上 Java EE 开发对事务管理有两种选择：<strong>全局事务</strong>或<strong>本地事务</strong>，两者都有很大的局限性。</p>",r:{minutes:43.32,words:12995},t:"Spring 之事务",y:"a"}}],["/pages/a03d7b/",{loader:()=>i.e(4429).then(i.bind(i,62350)),meta:{d:1550500435e3,l:"2019年2月18日",c:["Java","框架","Spring","Spring数据"],g:["Java","框架","Spring","SpringBoot","JPA"],e:'\n<p>JPA 为对象关系映射提供了一种基于 POJO 的持久化模型。</p>\n<ul>\n<li>简化数据持久化代码的开发</li>\n<li>为 Java 社区屏蔽不同持久化 API 的差异</li>\n</ul>\n<h2>快速入门</h2>\n<p>（1）在 pom.xml 中引入依赖</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-data-jpa&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:10.65,words:3196},t:"Spring 之 JPA",y:"a"}}],["/pages/88219e/",{loader:()=>i.e(6405).then(i.bind(i,28065)),meta:{d:1557421765e3,l:"2019年5月9日",c:["Java","框架","Spring","Spring数据"],g:["Java","框架","Spring","SpringBoot","MyBatis","PageHelper","Mapper"],e:'\n<p><a href="http://www.mybatis.org/mybatis-3/" target="_blank" rel="noopener noreferrer">Mybatis 官网</a> 是一款持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p>\n<h2>快速入门</h2>\n<p>要使用 MyBatis， 只需将 <a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener noreferrer">mybatis-x.x.x.jar</a> 文件置于类路径（classpath）中即可。</p>',r:{minutes:11.95,words:3586},t:"Spring 集成 Mybatis",y:"a"}}],["/pages/191cdb/",{loader:()=>i.e(8742).then(i.bind(i,51291)),meta:{d:1675847435e3,l:"2023年2月8日",c:["Java","框架","Spring","Spring数据"],g:["Java","框架","Spring","SpringBoot"],e:"\n<p>Spring Data Repository 抽象的目标是显著减少各种访问持久化存储的样板式代码。</p>\n<h2>核心概念</h2>\n<p>Repository 是 Spring Data 的核心接口。此接口主要用作标记接口，以捕获要使用的类型并帮助您发现扩展此接口的接口。<code>CrudRepository</code> 和 <code>ListCrudRepository</code> 接口为被管理的实体类提供复杂的 CRUD 功能。<code>ListCrudRepository</code> 提供等效方法，但它们返回 <code>List</code>，而 <code>CrudRepository</code> 方法返回 <code>Iterable</code>。</p>",r:{minutes:6.76,words:2028},t:"Spring Data 综合",y:"a"}}],["/pages/65e4a2/",{loader:()=>i.e(97).then(i.bind(i,28752)),meta:{d:1675198482e3,l:"2023年1月31日",c:["Java","框架","Spring","Spring数据"],g:["Java","框架","Spring","SpringBoot","Redis"],e:'\n<h2>简介</h2>\n<p><a href="https://redis.io/" target="_blank" rel="noopener noreferrer">Redis</a> 是一个被数百万开发人员用作数据库、缓存、流引擎和消息代理的开源内存数据库。</p>\n<p>在 Spring 中，<a href="https://github.com/spring-projects/spring-data-redis" target="_blank" rel="noopener noreferrer">spring-data-redis</a> 项目对访问 <a href="https://redis.io/" target="_blank" rel="noopener noreferrer">Redis</a> 进行了 API 封装，提供了便捷的访问方式。 <a href="https://github.com/spring-projects/spring-data-redis" target="_blank" rel="noopener noreferrer">spring-data-redis</a></p>',r:{minutes:2.58,words:773},t:"Spring 访问 Redis",y:"a"}}],["/pages/db2a41/",{loader:()=>i.e(6258).then(i.bind(i,697)),meta:{d:1544894976e3,l:"2018年12月15日",c:["Java","框架","Spring","Spring数据"],g:["Java","框架","Spring","SpringBoot","MongoDB"],e:'\n<h2>简介</h2>\n<p><a href="https://www.mongodb.org/" target="_blank" rel="noopener noreferrer">MongoDB</a> 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。MongoDB 将数据存储为一个文档，数据结构由键值对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</p>\n<p>在 Spring 中，<a href="https://github.com/spring-projects/spring-data-mongodb" target="_blank" rel="noopener noreferrer">spring-data-mongodb</a> 项目对访问 <a href="https://www.mongodb.org/" target="_blank" rel="noopener noreferrer">MongoDB</a> 进行了 API 封装，提供了便捷的访问方式。 Spring Data MongoDB 的核心是一个以 POJO 为中心的模型，用于与 MongoDB <code>DBCollection</code> 交互并轻松编写 <code>Repository</code> 样式的数据访问层。</p>',r:{minutes:2.73,words:819},t:"Spring 访问 MongoDB",y:"a"}}],["/pages/fac14c/",{loader:()=>i.e(9638).then(i.bind(i,56481)),meta:{d:1545746796e3,l:"2018年12月25日",c:["Java","框架","Spring","Spring数据"],g:["Java","框架","Spring","SpringBoot","Elasticsearch"],e:'\n<h2>简介</h2>\n<p><a href="https://www.elastic.co/products/elasticsearch" target="_blank" rel="noopener noreferrer">Elasticsearch</a> 是一个开源的、分布式的搜索和分析引擎。</p>\n<h3>通过 REST 客户端连接 Elasticsearch</h3>\n<p>如果在 classpath 路径下存在 <code>org.elasticsearch.client:elasticsearch-rest-client</code> jar 包，Spring Boot 会自动配置并注册一个 <code>RestClient</code> Bean，它的默认访问路径为：<code>localhost:9200</code>。</p>',r:{minutes:2.36,words:709},t:"Spring 访问 Elasticsearch",y:"a"}}],["/pages/b912d1/",{loader:()=>i.e(7143).then(i.bind(i,90665)),meta:{d:1663499136e3,l:"2022年9月18日",c:["Java","框架","Spring","Spring数据"],g:["Java","框架","Spring","SpringBoot","数据库"],e:'\n<h2>📖 内容</h2>\n<ul>\n<li><a href="/blog/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/01.Spring%E4%B9%8B%E6%95%B0%E6%8D%AE%E6%BA%90.html" target="_blank">Spring 之数据源</a></li>\n<li><a href="/blog/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/02.Spring%E4%B9%8BJDBC.html" target="_blank">Spring 之 JDBC</a></li>\n<li><a href="/blog/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/03.Spring%E4%B9%8B%E4%BA%8B%E5%8A%A1.html" target="_blank">Spring 之事务</a></li>\n<li><a href="/blog/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/04.Spring%E4%B9%8BJPA.html" target="_blank">Spring 之 JPA</a></li>\n<li><a href="/blog/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/10.Spring%E9%9B%86%E6%88%90Mybatis.html" target="_blank">Spring 集成 Mybatis</a></li>\n<li><a href="/blog/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/21.Spring%E8%AE%BF%E9%97%AERedis.html" target="_blank">Spring 访问 Redis</a></li>\n<li><a href="/blog/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/22.Spring%E8%AE%BF%E9%97%AEMongoDB.html" target="_blank">Spring 访问 MongoDB</a></li>\n<li><a href="/blog/posts/java/spring/02-Spring%E6%95%B0%E6%8D%AE/23.Spring%E8%AE%BF%E9%97%AEElasticsearch.html" target="_blank">Spring 访问 Elasticsearch</a></li>\n</ul>',r:{minutes:2.09,words:628},t:"Spring 数据篇",y:"a"}}],["/pages/65351b/",{loader:()=>i.e(5372).then(i.bind(i,12372)),meta:{d:1510160007e3,l:"2017年11月8日",c:["Java","框架","Spring","SpringWeb"],g:["Java","框架","Spring","Web"],e:'\n<h2>快速入门</h2>\n<p>下面，通过一个简单的示例来展示如何通过 Spring 创建一个 Hello World Web 服务。</p>\n<p>（1）<code>pom.xml</code> 中引入依赖</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.42,words:727},t:"Spring Web 综述",y:"a"}}],["/pages/5d002f/",{loader:()=>i.e(3379).then(i.bind(i,49189)),meta:{d:1676402482e3,l:"2023年2月14日",c:["Java","框架","Spring","SpringWeb"],g:["Java","框架","Spring","Web","Controller"],e:'\n<p>Spring MVC 提供了一种基于注解的编程模型，<code>@Controller</code> 和 <code>@RestController</code> 组件使用注解来表达请求映射、请求输入、异常处理等。注解控制器具有灵活的方法签名，并且不必扩展基类或实现特定接口。以下示例显示了一个由注解定义的控制器：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Controller</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> HelloController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">GetMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"/hello"</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> handle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Model</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">addAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"message"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Hello World!"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> "index"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:23.03,words:6909},t:"Spring Web 应用",y:"a"}}],["/pages/20287b/",{loader:()=>i.e(1259).then(i.bind(i,65465)),meta:{d:1676282272e3,l:"2023年2月13日",c:["Java","框架","Spring","SpringWeb"],g:["Java","框架","Spring","Web","DispatcherServlet"],e:'\n<h2>简介</h2>\n<p><code>DispatcherServlet</code> 是 Spring MVC 框架的核心组件，负责将<strong>客户端请求映射到相应的控制器，然后调用控制器处理请求并返回响应结果</strong>。</p>\n<h3>DispatcherServlet 工作原理</h3>\n<h4>DispatcherServlet 工作流程</h4>\n<p><code>DispatcherServlet</code> 的工作流程大致如下图所示：</p>\n<figure><img src="https://raw.githubusercontent.com/dunwu/images/master/cs/java/spring/web/spring-dispatcher-servlet.png" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure>',r:{minutes:25.97,words:7791},t:"Spring MVC 之 DispatcherServlet",y:"a"}}],["/pages/4a164d/",{loader:()=>i.e(5842).then(i.bind(i,89148)),meta:{d:1676396649e3,l:"2023年2月14日",c:["Java","框架","Spring","SpringWeb"],g:["Java","框架","Spring","Web","Filter"],e:'\n<p><code>spring-web</code> 模块提供了一些有用的 Filter：</p>\n<ul>\n<li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-http-put" target="_blank" rel="noopener noreferrer">Form Data</a></li>\n<li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-forwarded-headers" target="_blank" rel="noopener noreferrer">Forwarded Headers</a></li>\n<li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-shallow-etag" target="_blank" rel="noopener noreferrer">Shallow ETag</a></li>\n<li><a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#filters-cors" target="_blank" rel="noopener noreferrer">CORS</a></li>\n</ul>',r:{minutes:3.26,words:979},t:"Spring MVC 之过滤器",y:"a"}}],["/pages/1d2954/",{loader:()=>i.e(1987).then(i.bind(i,70579)),meta:{d:1676579606e3,l:"2023年2月16日",c:["Java","框架","Spring","SpringWeb"],g:["Java","框架","Spring","Web","CORS"],e:'\n<p>Spring MVC 支持跨域处理（CORS）。</p>\n<h2>简介</h2>\n<p>出于安全原因，浏览器禁止对当前源之外的资源进行 AJAX 调用。例如，可以在一个选项卡中使用您的银行帐户，而在另一个选项卡中使用 <a href="http://evil.com" target="_blank" rel="noopener noreferrer">evil.com</a>。来自 <a href="http://evil.com" target="_blank" rel="noopener noreferrer">evil.com</a> 的脚本不应该能够使用您的凭据向您的银行 API 发出 AJAX 请求——例如从您的账户中取款！</p>',r:{minutes:4.7,words:1409},t:"Spring MVC 之跨域",y:"a"}}],["/pages/251e31/",{loader:()=>i.e(8345).then(i.bind(i,35580)),meta:{d:1676632885e3,l:"2023年2月17日",c:["Java","框架","Spring","SpringWeb"],g:["Java","框架","Spring","Web","View"],e:'\n<p>Spring MVC 中视图技术的使用是可插拔的。无论决定使用 Thymeleaf、Groovy 等模板引擎、JSP 还是其他技术，都可以通过配置来更改。</p>\n<p>Spring MVC 的视图位于该应用程序的内部信任边界内。 视图可以访问应用程序上下文的所有 bean。 因此，不建议在模板可由外部源编辑的应用程序中使用 Spring MVC 的模板支持，因为这可能会产生安全隐患。</p>\n<h2>Thymeleaf</h2>\n<p><a href="https://www.thymeleaf.org/" target="_blank" rel="noopener noreferrer">Thymeleaf</a> 是一个现代服务器端 Java 模板引擎，它强调自然的 HTML 模板，可以通过双击在浏览器中预览，而无需运行服务器，这对于 UI 模板的独立工作（例如，由设计师）非常有帮助。</p>',r:{minutes:19.63,words:5888},t:"Spring MVC 之视图技术",y:"a"}}],["/pages/ad0516/",{loader:()=>i.e(3599).then(i.bind(i,42854)),meta:{d:1546967974e3,l:"2019年1月8日",c:["Java","框架","Spring","SpringWeb"],g:["Java","框架","Spring","SpringBoot","Web"],e:"\n<blockquote>\n<p>EasyUI 是一个简单的用户界面组件的集合。由于 EasyUI 已经封装好大部分 UI 基本功能，能帮用户减少大量的 js 和 css 代码。所以，EasyUI 非常适合用于开发简单的系统或原型系统。</p>\n<p>本文示例使用技术点：</p>\n<ul>\n<li>Spring Boot：主要使用了 spring-boot-starter-web、spring-boot-starter-data-jpa</li>\n<li>EasyUI：按需加载，并没有引入所有的 EasyUI 特性</li>\n<li>数据库：为了测试方便，使用 H2</li>\n</ul>\n</blockquote>",r:{minutes:4.71,words:1413},t:"SpringBoot 之应用 EasyUI",y:"a"}}],["/pages/e2586a/",{loader:()=>i.e(6929).then(i.bind(i,80247)),meta:{d:1582760886e3,l:"2020年2月26日",c:["Java","框架","Spring","SpringWeb"],g:["Java","框架","Spring","SpringBoot","Web"],e:'\n<blockquote>\n<p>章节主要针对：Spring 在 web 领域的应用。如：Spring MVC、WebSocket 等。</p>\n</blockquote>\n<h2>📖 内容</h2>\n<ul>\n<li><a href="/blog/posts/java/spring/03-SpringWeb/01.SpringWeb%E7%BB%BC%E8%BF%B0.html" target="_blank">SpringWeb 综述</a></li>\n<li><a href="/blog/posts/java/spring/03-SpringWeb/02.SpringWeb%E5%BA%94%E7%94%A8.html" target="_blank">SpringWeb 应用</a></li>\n<li><a href="/blog/posts/java/spring/03-SpringWeb/03.DispatcherServlet.html" target="_blank">DispatcherServlet</a></li>\n<li><a href="/blog/posts/java/spring/03-SpringWeb/04.Spring%E8%BF%87%E6%BB%A4%E5%99%A8.html" target="_blank">Spring 过滤器</a></li>\n<li><a href="/blog/posts/java/spring/03-SpringWeb/05.Spring%E8%B7%A8%E5%9F%9F.html" target="_blank">Spring 跨域</a></li>\n<li><a href="/blog/posts/java/spring/03-SpringWeb/06.Spring%E8%A7%86%E5%9B%BE.html" target="_blank">Spring 视图</a></li>\n<li><a href="/blog/posts/java/spring/03-SpringWeb/21.SpringBoot%E4%B9%8B%E5%BA%94%E7%94%A8EasyUI.html" target="_blank">SpringBoot 之应用 EasyUI</a></li>\n</ul>',r:{minutes:.6,words:179},t:"Spring Web",y:"a"}}],["/pages/92add2/",{loader:()=>i.e(8610).then(i.bind(i,82199)),meta:{d:1574088901e3,l:"2019年11月18日",c:["Java","框架","Spring","SpringIO"],g:["Java","框架","Spring","SpringBoot","异步"],e:'\n<h2><code>@EnableAsync</code> 注解</h2>\n<p>要使用 <code>@Async</code>，首先需要使用 <code>@EnableAsync</code> 注解开启 Spring Boot 中的异步特性。</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Configuration</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">EnableAsync</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> AppConfig</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3,words:899},t:"spring-boot-async",y:"a"}}],["/pages/676725/",{loader:()=>i.e(8323).then(i.bind(i,35749)),meta:{d:1546208656e3,l:"2018年12月30日",c:["Java","框架","Spring","SpringIO"],g:["Java","框架","Spring","SpringBoot","JSON"],e:"\n<h2>简介</h2>\n<h3>Spring Boot 支持的 Json 库</h3>\n<p>Spring Boot 支持三种 Json 库：</p>\n<ul>\n<li>Gson</li>\n<li>Jackson</li>\n<li>JSON-B</li>\n</ul>\n<p><strong>Jackson 是 Spring Boot 官方推荐的默认库。</strong></p>\n<p>Spring Boot 提供了 Jackson 的自动配置，Jackson 是 <code>spring-boot-starter-json</code> 的一部分。当 Jackson 在类路径上时，会自动配置 ObjectMapper bean。</p>",r:{minutes:5.75,words:1726},t:"SpringBoot 之集成 Json",y:"a"}}],["/pages/2586f1/",{loader:()=>i.e(3568).then(i.bind(i,67723)),meta:{d:1574263244e3,l:"2019年11月20日",c:["Java","框架","Spring","SpringIO"],g:["Java","框架","Spring","SpringBoot","邮件"],e:'\n<h2>简介</h2>\n<p>Spring Boot 收发邮件最简便方式是通过 <code>spring-boot-starter-mail</code>。</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-mail&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.96,words:889},t:"SpringBoot 之发送邮件",y:"a"}}],["/pages/56581b/",{loader:()=>i.e(83).then(i.bind(i,32110)),meta:{d:166350084e4,l:"2022年9月18日",c:["Java","框架","Spring","SpringIO"],g:["Java","框架","Spring","SpringBoot","IO"],e:'\n<h2>📖 内容</h2>\n<ul>\n<li><a href="/blog/posts/java/spring/04-SpringIO/01.SpringBoot%E4%B9%8B%E5%BC%82%E6%AD%A5%E8%AF%B7%E6%B1%82.html" target="_blank">SpringBoot 之异步请求</a></li>\n<li><a href="/blog/posts/java/spring/04-SpringIO/02.SpringBoot%E4%B9%8BJson.html" target="_blank">SpringBoot 之 Json</a></li>\n<li><a href="/blog/posts/java/spring/04-SpringIO/03.SpringBoot%E4%B9%8B%E9%82%AE%E4%BB%B6.html" target="_blank">SpringBoot 之邮件</a></li>\n</ul>',r:{minutes:.46,words:139},t:"Spring IO",y:"a"}}],["/pages/a311cb/",{loader:()=>i.e(7289).then(i.bind(i,87073)),meta:{d:1510160007e3,l:"2017年11月8日",c:["Java","框架","Spring","Spring集成"],g:["Java","框架","Spring","集成","缓存"],e:'\n<blockquote>\n<p>Spring 中提供了缓存功能的抽象，允许你在底层灵活的替换缓存实现，而对上层暴露相同的缓存接口。</p>\n</blockquote>\n<h2>缓存接口</h2>\n<p>Spring 的缓存 API 以注解方式提供。</p>\n<h3>开启注解</h3>\n<p>Spring 为缓存功能提供了注解功能，但是你必须启动注解。<br>\n你有两个选择：<br>\n(1) 在 xml 中声明<br>\n像上一节 spring-ehcache.xml 中的做法一样，使用<code>&lt;cache:annotation-driven/&gt;</code></p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">cache:annotation-driven</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> cache-manager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"cacheManager"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">/&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:4.08,words:1223},t:"Spring集成缓存",y:"a"}}],["/pages/a187f0/",{loader:()=>i.e(3591).then(i.bind(i,634)),meta:{d:1510160007e3,l:"2017年11月8日",c:["Java","框架","Spring","Spring集成"],g:["Java","框架","Spring","集成","调度器"],e:'\n<h2>概述</h2>\n<p>如果想在 Spring 中使用任务调度功能，除了集成调度框架 Quartz 这种方式，也可以使用 Spring 自己的调度任务框架。<br>\n使用 Spring 的调度框架，优点是：支持注解<code>@Scheduler</code>，可以省去大量的配置。</p>\n<h2>实时触发调度任务</h2>\n<h3>TaskScheduler 接口</h3>\n<p>Spring3 引入了<code>TaskScheduler</code>接口，这个接口定义了调度任务的抽象方法。<br>\nTaskScheduler 接口的声明：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> TaskScheduler</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    ScheduledFuture</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> schedule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Runnable</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Trigger</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> trigger</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    ScheduledFuture</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> schedule</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Runnable</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Date</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> startTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    ScheduledFuture</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> scheduleAtFixedRate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Runnable</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Date</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> startTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> period</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    ScheduledFuture</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> scheduleAtFixedRate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Runnable</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> period</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    ScheduledFuture</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> scheduleWithFixedDelay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Runnable</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Date</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> startTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">    ScheduledFuture</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> scheduleWithFixedDelay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Runnable</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> task</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">long</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:6.67,words:2002},t:"Spring 集成调度器",y:"a"}}],["/pages/274fd7/",{loader:()=>i.e(4334).then(i.bind(i,83988)),meta:{d:1509125441e3,l:"2017年10月27日",c:["Java","框架","Spring","Spring集成"],g:["Java","框架","Spring","集成","Dubbo"],e:'\n<h2>ZooKeeper</h2>\n<p>ZooKeeper 可以作为 Dubbo 的注册中心。</p>\n<p>Dubbo 未对 Zookeeper 服务器端做任何侵入修改，只需安装原生的 Zookeeper 服务器即可，所有注册中心逻辑适配都在调用 Zookeeper 客户端时完成。</p>\n<p><strong>安装</strong></p>\n<p>在 <a href="http://zookeeper.apache.org/releases.html" target="_blank" rel="noopener noreferrer">ZooKeeper 发布中心</a> 选择需要的版本，下载后解压到本地。</p>',r:{minutes:3.64,words:1091},t:"Spring集成Dubbo",y:"a"}}],["/pages/d6025b/",{loader:()=>i.e(8049).then(i.bind(i,79442)),meta:{d:1582760867e3,l:"2020年2月26日",c:["Java","框架","Spring","Spring集成"],g:["Java","框架","Spring","SpringBoot","集成"],e:'\n<blockquote>\n<p>章节主要针对：Spring 与第三方框架、库集成。如：Cache、Scheduling、JMS、JMX 等。</p>\n</blockquote>\n<h2>📖 内容</h2>\n<ul>\n<li><a href="/blog/posts/java/spring/05-Spring%E9%9B%86%E6%88%90/01.Spring%E9%9B%86%E6%88%90%E7%BC%93%E5%AD%98.html" target="_blank">Spring 集成缓存中间件</a></li>\n<li><a href="/blog/posts/java/spring/05-Spring%E9%9B%86%E6%88%90/02.Spring%E9%9B%86%E6%88%90%E8%B0%83%E5%BA%A6%E5%99%A8.html" target="_blank">Spring 集成定时任务中间件</a></li>\n<li><a href="/blog/posts/java/spring/05-Spring%E9%9B%86%E6%88%90/03.Spring%E9%9B%86%E6%88%90Dubbo.html" target="_blank">Spring 集成 Dubbo</a></li>\n</ul>',r:{minutes:.59,words:177},t:"Spring 集成",y:"a"}}],["/pages/568352/",{loader:()=>i.e(2871).then(i.bind(i,15712)),meta:{d:1620930116e3,l:"2021年5月13日",c:["Java","框架","Spring","Spring安全"],g:["Java","框架","Spring","SpringBoot","安全"],e:'\n<h2>QuickStart</h2>\n<p>（1）添加依赖</p>\n<div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t\t&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;spring-boot-starter-security&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">\t\t&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">&gt;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:.46,words:138},t:"SpringBoot 之安全快速入门",y:"a"}}],["/pages/752c6a/",{loader:()=>i.e(8768).then(i.bind(i,38339)),meta:{d:1513350632e3,l:"2017年12月15日",c:["Java","框架","Spring","Spring其他"],g:["Java","框架","Spring"],e:"\n<h2>前言</h2>\n<p>最近，一直在为公司老项目做核心库升级工作。本来只是想升级一下 JDK8 ，却因为兼容性问题而不得不升级一些其他的库，而其他库本身依赖的一些库可能也要同步升级。这是一系列连锁问题，你很难一一识别，往往只有在编译时、运行时才能发现问题。</p>\n<p>总之，这是个费劲的活啊。</p>\n<p>本文小结一下升级 Spring4 的连锁问题。</p>\n<h2>为什么升级 spring4</h2>\n<p>升级 Spring4 的原因是：Spring 4 以前的版本不兼容 JDK8。当你的项目同时使用 Spring3 和 JDK8，如果代码中有使用 JDK8 字节码或 Lambada 表达式，那么会出问题。</p>",r:{minutes:7.37,words:2210},t:"Spring 4 升级踩雷指南",y:"a"}}],["/pages/bac2ce/",{loader:()=>i.e(8242).then(i.bind(i,12395)),meta:{d:1545434564e3,l:"2018年12月21日",c:["Java","框架","Spring","Spring其他"],g:["Java","框架","Spring","SpringBoot"],e:'\n<h2>简介</h2>\n<p>Spring Boot 启动时默认会显示以下 LOGO：</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>  .   ____          _            __ _ _</span></span>\n<span class="line"><span> /\\\\ / ___\'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\</span></span>\n<span class="line"><span>( ( )\\___ | \'_ | \'_| | \'_ \\/ _` | \\ \\ \\ \\</span></span>\n<span class="line"><span> \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span></span>\n<span class="line"><span>  \'  |____| .__|_| |_|_| |_\\__, | / / / /</span></span>\n<span class="line"><span> =========|_|==============|___/=/_/_/_/</span></span>\n<span class="line"><span> :: Spring Boot ::        (v2.1.1.RELEASE)</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.42,words:727},t:"SpringBoot 之 banner 定制",y:"a"}}],["/pages/c013cc/",{loader:()=>i.e(6251).then(i.bind(i,41863)),meta:{d:1655239882e3,l:"2022年6月14日",c:["Java","框架","Spring","Spring其他"],g:["Java","框架","Spring","SpringBoot"],e:'\n<p><a href="https://github.com/spring-projects/spring-boot/tree/v2.7.0/spring-boot-project/spring-boot-actuator" target="_blank" rel="noopener noreferrer"><code>spring-boot-actuator</code></a> 模块提供了 Spring Boot 的所有生产就绪功能。启用这些功能的推荐方法是添加 <code>spring-boot-starter-actuator</code> 依赖。</p>\n<p>如果是 Maven 项目，添加以下依赖：</p>',r:{minutes:9.96,words:2988},t:"SpringBoot Actuator 快速入门",y:"a"}}],["/pages/6bb8c1/",{loader:()=>i.e(8288).then(i.bind(i,86304)),meta:{d:1582760886e3,l:"2020年2月26日",c:["Java","框架","Spring","Spring其他"],g:["Java","框架","Spring","SpringBoot"],e:'\n<h2>📖 内容</h2>\n<ul>\n<li><a href="/blog/posts/java/spring/99-Spring%E5%85%B6%E4%BB%96/01.Spring4%E5%8D%87%E7%BA%A7.html" target="_blank">Spring4 升级</a></li>\n<li><a href="/blog/posts/java/spring/99-Spring%E5%85%B6%E4%BB%96/21.SpringBoot%E4%B9%8Bbanner.html" target="_blank">SpringBoot 之 banner</a></li>\n<li><a href="/blog/posts/java/spring/99-Spring%E5%85%B6%E4%BB%96/22.SpringBoot%E4%B9%8BActuator.html" target="_blank">SpringBoot 之 Actuator</a></li>\n</ul>',r:{minutes:.44,words:133},t:"Spring 其他",y:"a"}}],["/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/01-log%E6%97%A5%E5%BF%97/log%E6%97%A5%E5%BF%97.html",{loader:()=>i.e(8805).then(i.bind(i,47631)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>日志</p>\n",r:{minutes:1.91,words:573},t:"日志",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.html",{loader:()=>i.e(4198).then(i.bind(i,72581)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>类加载器</p>\n",r:{minutes:4.07,words:1220},t:"类加载器",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/03-xml/xml.html",{loader:()=>i.e(6679).then(i.bind(i,54101)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>xml</p>\n",r:{minutes:9.68,words:2905},t:"xml",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/04-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95.html",{loader:()=>i.e(1148).then(i.bind(i,77365)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>单元测试Junit</p>\n",r:{minutes:4.05,words:1216},t:"单元测试Junit",i:"pen-to-square",O:1,y:"a"}}],["/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/05-%E6%B3%A8%E8%A7%A3/%E6%B3%A8%E8%A7%A3.html",{loader:()=>i.e(5825).then(i.bind(i,12741)),meta:{a:[{name:"xuyong"},{name:"黑马程序员"}],d:16771968e5,l:"2023年2月24日",c:["java"],g:["java-basic"],e:"<p>注解</p>\n",r:{minutes:3.29,words:988},t:"注解",i:"pen-to-square",O:1,y:"a"}}],["/404.html",{loader:()=>i.e(7490).then(i.bind(i,81489)),meta:{t:""}}],["/posts/",{loader:()=>i.e(8666).then(i.bind(i,18063)),meta:{t:"Posts"}}],["/posts/idea/",{loader:()=>i.e(9824).then(i.bind(i,21838)),meta:{t:"Idea"}}],["/posts/linux/",{loader:()=>i.e(1343).then(i.bind(i,29772)),meta:{t:"Linux"}}],["/posts/mysql/",{loader:()=>i.e(3191).then(i.bind(i,25626)),meta:{t:"Mysql"}}],["/posts/network/",{loader:()=>i.e(183).then(i.bind(i,45998)),meta:{t:"Network"}}],["/posts/redis/",{loader:()=>i.e(2110).then(i.bind(i,58243)),meta:{t:"Redis"}}],["/posts/shell/",{loader:()=>i.e(5443).then(i.bind(i,95748)),meta:{t:"Shell"}}],["/posts/windows/",{loader:()=>i.e(2912).then(i.bind(i,72190)),meta:{t:"Windows"}}],["/posts/java/basic/",{loader:()=>i.e(3086).then(i.bind(i,33465)),meta:{t:"Basic"}}],["/posts/java/",{loader:()=>i.e(4895).then(i.bind(i,31919)),meta:{t:"Java"}}],["/posts/java/bug/",{loader:()=>i.e(5489).then(i.bind(i,89461)),meta:{t:"Bug"}}],["/posts/java/dependence/",{loader:()=>i.e(1133).then(i.bind(i,28682)),meta:{t:"Dependence"}}],["/posts/java/netty/",{loader:()=>i.e(584).then(i.bind(i,21103)),meta:{t:"Netty"}}],["/posts/java/spring/",{loader:()=>i.e(9385).then(i.bind(i,85793)),meta:{t:"Spring"}}],["/posts/java/springboot/",{loader:()=>i.e(861).then(i.bind(i,29432)),meta:{t:"Springboot"}}],["/posts/java/web/",{loader:()=>i.e(8458).then(i.bind(i,83749)),meta:{t:"Web"}}],["/posts/python/django/",{loader:()=>i.e(3521).then(i.bind(i,12691)),meta:{t:"Django"}}],["/posts/python/",{loader:()=>i.e(1285).then(i.bind(i,65169)),meta:{t:"Python"}}],["/posts/java/basic/01-Java%E5%85%A5%E9%97%A8/",{loader:()=>i.e(6350).then(i.bind(i,731)),meta:{t:"01 Java入门"}}],["/posts/java/basic/02-Java%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/",{loader:()=>i.e(451).then(i.bind(i,84459)),meta:{t:"02 Java基础概念"}}],["/posts/java/basic/03-Java%E8%BF%90%E7%AE%97%E7%AC%A6/",{loader:()=>i.e(4970).then(i.bind(i,36991)),meta:{t:"03 Java运算符"}}],["/posts/java/basic/04-%E5%88%A4%E6%96%AD%E5%92%8C%E5%BE%AA%E7%8E%AF/",{loader:()=>i.e(7060).then(i.bind(i,75751)),meta:{t:"04 判断和循环"}}],["/posts/java/basic/05-%E5%BE%AA%E7%8E%AF%E9%AB%98%E7%BA%A7%E5%92%8C%E6%95%B0%E7%BB%84/",{loader:()=>i.e(9143).then(i.bind(i,20219)),meta:{t:"05 循环高级和数组"}}],["/posts/java/basic/06-%E6%96%B9%E6%B3%95/",{loader:()=>i.e(9794).then(i.bind(i,39713)),meta:{t:"06 方法"}}],["/posts/java/basic/07-%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0/",{loader:()=>i.e(5622).then(i.bind(i,267)),meta:{t:"07 综合练习"}}],["/posts/java/basic/08-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",{loader:()=>i.e(5345).then(i.bind(i,66304)),meta:{t:"08 面向对象"}}],["/posts/java/basic/09-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E8%AE%AD%E7%BB%83/",{loader:()=>i.e(6752).then(i.bind(i,36934)),meta:{t:"09 面向对象综合训练"}}],["/posts/java/basic/10-%E5%AD%97%E7%AC%A6%E4%B8%B2/",{loader:()=>i.e(6658).then(i.bind(i,9578)),meta:{t:"10 字符串"}}],["/posts/java/basic/11-%E9%9B%86%E5%90%88_%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/",{loader:()=>i.e(3113).then(i.bind(i,24305)),meta:{t:"11 集合 学生管理系统"}}],["/posts/java/basic/13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88static_%E7%BB%A7%E6%89%BF%EF%BC%89/",{loader:()=>i.e(3992).then(i.bind(i,20591)),meta:{t:"13 面向对象进阶（static 继承）"}}],["/posts/java/basic/14-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E5%A4%9A%E6%80%81_%E5%8C%85_final_%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6_%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%89/",{loader:()=>i.e(7694).then(i.bind(i,26475)),meta:{t:"14 面向对象进阶（多态 包 Final 权限修饰符 代码块）"}}],["/posts/java/basic/15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB_%E6%8E%A5%E5%8F%A3_%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%89/",{loader:()=>i.e(5522).then(i.bind(i,56902)),meta:{t:"15 面向对象进阶（抽象类 接口 内部类）"}}],["/posts/java/basic/16-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%8A%EF%BC%89/",{loader:()=>i.e(7048).then(i.bind(i,62421)),meta:{t:"16 面向对象综合练习（上）"}}],["/posts/java/basic/17-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0%EF%BC%88%E4%B8%8B%EF%BC%89/",{loader:()=>i.e(122).then(i.bind(i,71342)),meta:{t:"17 面向对象综合练习（下）"}}],["/posts/java/basic/18-API%EF%BC%88%E5%B8%B8%E8%A7%81API%EF%BC%8C%E5%AF%B9%E8%B1%A1%E5%85%8B%E9%9A%86%EF%BC%89/",{loader:()=>i.e(1340).then(i.bind(i,83657)),meta:{t:"18 API（常见 API，对象克隆）"}}],["/posts/java/basic/19-API%EF%BC%88%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%89/",{loader:()=>i.e(250).then(i.bind(i,43069)),meta:{t:"19 API（正则表达式）"}}],["/posts/java/basic/20-API%EF%BC%88%E6%97%B6%E9%97%B4%EF%BC%8C%E5%8C%85%E8%A3%85%E7%B1%BB%EF%BC%8C%E7%BB%83%E4%B9%A0%EF%BC%89/",{loader:()=>i.e(1239).then(i.bind(i,68503)),meta:{t:"20 API（时间，包装类，练习）"}}],["/posts/java/basic/21-API%EF%BC%88%E7%AE%97%E6%B3%95%EF%BC%8Clambda%EF%BC%8C%E7%BB%83%E4%B9%A0%EF%BC%89/",{loader:()=>i.e(5710).then(i.bind(i,30001)),meta:{t:"21 API（算法，lambda，练习）"}}],["/posts/java/basic/22-%E9%9B%86%E5%90%88%EF%BC%88List%E9%9B%86%E5%90%88%EF%BC%89/",{loader:()=>i.e(637).then(i.bind(i,56887)),meta:{t:"22 集合（ List集合）"}}],["/posts/java/basic/23-%E9%9B%86%E5%90%88%EF%BC%88%E6%B3%9B%E5%9E%8B_Set_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/",{loader:()=>i.e(4377).then(i.bind(i,20898)),meta:{t:"23 集合（泛型 Set 数据结构）"}}],["/posts/java/basic/24-%E9%9B%86%E5%90%88%EF%BC%88Map_%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0_%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%89/",{loader:()=>i.e(9283).then(i.bind(i,60465)),meta:{t:"24 集合（ Map 可变参数 集合工具类）"}}],["/posts/java/basic/25-%E9%98%B6%E6%AE%B5%E9%A1%B9%E7%9B%AE%EF%BC%88%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0_doudizhu%E6%B8%B8%E6%88%8F%EF%BC%89/",{loader:()=>i.e(6905).then(i.bind(i,7784)),meta:{t:"25 阶段项目（综合练习 Doudizhu游戏）"}}],["/posts/java/basic/26-%E9%9B%86%E5%90%88%EF%BC%88Stream%E6%B5%81_%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%EF%BC%89/",{loader:()=>i.e(5746).then(i.bind(i,97715)),meta:{t:"26 集合（ Stream流 方法引用）"}}],["/posts/java/basic/27-IO(%E5%BC%82%E5%B8%B8_File_%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89/",{loader:()=>i.e(5437).then(i.bind(i,46019)),meta:{t:"27 IO(异常 File 综合案例）"}}],["/posts/java/basic/28-IO%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81_%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89/",{loader:()=>i.e(1158).then(i.bind(i,62624)),meta:{t:"28 IO（字节流 字符流）"}}],["/posts/java/basic/29-IO%EF%BC%88%E5%85%B6%E4%BB%96%E6%B5%81%EF%BC%89/",{loader:()=>i.e(8613).then(i.bind(i,12925)),meta:{t:"29 IO（其他流）"}}],["/posts/java/basic/30-%E5%A4%9A%E7%BA%BF%E7%A8%8B/",{loader:()=>i.e(1181).then(i.bind(i,3318)),meta:{t:"30 多线程"}}],["/posts/java/basic/31-%E5%A4%9A%E7%BA%BF%E7%A8%8B_juc/",{loader:()=>i.e(1843).then(i.bind(i,63030)),meta:{t:"31 多线程 Juc"}}],["/posts/java/basic/32-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/",{loader:()=>i.e(4787).then(i.bind(i,97379)),meta:{t:"32 网络编程"}}],["/posts/java/basic/33-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E5%8F%8D%E5%B0%84%EF%BC%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89/",{loader:()=>i.e(524).then(i.bind(i,56350)),meta:{t:"33 基础加强（反射，动态代理）"}}],["/pages/",{loader:()=>i.e(3713).then(i.bind(i,80510)),meta:{t:"Pages"}}],["/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/01-log%E6%97%A5%E5%BF%97/",{loader:()=>i.e(8295).then(i.bind(i,26139)),meta:{t:"01 Log日志"}}],["/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/",{loader:()=>i.e(7870).then(i.bind(i,44715)),meta:{t:"34 基础加强（日志，类加载器，单元测试，xml，注解）"}}],["/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/02-%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/",{loader:()=>i.e(8990).then(i.bind(i,69814)),meta:{t:"02 类加载器"}}],["/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/03-xml/",{loader:()=>i.e(4726).then(i.bind(i,42302)),meta:{t:"03 Xml"}}],["/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/04-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/",{loader:()=>i.e(754).then(i.bind(i,34689)),meta:{t:"04 单元测试"}}],["/posts/java/basic/34-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E6%97%A5%E5%BF%97%EF%BC%8C%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%EF%BC%8C%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%EF%BC%8Cxml%EF%BC%8C%E6%B3%A8%E8%A7%A3%EF%BC%89/05-%E6%B3%A8%E8%A7%A3/",{loader:()=>i.e(4854).then(i.bind(i,12472)),meta:{t:"05 注解"}}],["/category/",{loader:()=>i.e(3583).then(i.bind(i,3233)),meta:{t:"分类",I:!1}}],["/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>i.e(4021).then(i.bind(i,37062)),meta:{t:"使用指南 分类",I:!1}}],["/category/idea/",{loader:()=>i.e(739).then(i.bind(i,64336)),meta:{t:"idea 分类",I:!1}}],["/category/linux/",{loader:()=>i.e(8654).then(i.bind(i,70332)),meta:{t:"linux 分类",I:!1}}],["/category/mysql/",{loader:()=>i.e(1006).then(i.bind(i,37667)),meta:{t:"mysql 分类",I:!1}}],["/category/java/",{loader:()=>i.e(8236).then(i.bind(i,1730)),meta:{t:"java 分类",I:!1}}],["/category/network/",{loader:()=>i.e(150).then(i.bind(i,3942)),meta:{t:"network 分类",I:!1}}],["/category/redis/",{loader:()=>i.e(7).then(i.bind(i,21902)),meta:{t:"redis 分类",I:!1}}],["/category/windows/",{loader:()=>i.e(433).then(i.bind(i,93729)),meta:{t:"windows 分类",I:!1}}],["/category/dependence/",{loader:()=>i.e(7053).then(i.bind(i,32087)),meta:{t:"dependence 分类",I:!1}}],["/category/spring/",{loader:()=>i.e(9097).then(i.bind(i,97494)),meta:{t:"spring 分类",I:!1}}],["/category/python/",{loader:()=>i.e(1034).then(i.bind(i,99983)),meta:{t:"python 分类",I:!1}}],["/category/java/",{loader:()=>i.e(8236).then(i.bind(i,1730)),meta:{t:"Java 分类",I:!1}}],["/category/%E6%A1%86%E6%9E%B6/",{loader:()=>i.e(168).then(i.bind(i,18056)),meta:{t:"框架 分类",I:!1}}],["/category/spring/",{loader:()=>i.e(9097).then(i.bind(i,97494)),meta:{t:"Spring 分类",I:!1}}],["/category/spring%E7%BB%BC%E5%90%88/",{loader:()=>i.e(797).then(i.bind(i,48482)),meta:{t:"Spring综合 分类",I:!1}}],["/category/spring%E6%A0%B8%E5%BF%83/",{loader:()=>i.e(5164).then(i.bind(i,2936)),meta:{t:"Spring核心 分类",I:!1}}],["/category/spring%E6%95%B0%E6%8D%AE/",{loader:()=>i.e(6815).then(i.bind(i,33068)),meta:{t:"Spring数据 分类",I:!1}}],["/category/springweb/",{loader:()=>i.e(6729).then(i.bind(i,81638)),meta:{t:"SpringWeb 分类",I:!1}}],["/category/springio/",{loader:()=>i.e(7345).then(i.bind(i,50976)),meta:{t:"SpringIO 分类",I:!1}}],["/category/spring%E9%9B%86%E6%88%90/",{loader:()=>i.e(7975).then(i.bind(i,61837)),meta:{t:"Spring集成 分类",I:!1}}],["/category/spring%E5%AE%89%E5%85%A8/",{loader:()=>i.e(3912).then(i.bind(i,25392)),meta:{t:"Spring安全 分类",I:!1}}],["/category/spring%E5%85%B6%E4%BB%96/",{loader:()=>i.e(769).then(i.bind(i,71118)),meta:{t:"Spring其他 分类",I:!1}}],["/tag/",{loader:()=>i.e(1797).then(i.bind(i,60951)),meta:{t:"标签",I:!1}}],["/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{loader:()=>i.e(602).then(i.bind(i,99462)),meta:{t:"标签: 页面配置",I:!1}}],["/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>i.e(1431).then(i.bind(i,8210)),meta:{t:"标签: 使用指南",I:!1}}],["/tag/linux/",{loader:()=>i.e(4316).then(i.bind(i,45922)),meta:{t:"标签: linux",I:!1}}],["/tag/tomcat/",{loader:()=>i.e(1986).then(i.bind(i,75925)),meta:{t:"标签: tomcat",I:!1}}],["/tag/shell/",{loader:()=>i.e(472).then(i.bind(i,42614)),meta:{t:"标签: shell",I:!1}}],["/tag/sql/",{loader:()=>i.e(5374).then(i.bind(i,60071)),meta:{t:"标签: sql",I:!1}}],["/tag/bug/",{loader:()=>i.e(6504).then(i.bind(i,12914)),meta:{t:"标签: bug",I:!1}}],["/tag/internet/",{loader:()=>i.e(9375).then(i.bind(i,74062)),meta:{t:"标签: internet",I:!1}}],["/tag/java/",{loader:()=>i.e(7869).then(i.bind(i,53691)),meta:{t:"标签: java",I:!1}}],["/tag/spring/",{loader:()=>i.e(6847).then(i.bind(i,40551)),meta:{t:"标签: spring",I:!1}}],["/tag/springboot/",{loader:()=>i.e(1159).then(i.bind(i,73821)),meta:{t:"标签: springboot",I:!1}}],["/tag/redis/",{loader:()=>i.e(8857).then(i.bind(i,41774)),meta:{t:"标签: redis",I:!1}}],["/tag/script/",{loader:()=>i.e(9969).then(i.bind(i,80696)),meta:{t:"标签: script",I:!1}}],["/tag/java-basic/",{loader:()=>i.e(4101).then(i.bind(i,23337)),meta:{t:"标签: java-basic",I:!1}}],["/tag/logback/",{loader:()=>i.e(2931).then(i.bind(i,93858)),meta:{t:"标签: logback",I:!1}}],["/tag/maven/",{loader:()=>i.e(9405).then(i.bind(i,88321)),meta:{t:"标签: maven",I:!1}}],["/tag/mybatis/",{loader:()=>i.e(3223).then(i.bind(i,95115)),meta:{t:"标签: mybatis",I:!1}}],["/tag/netty/",{loader:()=>i.e(70).then(i.bind(i,21707)),meta:{t:"标签: netty",I:!1}}],["/tag/nio/",{loader:()=>i.e(7936).then(i.bind(i,27565)),meta:{t:"标签: nio",I:!1}}],["/tag/javaweb/",{loader:()=>i.e(4172).then(i.bind(i,64741)),meta:{t:"标签: javaweb",I:!1}}],["/tag/http/",{loader:()=>i.e(4226).then(i.bind(i,83428)),meta:{t:"标签: http",I:!1}}],["/tag/servlet/",{loader:()=>i.e(6611).then(i.bind(i,32189)),meta:{t:"标签: servlet",I:!1}}],["/tag/request/",{loader:()=>i.e(7435).then(i.bind(i,78061)),meta:{t:"标签: Request",I:!1}}],["/tag/response/",{loader:()=>i.e(3301).then(i.bind(i,11006)),meta:{t:"标签: Response",I:!1}}],["/tag/jdbc/",{loader:()=>i.e(2703).then(i.bind(i,28650)),meta:{t:"标签: jdbc",I:!1}}],["/tag/djgango/",{loader:()=>i.e(8048).then(i.bind(i,9529)),meta:{t:"标签: djgango",I:!1}}],["/tag/java/",{loader:()=>i.e(7869).then(i.bind(i,53691)),meta:{t:"标签: Java",I:!1}}],["/tag/%E6%A1%86%E6%9E%B6/",{loader:()=>i.e(6606).then(i.bind(i,6807)),meta:{t:"标签: 框架",I:!1}}],["/tag/spring/",{loader:()=>i.e(6847).then(i.bind(i,40551)),meta:{t:"标签: Spring",I:!1}}],["/tag/springboot/",{loader:()=>i.e(1159).then(i.bind(i,73821)),meta:{t:"标签: SpringBoot",I:!1}}],["/tag/%E9%9D%A2%E8%AF%95/",{loader:()=>i.e(243).then(i.bind(i,856)),meta:{t:"标签: 面试",I:!1}}],["/tag/bean/",{loader:()=>i.e(9976).then(i.bind(i,22343)),meta:{t:"标签: Bean",I:!1}}],["/tag/beandefinition/",{loader:()=>i.e(8865).then(i.bind(i,5839)),meta:{t:"标签: BeanDefinition",I:!1}}],["/tag/ioc/",{loader:()=>i.e(5551).then(i.bind(i,67005)),meta:{t:"标签: IOC",I:!1}}],["/tag/%E4%BE%9D%E8%B5%96%E6%9F%A5%E6%89%BE/",{loader:()=>i.e(2422).then(i.bind(i,83770)),meta:{t:"标签: 依赖查找",I:!1}}],["/tag/%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5/",{loader:()=>i.e(6).then(i.bind(i,96461)),meta:{t:"标签: 依赖注入",I:!1}}],["/tag/aop/",{loader:()=>i.e(6830).then(i.bind(i,85731)),meta:{t:"标签: AOP",I:!1}}],["/tag/resource/",{loader:()=>i.e(4742).then(i.bind(i,81272)),meta:{t:"标签: Resource",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A/",{loader:()=>i.e(8507).then(i.bind(i,16797)),meta:{t:"标签: 数据绑定",I:!1}}],["/tag/%E6%95%B0%E6%8D%AE%E5%BA%93/",{loader:()=>i.e(4817).then(i.bind(i,12875)),meta:{t:"标签: 数据库",I:!1}}],["/tag/datasource/",{loader:()=>i.e(23).then(i.bind(i,36861)),meta:{t:"标签: DataSource",I:!1}}],["/tag/jdbc/",{loader:()=>i.e(2703).then(i.bind(i,28650)),meta:{t:"标签: JDBC",I:!1}}],["/tag/jdbctemplate/",{loader:()=>i.e(6809).then(i.bind(i,62927)),meta:{t:"标签: JdbcTemplate",I:!1}}],["/tag/%E4%BA%8B%E5%8A%A1/",{loader:()=>i.e(5426).then(i.bind(i,33347)),meta:{t:"标签: 事务",I:!1}}],["/tag/jpa/",{loader:()=>i.e(7419).then(i.bind(i,52266)),meta:{t:"标签: JPA",I:!1}}],["/tag/mybatis/",{loader:()=>i.e(3223).then(i.bind(i,95115)),meta:{t:"标签: MyBatis",I:!1}}],["/tag/pagehelper/",{loader:()=>i.e(8285).then(i.bind(i,22160)),meta:{t:"标签: PageHelper",I:!1}}],["/tag/mapper/",{loader:()=>i.e(1943).then(i.bind(i,26230)),meta:{t:"标签: Mapper",I:!1}}],["/tag/redis/",{loader:()=>i.e(8857).then(i.bind(i,41774)),meta:{t:"标签: Redis",I:!1}}],["/tag/mongodb/",{loader:()=>i.e(9416).then(i.bind(i,75579)),meta:{t:"标签: MongoDB",I:!1}}],["/tag/elasticsearch/",{loader:()=>i.e(8361).then(i.bind(i,37511)),meta:{t:"标签: Elasticsearch",I:!1}}],["/tag/web/",{loader:()=>i.e(2660).then(i.bind(i,57940)),meta:{t:"标签: Web",I:!1}}],["/tag/controller/",{loader:()=>i.e(7010).then(i.bind(i,55167)),meta:{t:"标签: Controller",I:!1}}],["/tag/dispatcherservlet/",{loader:()=>i.e(7212).then(i.bind(i,19670)),meta:{t:"标签: DispatcherServlet",I:!1}}],["/tag/filter/",{loader:()=>i.e(8088).then(i.bind(i,50466)),meta:{t:"标签: Filter",I:!1}}],["/tag/cors/",{loader:()=>i.e(2707).then(i.bind(i,74776)),meta:{t:"标签: CORS",I:!1}}],["/tag/view/",{loader:()=>i.e(8632).then(i.bind(i,20409)),meta:{t:"标签: View",I:!1}}],["/tag/%E5%BC%82%E6%AD%A5/",{loader:()=>i.e(6339).then(i.bind(i,28527)),meta:{t:"标签: 异步",I:!1}}],["/tag/json/",{loader:()=>i.e(40).then(i.bind(i,28229)),meta:{t:"标签: JSON",I:!1}}],["/tag/%E9%82%AE%E4%BB%B6/",{loader:()=>i.e(214).then(i.bind(i,40234)),meta:{t:"标签: 邮件",I:!1}}],["/tag/io/",{loader:()=>i.e(4086).then(i.bind(i,90795)),meta:{t:"标签: IO",I:!1}}],["/tag/%E9%9B%86%E6%88%90/",{loader:()=>i.e(9236).then(i.bind(i,6607)),meta:{t:"标签: 集成",I:!1}}],["/tag/%E7%BC%93%E5%AD%98/",{loader:()=>i.e(6822).then(i.bind(i,1694)),meta:{t:"标签: 缓存",I:!1}}],["/tag/%E8%B0%83%E5%BA%A6%E5%99%A8/",{loader:()=>i.e(7765).then(i.bind(i,55302)),meta:{t:"标签: 调度器",I:!1}}],["/tag/dubbo/",{loader:()=>i.e(4894).then(i.bind(i,65853)),meta:{t:"标签: Dubbo",I:!1}}],["/tag/%E5%AE%89%E5%85%A8/",{loader:()=>i.e(6123).then(i.bind(i,64610)),meta:{t:"标签: 安全",I:!1}}],["/article/",{loader:()=>i.e(7511).then(i.bind(i,2772)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>i.e(7199).then(i.bind(i,70353)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>i.e(5464).then(i.bind(i,14695)),meta:{t:"时间轴",I:!1}}]])},58761:(a,e,i)=>{i.d(e,{U:()=>n});const n=JSON.parse('{"base":"/blog/","lang":"zh-CN","title":"coder-xuyong","description":"以 vuepress-theme-hope 为模板的博客","head":[["script",{},"\\n      // console.log(666)\\n      "],["link",{"rel":"icon","href":"logo.png"}]],"locales":{}}')},26653:(a,e,i)=>{i.d(e,{K:()=>n});const n=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$jhD3CvifVzie3xmNwiORJupukrFvjCwsVFjmgy6q1SR4KjDj66tlK"]}},"author":{"name":"xuyong","url":"https://github.com/coder-xuyong"},"logo":"/logo.svg","repo":"coder-xuyong/blog","docsDir":"src","focus":false,"pure":false,"print":false,"footer":"我虽无意逐鹿 却知苍生苦楚","displayFooter":true,"navbarLayout":{"start":["Brand"],"end":["Links","Repo","Outlook","Search"]},"blog":{"description":"重生之我在提瓦特大陆当牛做马","intro":"/intro.html","medias":{"Baidu":"https://www.baidu.com","BiliBili":"https://www.bilibili.com","GitHub":"https://github.com","Overflow":{"icon":"https://stackoverflow.co/favicon.ico","link":"https://stackoverflow.co"},"Tongyi":{"icon":"https://img.alicdn.com/imgextra/i1/O1CN01asLYeX1WhbsyEZn5u_!!6000000002820-55-tps-56-56.svg","link":"https://tongyi.aliyun.com"},"Vuepress":{"icon":"https://theme-hope-assets.vuejs.press/logo.svg","link":"https://vuepress.vuejs.org/zh/"},"Yuanshen":{"icon":"https://ys.mihoyo.com/main/favicon.ico","link":"https://ys.mihoyo.com/main/"},"fontawesome":{"icon":"https://fontawesome.com/favicon.ico","link":"https://fontawesome.com/search?o=r&m=free"},"Doubao":{"icon":"https://img-s.msn.cn/tenant/amp/entityid/BB1qZI2R.img","link":"https://www.doubao.com/"},"ChatGPT":{"icon":"https://cdn.oaistatic.com/assets/favicon-o20kmmos.svg","link":"https://chatgpt.com/"}}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/",{"text":"java 基础","icon":"fa-brands fa-java","link":"/posts/java/basic/"},{"text":"spring","icon":"fa-solid fa-glasses","link":"/posts/java/spring/"},{"text":"框架","icon":"fa-solid fa-book","prefix":"/posts/java/","children":[{"text":"netty","prefix":"netty/","children":["Netty01-nio","Netty02-入门","Netty03-进阶","Netty04-优化与源码"]},{"text":"spring","prefix":"spring/","children":["spring"]},{"text":"spring","icon":"fa-solid fa-glasses","link":"/posts/java/spring/"}]},{"text":"V2 文档","icon":"book","link":"https://theme-hope.vuejs.press/zh/"}],"sidebar":{"/":["","intro",{"text":"文章","icon":"book","prefix":"posts/","children":"structure"}]}}}}')},74923:(a,e,i)=>{},38123:(a,e,i)=>{i.d(e,{v:()=>n});const n={"/posts/":["markdown",{text:"Idea",prefix:"idea/",collapsible:!0,children:["idea"]},{text:"Java",prefix:"java/",collapsible:!0,children:[{text:"Basic",prefix:"basic/",collapsible:!0,children:[{text:"01 Java入门",prefix:"01-Java入门/",collapsible:!0,children:["01-Java基础语法"]},{text:"02 Java基础概念",prefix:"02-Java基础概念/",collapsible:!0,children:["02-Java基础语法"]},{text:"03 Java运算符",prefix:"03-Java运算符/",collapsible:!0,children:["03笔记"]},{text:"04 判断和循环",prefix:"04-判断和循环/",collapsible:!0,children:["day04-流程控制语句"]},{text:"05 循环高级和数组",prefix:"05-循环高级和数组/",collapsible:!0,children:["循环高级","数组"]},{text:"06 方法",prefix:"06-方法/",collapsible:!0,children:["方法"]},{text:"07 综合练习",prefix:"07-综合练习/",collapsible:!0,children:["综合练习"]},{text:"08 面向对象",prefix:"08-面向对象/",collapsible:!0,children:["day08-面向对象"]},{text:"09 面向对象综合训练",prefix:"09-面向对象综合训练/",collapsible:!0,children:["扩展：键盘录入笔记","面向对象综合训练综合练习"]},{text:"10 字符串",prefix:"10-字符串/",collapsible:!0,children:["常用API"]},{text:"11 集合&学生管理系统",prefix:"11-集合_学生管理系统/",collapsible:!0,children:["/posts/java/basic/11-%E9%9B%86%E5%90%88_%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/ArrayList_%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F.html"]},{text:"13 面向对象进阶（static&继承）",prefix:"13-面向对象进阶（static_继承）/",collapsible:!0,children:["/posts/java/basic/13-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88static_%E7%BB%A7%E6%89%BF%EF%BC%89/day13%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6.html"]},{text:"14 面向对象进阶（多态&包&final&权限修饰符&代码块）",prefix:"14-面向对象进阶（多态_包_final_权限修饰符_代码块）/",collapsible:!0,children:["/posts/java/basic/14-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E5%A4%9A%E6%80%81_%E5%8C%85_final_%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6_%E4%BB%A3%E7%A0%81%E5%9D%97%EF%BC%89/day14%E7%AC%94%E8%AE%B0.html"]},{text:"15 面向对象进阶（抽象类&接口&内部类）",prefix:"15-面向对象进阶（抽象类_接口_内部类）/",collapsible:!0,children:["/posts/java/basic/15-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%BF%9B%E9%98%B6%EF%BC%88%E6%8A%BD%E8%B1%A1%E7%B1%BB_%E6%8E%A5%E5%8F%A3_%E5%86%85%E9%83%A8%E7%B1%BB%EF%BC%89/day15%E7%AC%94%E8%AE%B0.html"]},{text:"16 面向对象综合练习（上）",prefix:"16-面向对象综合练习（上）/",collapsible:!0,children:["day16-面向对象综合练习（上）"]},{text:"17 面向对象综合练习（下）",prefix:"17-面向对象综合练习（下）/",collapsible:!0,children:["day17-面向对象综合练习（下）"]},{text:"18 API（常见 API，对象克隆）",prefix:"18-API（常见API，对象克隆）/",collapsible:!0,children:["API"]},{text:"19 API（正则表达式）",prefix:"19-API（正则表达式）/",collapsible:!0,children:["正则表达式"]},{text:"20 API（时间，包装类，练习）",prefix:"20-API（时间，包装类，练习）/",collapsible:!0,children:["API"]},{text:"21 API（算法，lambda，练习）",prefix:"21-API（算法，lambda，练习）/",collapsible:!0,children:["算法"]},{text:"22 集合（ List集合）",prefix:"22-集合（List集合）/",collapsible:!0,children:["集合01"]},{text:"23 集合（泛型& Set&数据结构）",prefix:"23-集合（泛型_Set_数据结构）/",collapsible:!0,children:["/posts/java/basic/23-%E9%9B%86%E5%90%88%EF%BC%88%E6%B3%9B%E5%9E%8B_Set_%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%89/%E9%9B%86%E5%90%8802.html"]},{text:"24 集合（ Map&可变参数&集合工具类）",prefix:"24-集合（Map_可变参数_集合工具类）/",collapsible:!0,children:["/posts/java/basic/24-%E9%9B%86%E5%90%88%EF%BC%88Map_%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0_%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%EF%BC%89/%E9%9B%86%E5%90%8803.html"]},{text:"25 阶段项目（综合练习&doudizhu游戏）",prefix:"25-阶段项目（综合练习_doudizhu游戏）/",collapsible:!0,children:["/posts/java/basic/25-%E9%98%B6%E6%AE%B5%E9%A1%B9%E7%9B%AE%EF%BC%88%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0_doudizhu%E6%B8%B8%E6%88%8F%EF%BC%89/%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0_%E7%BB%BC%E5%90%88%E7%BB%83%E4%B9%A0.html"]},{text:"26 集合（ Stream流&方法引用）",prefix:"26-集合（Stream流_方法引用）/",collapsible:!0,children:["/posts/java/basic/26-%E9%9B%86%E5%90%88%EF%BC%88Stream%E6%B5%81_%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%EF%BC%89/stream%E6%B5%81%E5%92%8C%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8.html"]},{text:"27 IO(异常& File&综合案例）",prefix:"27-IO(异常_File_综合案例）/",collapsible:!0,children:["/posts/java/basic/27-IO(%E5%BC%82%E5%B8%B8_File_%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89/IO(%E5%BC%82%E5%B8%B8_File_%E7%BB%BC%E5%90%88%E6%A1%88%E4%BE%8B%EF%BC%89.html"]},{text:"28 IO（字节流&字符流）",prefix:"28-IO（字节流_字符流）/",collapsible:!0,children:["/posts/java/basic/28-IO%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81_%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89/IO%E6%B5%81%EF%BC%88%E5%AD%97%E8%8A%82%E6%B5%81_%E5%AD%97%E7%AC%A6%E6%B5%81%EF%BC%89.html"]},{text:"29 IO（其他流）",prefix:"29-IO（其他流）/",collapsible:!0,children:["IO流（其他流）"]},{text:"30 多线程",prefix:"30-多线程/",collapsible:!0,children:["多线程01"]},{text:"31 多线程&juc",prefix:"31-多线程_juc/",collapsible:!0,children:["/posts/java/basic/31-%E5%A4%9A%E7%BA%BF%E7%A8%8B_juc/%E5%A4%9A%E7%BA%BF%E7%A8%8B02.html"]},{text:"32 网络编程",prefix:"32-网络编程/",collapsible:!0,children:["网络编程"]},{text:"33 基础加强（反射，动态代理）",prefix:"33-基础加强（反射，动态代理）/",collapsible:!0,children:["/posts/java/basic/33-%E5%9F%BA%E7%A1%80%E5%8A%A0%E5%BC%BA%EF%BC%88%E5%8F%8D%E5%B0%84%EF%BC%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%EF%BC%89/%E5%8F%8D%E5%B0%84_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86.html"]},{text:"34 基础加强（日志，类加载器，单元测试，xml，注解）",prefix:"34-基础加强（日志，类加载器，单元测试，xml，注解）/",collapsible:!0,children:[{text:"01 Log日志",prefix:"01-log日志/",collapsible:!0,children:["log日志"]},{text:"02 类加载器",prefix:"02-类加载器/",collapsible:!0,children:["类加载器"]},{text:"03 Xml",prefix:"03-xml/",collapsible:!0,children:["xml"]},{text:"04 单元测试",prefix:"04-单元测试/",collapsible:!0,children:["单元测试"]},{text:"05 注解",prefix:"05-注解/",collapsible:!0,children:["注解"]}]},"ioStream","regularExpression","3.java-basic","4.collection","jottings","java8Stream","comparator","1.object-oriented-programming","multithreading","2.three-features"]},{text:"Bug",prefix:"bug/",collapsible:!0,children:["bug"]},{text:"Dependence",prefix:"dependence/",collapsible:!0,children:["docx4j","log","mybatis","netty","maven"]},{text:"Netty",prefix:"netty/",collapsible:!0,children:["Netty01-nio","Netty02-入门","Netty03-进阶","Netty04-优化与源码"]},{text:"Spring",prefix:"spring/",collapsible:!0,children:[{text:"10 Spring安全",prefix:"10-Spring安全/",collapsible:!0,children:["/pages/568352/"]},{text:"Spring IO",prefix:"04-SpringIO/",collapsible:!0,children:["/pages/92add2/","/pages/676725/","/pages/2586f1/"]},{text:"Spring Web",prefix:"03-SpringWeb/",collapsible:!0,children:["/pages/ad0516/","/pages/20287b/","/pages/251e31/","/pages/1d2954/","/pages/4a164d/","/pages/5d002f/","/pages/65351b/"]},{text:"Spring 其他",prefix:"99-Spring其他/",collapsible:!0,children:["/pages/752c6a/","/pages/bac2ce/","/pages/c013cc/"]},"spring",{text:"Spring 数据篇",prefix:"02-Spring数据/",collapsible:!0,children:["/pages/1b774c/","/pages/cf19fd/","/pages/128c54/","/pages/a03d7b/","/pages/88219e/","/pages/191cdb/","/pages/65e4a2/","/pages/db2a41/","/pages/fac14c/"]},{text:"Spring 核心",prefix:"01-Spring核心/",collapsible:!0,children:["/pages/68097d/","/pages/915530/","/pages/9a6f6b/","/pages/f61a1c/","/pages/a5f257/","/pages/8289f5/","/pages/4ab176/","/pages/55f315/","/pages/ad472e/","/pages/53aedb/","/pages/a1549f/","/pages/fe6aad/","/pages/267b4c/","/pages/6662dc/","/pages/1f743f/","/pages/cca414/","/pages/b5b8ad/","/pages/175cbd/","/pages/b6556f/","/pages/03d838/","/pages/950e4d/","/pages/0fb992/","/pages/cb598e/"]},{text:"Spring 综述",prefix:"00-Spring综合/",collapsible:!0,children:["/pages/9d3091/","/pages/db33b0/","/pages/dbf521/","/pages/430f53/"]},{text:"Spring 集成",prefix:"05-Spring集成/",collapsible:!0,children:["/pages/a311cb/","/pages/a187f0/","/pages/274fd7/"]},"spring面试题"]},{text:"Springboot",prefix:"springboot/",collapsible:!0,children:["workcondition"]},{text:"Web",prefix:"web/",collapsible:!0,children:["/posts/java/web/HTTP_Tomcat_Servlet.html","jdbc","/posts/java/web/Request_Response.html"]}]},{text:"Linux",prefix:"linux/",collapsible:!0,children:["linux","linuxWork"]},{text:"Mysql",prefix:"mysql/",collapsible:!0,children:["DDL","/posts/mysql/DML_DQL.html","mysql存储过程","mysql安装","mysql数据格式","mysqlBug","mysql约束","mysql自定义函数","mysql触发器"]},{text:"Network",prefix:"network/",collapsible:!0,children:["ftp","internet"]},{text:"Python",prefix:"python/",collapsible:!0,children:[{text:"Django",prefix:"django/",collapsible:!0,children:["djangoWork"]}]},{text:"Redis",prefix:"redis/",collapsible:!0,children:["redisBUG","redis 学习笔记之实战篇","redis 学习笔记之快速入门"]},{text:"Shell",prefix:"shell/",collapsible:!0,children:["shell","shellWork"]},{text:"Windows",prefix:"windows/",collapsible:!0,children:["workcondition"]}]}},32878:(a,e,i)=>{i.d(e,{P:()=>n});const n={Baidu:'<svg xmlns="http://www.w3.org/2000/svg" class="icon baidu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2319DC"/><path fill="#FFF" d="M320 528c65-14 56-92 54-109-3-26-34-72-76-68-52 4-60 81-60 81-7 35 17 110 82 96m121-131c36 0 65-41 65-92 0-52-29-93-65-93s-65 41-65 93c0 51 29 92 65 92m155 7c48 6 79-46 86-85 6-38-25-84-59-91-35-8-77 46-81 82-5 44 6 87 54 94m191 65c0-19-15-75-73-75-57 0-65 53-65 91 0 35 3 85 75 84 71-2 63-81 63-100m-73 163s-74-57-118-119c-59-92-142-55-170-8s-72 76-78 84-90 53-71 135c18 83 83 81 83 81s49 5 104-7c56-13 104 3 104 3s131 43 166-41c36-84-20-128-20-128"/><path fill="#2319DC" d="M453 552v56h-45s-46 3-61 54c-6 35 4 55 6 59s17 29 53 37h85V553zm-1 172h-34s-24-1-31-29c-4-12 0-26 2-31 2-6 10-19 26-23h37zm60-111v107s2 27 39 37h98V613h-42v108h-40s-13-2-16-12v-97z"/></svg>',BiliBili:'<svg xmlns="http://www.w3.org/2000/svg" class="icon bilibili-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1296db"/><path fill="#fff" d="M745.363 177.725a47 47 0 0 1 0 66.3L702.5 286.85h44A141 141 0 0 1 887 427.512v281.25a141 141 0 0 1-141 140.626H277.25A141 141 0 0 1 137 708.763v-281.25a141 141 0 0 1 141-141h43.725l-42.788-42.825a47 47 0 1 1 66.263-66.3l99.45 99.45c2.963 2.962 5.438 6.187 7.425 9.637h120.487c1.988-3.45 4.5-6.75 7.463-9.675l99.413-99.45a47 47 0 0 1 66.3 0zm1.012 203.25h-468.75a47 47 0 0 0-46.763 43.388l-.112 3.525v281.25c0 24.712 19.125 44.962 43.387 46.724l3.488.15h468.75a47 47 0 0 0 46.763-43.387l.112-3.487v-281.25c0-26-21-47-47-46.876zm-375 93.75c26 0 47 21 47 47v47a47 47 0 1 1-93.75 0V521.6c0-26 21-47 47-47zm281.25 0c26 0 47 21 47 47v47a47 47 0 1 1-93.75 0V521.6c0-26 21-47 47-47z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'}}},a=>{a.O(0,[4491,5256],(()=>a(a.s=38731))),a.O()}]);