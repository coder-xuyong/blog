"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2475],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,t]of s)a[i]=t;return a}},6100:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>n,data:()=>l});var t=a(641);const e={},n=(0,a(6262).A)(e,[["render",function(i,s){return(0,t.uX)(),(0,t.CE)("div",null,[s[0]||(s[0]=(0,t.Lk)("p",null,"java 零碎知识点记录",-1)),(0,t.Q3)(" more "),s[1]||(s[1]=(0,t.Fv)('<h2 id="去除科学计数法" tabindex="-1"><a class="header-anchor" href="#去除科学计数法"><span>去除科学计数法</span></a></h2><p>将其转为大精度直接输出<br> 首先，需要将科学计数法转换成一下：<br> 例如：<br> BigDecimal bd = new BigDecimal(&quot;3.40256010353E11&quot;);<br> 然后转换成字符串：<br> String str = bd.toPlainString();<br> 如果这个数字的长度是在int的范围内的话，是可以转换成int类型：<br> int a = Integer.parsInt(str);<br> 如果这个数字的长度不是在Int范围内的话，得到的就不是你想要的数字了！换其他类型</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">BigDecimal</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> bg</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BigDecimal</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(val</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//去除科学计数法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="时间戳转为日期格式" tabindex="-1"><a class="header-anchor" href="#时间戳转为日期格式"><span>时间戳转为日期格式</span></a></h2><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timeStamp2Date</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> time) {</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Long</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> timeLong </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Long</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parseLong</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(time);</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        SimpleDateFormat</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> sdf </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> SimpleDateFormat</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//要转换的时间格式</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Date</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        date </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> sdf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sdf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(timeLong));</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> sdf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">format</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(date);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        } </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ParseException</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        e</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="判断一个字符串是否能转为数字" tabindex="-1"><a class="header-anchor" href="#判断一个字符串是否能转为数字"><span>判断一个字符串是否能转为数字</span></a></h2><p>isNumeric方法</p><h2 id="byte-高位-低位-大端格式-小端格式" tabindex="-1"><a class="header-anchor" href="#byte-高位-低位-大端格式-小端格式"><span>Byte 高位/低位（大端格式/小端格式）</span></a></h2><p>一个byte由8个二进制位构成1个字节,即1Byte=8Bit<br> 其中左边是高位，右边是低位。<br> high_four = (byte &amp; 0xf0) &gt;&gt; 4; (0xf0=11110000)<br> low_four = byte &amp; 0x0f; (0x0f=00001111)<br> 0&amp;1=0,1&amp;1=1。所以byte&amp;0x0f就是byte&amp;00001111。不管byte的高四位是多少，&amp;上0x0f的高四位(0000)之后，都是0。不管<br> byte的低四位是多少，&amp;上0x0f的低四位(1111)之后，都会保存原值。</p><p>比如byte是11010111。byte的高四位是1101。&amp;上0x0f的高四位0000之后，得到的值是0000。因为1&amp;0=0,0&amp;0也等于0。<br> byte的低四位是0111。&amp;上0x0f的低四位1111之后，得到的值是0111。也就是原来的值。所以11010111&amp;0x0f就是00000111。也就是把byte<br> 的高四位变成0，低四位保持原值。所以取低四位的值就是byte&amp;0x0f。<br> 要取得byte的高四位。就是byte &amp; 0xf0也就是11010111&amp;11110000=11010000。然后再右移四位。变成1101。</p>',10))])}]]),l=JSON.parse('{"path":"/posts/java/base/jottings.html","title":"java 零碎知识点","lang":"zh-CN","frontmatter":{"title":"java 零碎知识点","icon":"pen-to-square","date":"2023-06-04T00:00:00.000Z","lastUpdated":true,"order":1,"category":["java"],"tag":["javabase"],"description":"java 零碎知识点记录","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/java/base/jottings.html"}],["meta",{"property":"og:site_name","content":"coder"}],["meta",{"property":"og:title","content":"java 零碎知识点"}],["meta",{"property":"og:description","content":"java 零碎知识点记录"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-22T14:03:31.000Z"}],["meta",{"property":"article:tag","content":"javabase"}],["meta",{"property":"article:published_time","content":"2023-06-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-22T14:03:31.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"java 零碎知识点\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-04T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-22T14:03:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"去除科学计数法","slug":"去除科学计数法","link":"#去除科学计数法","children":[]},{"level":2,"title":"时间戳转为日期格式","slug":"时间戳转为日期格式","link":"#时间戳转为日期格式","children":[]},{"level":2,"title":"判断一个字符串是否能转为数字","slug":"判断一个字符串是否能转为数字","link":"#判断一个字符串是否能转为数字","children":[]},{"level":2,"title":"Byte 高位/低位（大端格式/小端格式）","slug":"byte-高位-低位-大端格式-小端格式","link":"#byte-高位-低位-大端格式-小端格式","children":[]}],"git":{"createdTime":1734876211000,"updatedTime":1734876211000,"contributors":[{"name":"coder-xuyong","username":"coder-xuyong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/coder-xuyong"}]},"readingTime":{"minutes":1.62,"words":487},"filePathRelative":"posts/java/base/jottings.md","localizedDate":"2023年6月4日","excerpt":"<p>java 零碎知识点记录</p>\\n","autoDesc":true}')}}]);