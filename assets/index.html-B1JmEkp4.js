import{_ as s,c as a,b as e,o as t}from"./app-YpXT1RvH.js";const l={};function n(h,i){return t(),a("div",null,i[0]||(i[0]=[e(`<h1 id="jsoup-快速入门" tabindex="-1"><a class="header-anchor" href="#jsoup-快速入门"><span>Jsoup 快速入门</span></a></h1><h2 id="简介" tabindex="-1"><a class="header-anchor" href="#简介"><span>简介</span></a></h2><p>jsoup 是一款 Java 的 HTML 解析器，可直接解析某个 URL 地址、HTML 文本内容。它提供了一套非常省力的 API，可通过 DOM，CSS 以及类似于 JQuery 的操作方法来取出和操作数据。</p><p>jsoup 工作的流程主要如下：</p><ol><li>从一个 URL，文件或字符串中解析 HTML，并加载为一个 <code>Document</code> 对象。</li><li>使用 DOM 或 CSS 选择器来取出数据；</li><li>可操作 HTML 元素、属性、文本。</li></ol><p>jsoup 是基于 MIT 协议发布的，可放心使用于商业项目。</p><h2 id="加载" tabindex="-1"><a class="header-anchor" href="#加载"><span>加载</span></a></h2><h3 id="从-html-字符串加载一个文档" tabindex="-1"><a class="header-anchor" href="#从-html-字符串加载一个文档"><span>从 HTML 字符串加载一个文档</span></a></h3><p>使用静态 <code>Jsoup.parse(String html)</code> 方法或 <code>Jsoup.parse(String html, String baseUri)</code> 示例代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> html </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;First parse&lt;/title&gt;&lt;/head&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">  +</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&lt;body&gt;&lt;p&gt;Parsed HTML into a doc.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Document</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> doc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Jsoup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(html);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><p><code>parse(String html, String baseUri)</code> 这方法能够将输入的 HTML 解析为一个新的文档 (Document），参数 baseUri 是用来将相对 URL 转成绝对 URL，并指定从哪个网站获取文档。如这个方法不适用，你可以使用 <code>parse(String html)</code> 方法来解析成 HTML 字符串如上面的示例。</p><p>只要解析的不是空字符串，就能返回一个结构合理的文档，其中包含(至少) 一个 head 和一个 body 元素。</p><p>一旦拥有了一个 Document，你就可以使用 Document 中适当的方法或它父类 <code>Element</code>和<code>Node</code>中的方法来取得相关数据。</p></blockquote><h3 id="解析一个-body-片断" tabindex="-1"><a class="header-anchor" href="#解析一个-body-片断"><span>解析一个 body 片断</span></a></h3><p><strong>问题</strong></p><p>假如你有一个 HTML 片断 (比如. 一个 <code>div</code> 包含一对 <code>p</code> 标签; 一个不完整的 HTML 文档) 想对它进行解析。这个 HTML 片断可以是用户提交的一条评论或在一个 CMS 页面中编辑 body 部分。</p><p><strong>办法</strong></p><p>使用<code>Jsoup.parseBodyFragment(String html)</code>方法.</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>String html = &quot;&lt;div&gt;&lt;p&gt;Lorem ipsum.&lt;/p&gt;&quot;;</span></span>
<span class="line"><span>Document doc = Jsoup.parseBodyFragment(html);</span></span>
<span class="line"><span>Element body = doc.body();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><p><code>parseBodyFragment</code> 方法创建一个空壳的文档，并插入解析过的 HTML 到<code>body</code>元素中。假如你使用正常的 <code>Jsoup.parse(String html)</code> 方法，通常你也可以得到相同的结果，但是明确将用户输入作为 body 片段处理，以确保用户所提供的任何糟糕的 HTML 都将被解析成 body 元素。</p><p><code>Document.body()</code> 方法能够取得文档 body 元素的所有子元素，与 <code>doc.getElementsByTag(&quot;body&quot;)</code>相同。</p></blockquote><h4 id="保证安全-stay-safe" tabindex="-1"><a class="header-anchor" href="#保证安全-stay-safe"><span>保证安全 Stay safe</span></a></h4><p>假如你可以让用户输入 HTML 内容，那么要小心避免跨站脚本攻击。利用基于 <code>Whitelist</code> 的清除器和 <code>clean(String bodyHtml, Whitelist whitelist)</code>方法来清除用户输入的恶意内容。</p><h3 id="从-url-加载一个文档" tabindex="-1"><a class="header-anchor" href="#从-url-加载一个文档"><span>从 URL 加载一个文档</span></a></h3><p>使用 <code>Jsoup.connect(String url)</code>方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Document</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> doc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Jsoup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://example.com/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><p><code>connect(String url)</code> 方法创建一个新的 <code>Connection</code>, 和 <code>get()</code> 取得和解析一个 HTML 文件。如果从该 URL 获取 HTML 时发生错误，便会抛出 IOException，应适当处理。</p></blockquote><p><code>Connection</code> 接口还提供一个方法链来解决特殊请求，具体如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Document</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> doc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Jsoup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://example.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">data</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;query&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Java&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">userAgent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Mozilla&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cookie</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;auth&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;token&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">timeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  .</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">post</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="从一个文件加载一个文档" tabindex="-1"><a class="header-anchor" href="#从一个文件加载一个文档"><span>从一个文件加载一个文档</span></a></h3><p>可以使用静态 <code>Jsoup.parse(File in, String charsetName, String baseUri)</code> 方法</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">File</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> input </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/tmp/input.html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Document</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> doc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Jsoup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(input, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://example.com/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><p><code>parse(File in, String charsetName, String baseUri)</code> 这个方法用来加载和解析一个 HTML 文件。如在加载文件的时候发生错误，将抛出 IOException，应作适当处理。</p><p><code>baseUri</code> 参数用于解决文件中 URLs 是相对路径的问题。如果不需要可以传入一个空的字符串。</p><p>另外还有一个方法<code>parse(File in, String charsetName)</code> ，它使用文件的路径做为 <code>baseUri</code>。 这个方法适用于如果被解析文件位于网站的本地文件系统，且相关链接也指向该文件系统。</p></blockquote><h2 id="解析" tabindex="-1"><a class="header-anchor" href="#解析"><span>解析</span></a></h2><h3 id="使用-dom-方法来遍历一个文档" tabindex="-1"><a class="header-anchor" href="#使用-dom-方法来遍历一个文档"><span>使用 DOM 方法来遍历一个文档</span></a></h3><p><strong>问题</strong></p><p>你有一个 HTML 文档要从中提取数据，并了解这个 HTML 文档的结构。</p><p><strong>方法</strong></p><p>将 HTML 解析成一个<code>Document</code>之后，就可以使用类似于 DOM 的方法进行操作。示例代码：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">File</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> input </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/tmp/input.html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Document</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> doc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Jsoup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(input, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://example.com/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Element</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> content </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementById</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;content&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Elements</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> links </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> content</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getElementsByTag</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Element</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> link </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> links) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> linkHref </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">attr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;href&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> linkText </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><p><code>Elements</code> 这个对象提供了一系列类似于 DOM 的方法来查找元素，抽取并处理其中的数据。</p><p>具体如下：</p><h4 id="查找元素" tabindex="-1"><a class="header-anchor" href="#查找元素"><span>查找元素</span></a></h4><ul><li><code>getElementById(String id)</code></li><li><code>getElementsByTag(String tag)</code></li><li><code>getElementsByClass(String className)</code></li><li><code>getElementsByAttribute(String key)</code> (and related methods)</li><li>Element siblings: <code>siblingElements()</code>, <code>firstElementSibling()</code>, <code>lastElementSibling()</code>;<code>nextElementSibling()</code>, <code>previousElementSibling()</code></li><li>Graph: <code>parent()</code>, <code>children()</code>, <code>child(int index)</code></li></ul><h4 id="元素数据" tabindex="-1"><a class="header-anchor" href="#元素数据"><span>元素数据</span></a></h4><ul><li><code>attr(String key)</code>获取属性<code>attr(String key, String value)</code>设置属性</li><li><code>attributes()</code>获取所有属性</li><li><code>id()</code>, <code>className()</code> and <code>classNames()</code></li><li><code>text()</code>获取文本内容<code>text(String value)</code> 设置文本内容</li><li><code>html()</code>获取元素内 HTML<code>html(String value)</code>设置元素内的 HTML 内容</li><li><code>outerHtml()</code>获取元素外 HTML 内容</li><li><code>data()</code>获取数据内容（例如：script 和 style 标签)</li><li><code>tag()</code> and <code>tagName()</code></li></ul><h4 id="操作-html-和文本" tabindex="-1"><a class="header-anchor" href="#操作-html-和文本"><span>操作 HTML 和文本</span></a></h4><ul><li><code>append(String html)</code>, <code>prepend(String html)</code></li><li><code>appendText(String text)</code>, <code>prependText(String text)</code></li><li><code>appendElement(String tagName)</code>, <code>prependElement(String tagName)</code></li><li><code>html(String value)</code></li></ul><h3 id="使用选择器语法来查找元素" tabindex="-1"><a class="header-anchor" href="#使用选择器语法来查找元素"><span>使用选择器语法来查找元素</span></a></h3><p><strong>问题</strong></p><p>你想使用类似于 CSS 或 jQuery 的语法来查找和操作元素。</p><p><strong>方法</strong></p><p>可以使用<code>Element.select(String selector)</code> 和 <code>Elements.select(String selector)</code> 方法实现：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">File</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> input </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> File</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/tmp/input.html&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Document</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> doc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Jsoup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(input, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;UTF-8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://example.com/&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Elements</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> links </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a[href]&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //带有href属性的a元素</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Elements</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> pngs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;img[src$=.png]&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //扩展名为.png的图片</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Element</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> masthead </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;div.masthead&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //class等于masthead的div标签</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Elements</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> resultLinks </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;h3.r &gt; a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> //在h3元素之后的a元素</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><p>jsoup elements 对象支持类似于<a href="http://www.w3.org/TR/2009/PR-css3-selectors-20091215/" target="_blank" rel="noopener noreferrer">CSS</a> (或<a href="http://jquery.com/" target="_blank" rel="noopener noreferrer">jquery</a>)的选择器语法，来实现非常强大和灵活的查找功能。.</p><p>这个<code>select</code> 方法在<code>Document</code>, <code>Element</code>,或<code>Elements</code>对象中都可以使用。且是上下文相关的，因此可实现指定元素的过滤，或者链式选择访问。</p><p>Select 方法将返回一个<code>Elements</code>集合，并提供一组方法来抽取和处理结果。</p></blockquote><h4 id="selector-选择器概述" tabindex="-1"><a class="header-anchor" href="#selector-选择器概述"><span>Selector 选择器概述</span></a></h4><ul><li><code>tagname</code>: 通过标签查找元素，比如：<code>a</code></li><li><code>ns|tag</code>: 通过标签在命名空间查找元素，比如：可以用 <code>fb|name</code> 语法来查找 \`\` 元素</li><li><code>#id</code>: 通过 ID 查找元素，比如：<code>#logo</code></li><li><code>.class</code>: 通过 class 名称查找元素，比如：<code>.masthead</code></li><li><code>[attribute]</code>: 利用属性查找元素，比如：<code>[href]</code></li><li><code>[^attr]</code>: 利用属性名前缀来查找元素，比如：可以用<code>[^data-]</code> 来查找带有 HTML5 Dataset 属性的元素</li><li><code>[attr=value]</code>: 利用属性值来查找元素，比如：<code>[width=500]</code></li><li><code>[attr^=value]</code>, <code>[attr$=value]</code>, <code>[attr*=value]</code>: 利用匹配属性值开头、结尾或包含属性值来查找元素，比如：<code>[href*=/path/]</code></li><li><code>[attr\\~=regex]</code>: 利用属性值匹配正则表达式来查找元素，比如： <code>img[src\\~=(?i)\\.(png|jpe?g)]</code></li><li><code>*</code>: 这个符号将匹配所有元素</li></ul><h4 id="selector-选择器组合使用" tabindex="-1"><a class="header-anchor" href="#selector-选择器组合使用"><span>Selector 选择器组合使用</span></a></h4><ul><li><code>el##id</code>: 元素+ID，比如： <code>div##logo</code></li><li><code>el.class</code>: 元素+class，比如： <code>div.masthead</code></li><li><code>el[attr]</code>: 元素+class，比如： <code>a[href]</code></li><li>任意组合，比如：<code>a[href].highlight</code></li><li><code>ancestor child</code>: 查找某个元素下子元素，比如：可以用<code>.body p</code> 查找在&quot;body&quot;元素下的所有<code>p</code>元素</li><li><code>parent &gt; child</code>: 查找某个父元素下的直接子元素，比如：可以用<code>div.content &gt; p</code> 查找 <code>p</code> 元素，也可以用<code>body &gt; *</code> 查找 body 标签下所有直接子元素</li><li><code>siblingA + siblingB</code>: 查找在 A 元素之前第一个同级元素 B，比如：<code>div.head + div</code></li><li><code>siblingA \\~ siblingX</code>: 查找 A 元素之前的同级 X 元素，比如：<code>h1 \\~ p</code></li><li><code>el, el, el</code>:多个选择器组合，查找匹配任一选择器的唯一元素，例如：<code>div.masthead, div.logo</code></li></ul><h4 id="伪选择器-selectors" tabindex="-1"><a class="header-anchor" href="#伪选择器-selectors"><span>伪选择器 selectors</span></a></h4><ul><li><code>:lt(n)</code>: 查找哪些元素的同级索引值（它的位置在 DOM 树中是相对于它的父节点）小于 n，比如：<code>td:lt(3)</code> 表示小于三列的元素</li><li><code>:gt(n)</code>:查找哪些元素的同级索引值大于<code>n\`\`，比如</code>： <code>div p:gt(2)</code>表示哪些 div 中有包含 2 个以上的 p 元素</li><li><code>:eq(n)</code>: 查找哪些元素的同级索引值与<code>n</code>相等，比如：<code>form input:eq(1)</code>表示包含一个 input 标签的 Form 元素</li><li><code>:has(seletor)</code>: 查找匹配选择器包含元素的元素，比如：<code>div:has(p)</code>表示哪些 div 包含了 p 元素</li><li><code>:not(selector)</code>: 查找与选择器不匹配的元素，比如： <code>div:not(.logo)</code> 表示不包含 class=logo 元素的所有 div 列表</li><li><code>:contains(text)</code>: 查找包含给定文本的元素，搜索不区分大不写，比如： <code>p:contains(jsoup)</code></li><li><code>:containsOwn(text)</code>: 查找直接包含给定文本的元素</li><li><code>:matches(regex)</code>: 查找哪些元素的文本匹配指定的正则表达式，比如：<code>div:matches((?i)login)</code></li><li><code>:matchesOwn(regex)</code>: 查找自身包含文本匹配指定正则表达式的元素</li><li>注意：上述伪选择器索引是从 0 开始的，也就是说第一个元素索引值为 0，第二个元素 index 为 1 等</li></ul><p>可以查看<code>Selector</code> API 参考来了解更详细的内容</p><h3 id="从元素抽取属性-文本和-html" tabindex="-1"><a class="header-anchor" href="#从元素抽取属性-文本和-html"><span>从元素抽取属性，文本和 HTML</span></a></h3><p><strong>问题</strong></p><p>在解析获得一个 Document 实例对象，并查找到一些元素之后，你希望取得在这些元素中的数据。</p><p><strong>方法</strong></p><ul><li>要取得一个属性的值，可以使用<code>Node.attr(String key)</code> 方法</li><li>对于一个元素中的文本，可以使用<code>Element.text()</code>方法</li><li>对于要取得元素或属性中的 HTML 内容，可以使用<code>Element.html()</code>, 或 <code>Node.outerHtml()</code>方法</li></ul><p>示例：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> html </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;&lt;p&gt;An &lt;a href=&#39;http://example.com/&#39;&gt;&lt;b&gt;example&lt;/b&gt;&lt;/a&gt; link.&lt;/p&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Document</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> doc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Jsoup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">parse</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(html);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//解析HTML字符串返回一个Document实现</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Element</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> link </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//查找第一个a元素</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> text </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">body</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;An example link&quot;//取得字符串中的文本</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> linkHref </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">attr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;href&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;http://example.com/&quot;//取得链接地址</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> linkText </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">text</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;example&quot;&quot;//取得链接地址中的文本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> linkOuterH </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">outerHtml</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // &quot;&lt;a href=&quot;http://example.com&quot;&gt;&lt;b&gt;example&lt;/b&gt;&lt;/a&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> linkInnerH </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;&lt;b&gt;example&lt;/b&gt;&quot;//取得链接内的html内容</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><p>上述方法是元素数据访问的核心办法。此外还其它一些方法可以使用：</p><ul><li><code>Element.id()</code></li><li><code>Element.tagName()</code></li><li><code>Element.className()</code> and <code>Element.hasClass(String className)</code></li></ul><p>这些访问器方法都有相应的 setter 方法来更改数据</p></blockquote><p><strong>参见</strong></p><ul><li><code>Element</code>和<code>Elements</code>集合类的参考文档</li><li><a href="http://www.open-open.com/jsoup/working-with-urls.htm" target="_blank" rel="noopener noreferrer">URLs 处理</a></li><li><a href="http://www.open-open.com/jsoup/selector-syntax.htm" target="_blank" rel="noopener noreferrer">使用 CSS 选择器语法来查找元素</a></li></ul><h3 id="处理-urls" tabindex="-1"><a class="header-anchor" href="#处理-urls"><span>处理 URLs</span></a></h3><p><strong>问题</strong></p><p>你有一个包含相对 URLs 路径的 HTML 文档，需要将这些相对路径转换成绝对路径的 URLs。</p><p><strong>方法</strong></p><ol><li>在你解析文档时确保有指定<code>base URI</code>，然后</li><li>使用 <code>abs:</code> 属性前缀来取得包含<code>base URI</code>的绝对路径。代码如下：</li></ol><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Document</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> doc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Jsoup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">connect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://www.open-open.com&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Element</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> link </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;a&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> relHref </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">attr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;href&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // == &quot;/&quot;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> absHref </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> link</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">attr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;abs:href&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &quot;http://www.open-open.com/&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><p>在 HTML 元素中，URLs 经常写成相对于文档位置的相对路径： <code>&lt;a href=&quot;/download&quot;&gt;...&lt;/a&gt;</code>. 当你使用 <code>Node.attr(String key)</code> 方法来取得 a 元素的 href 属性时，它将直接返回在 HTML 源码中指定定的值。</p><p>假如你需要取得一个绝对路径，需要在属性名前加 <code>abs:</code> 前缀。这样就可以返回包含根路径的 URL 地址<code>attr(&quot;abs:href&quot;)</code></p><p>因此，在解析 HTML 文档时，定义 base URI 非常重要。</p><p>如果你不想使用<code>abs:</code> 前缀，还有一个方法能够实现同样的功能 <code>Node.absUrl(String key)</code>。</p></blockquote><h2 id="数据修改" tabindex="-1"><a class="header-anchor" href="#数据修改"><span>数据修改</span></a></h2><h3 id="设置属性的值" tabindex="-1"><a class="header-anchor" href="#设置属性的值"><span>设置属性的值</span></a></h3><p><strong>问题</strong></p><p>在你解析一个 <code>Document</code> 之后可能想修改其中的某些属性值，然后再保存到磁盘或都输出到前台页面。</p><p><strong>方法</strong></p><p>可以使用属性设置方法 <code>Element.attr(String key, String value)</code>, 和 <code>Elements.attr(String key, String value)</code>.</p><p>假如你需要修改一个元素的 <code>class</code> 属性，可以使用 <code>Element.addClass(String className)</code> 和<code>Element.removeClass(String className)</code> 方法。</p><p><code>Elements</code> 提供了批量操作元素属性和 class 的方法，比如：要为 div 中的每一个 a 元素都添加一个<code>rel=&quot;nofollow&quot;</code> 可以使用如下方法：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>doc.select(&quot;div.comments a&quot;).attr(&quot;rel&quot;, &quot;nofollow&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><p>与<code>Element</code>中的其它方法一样，<code>attr</code> 方法也是返回当 <code>Element</code> (或在使用选择器是返回 <code>Elements</code>集合)。这样能够很方便使用方法连用的书写方式。比如：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>doc.select(&quot;div.masthead&quot;).attr(&quot;title&quot;, &quot;jsoup&quot;).addClass(&quot;round-box&quot;);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></blockquote><h3 id="设置一个元素的-html-内容" tabindex="-1"><a class="header-anchor" href="#设置一个元素的-html-内容"><span>设置一个元素的 HTML 内容</span></a></h3><p><strong>问题</strong></p><p>你需要一个元素中的 HTML 内容</p><p><strong>方法</strong></p><p>可以使用<code>Element</code>中的 HTML 设置方法具体如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Element</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> div </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;div&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &lt;div&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">html</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;p&gt;lorem ipsum&lt;/p&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &lt;div&gt;&lt;p&gt;lorem ipsum&lt;/p&gt;&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">prepend</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;p&gt;First&lt;/p&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//在div前添加html内容</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">div</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">append</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;p&gt;Last&lt;/p&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//在div之后添加html内容</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 添完后的结果: &lt;div&gt;&lt;p&gt;First&lt;/p&gt;&lt;p&gt;lorem ipsum&lt;/p&gt;&lt;p&gt;Last&lt;/p&gt;&lt;/div&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Element</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> span </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> doc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">select</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;span&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">first</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // &lt;span&gt;One&lt;/span&gt;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">span</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">wrap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;&lt;li&gt;&lt;a href=&#39;http://example.com/&#39;&gt;&lt;/a&gt;&lt;/li&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 添完后的结果: &lt;li&gt;&lt;a href=&quot;http://example.com&quot;&gt;&lt;span&gt;One&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><ul><li><code>Element.html(String html)</code> 这个方法将先清除元素中的 HTML 内容，然后用传入的 HTML 代替。</li><li><code>Element.prepend(String first)</code> 和 <code>Element.append(String last)</code> 方法用于在分别在元素内部 HTML 的前面和后面添加 HTML 内容</li><li><code>Element.wrap(String around)</code> 对元素包裹一个外部 HTML 内容。</li></ul><p><strong>参见</strong></p><p>可以查看 API 参考文档中 <code>Element.prependElement(String tag)</code>和<code>Element.appendElement(String tag)</code> 方法来创建新的元素并作为文档的子元素插入其中。</p></blockquote><h3 id="设置元素的文本内容" tabindex="-1"><a class="header-anchor" href="#设置元素的文本内容"><span>设置元素的文本内容</span></a></h3><p><strong>问题</strong></p><p>你需要修改一个 HTML 文档中的文本内容</p><p><strong>方法</strong></p><p>可以使用<code>Element</code>的设置方法：:</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Element div = doc.select(&quot;div&quot;).first(); // &lt;div&gt;&lt;/div&gt;</span></span>
<span class="line"><span>div.text(&quot;five &gt; four&quot;); // &lt;div&gt;five &amp;gt; four&lt;/div&gt;</span></span>
<span class="line"><span>div.prepend(&quot;First &quot;);</span></span>
<span class="line"><span>div.append(&quot; Last&quot;);</span></span>
<span class="line"><span>// now: &lt;div&gt;First five &amp;gt; four Last&lt;/div&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p><strong>说明</strong></p><p>文本设置方法与 <a href="http://jsoup.org/cookbook/modifying-data/set-html" target="_blank" rel="noopener noreferrer">HTML setter</a> 方法一样：</p><ul><li><code>Element.text(String text)</code> 将清除一个元素中的内部 HTML 内容，然后提供的文本进行代替</li><li><code>Element.prepend(String first)</code> 和 <code>Element.append(String last)</code> 将分别在元素的内部 html 前后添加文本节点。</li></ul><p>对于传入的文本如果含有像 <code>&lt;</code>, <code>&gt;</code> 等这样的字符，将以文本处理，而非 HTML。</p></blockquote><h2 id="html-清理" tabindex="-1"><a class="header-anchor" href="#html-清理"><span>HTML 清理</span></a></h2><h3 id="消除不受信任的-html-来防止-xss-攻击" tabindex="-1"><a class="header-anchor" href="#消除不受信任的-html-来防止-xss-攻击"><span>消除不受信任的 HTML (来防止 XSS 攻击)</span></a></h3><p><strong>问题</strong></p><p>在做网站的时候，经常会提供用户评论的功能。有些不怀好意的用户，会搞一些脚本到评论内容中，而这些脚本可能会破坏整个页面的行为，更严重的是获取一些机要信息，此时需要清理该 HTML，以避免跨站脚本<a href="http://en.wikipedia.org/wiki/Cross-site_scripting" target="_blank" rel="noopener noreferrer">cross-site scripting</a>攻击（XSS）。</p><p><strong>方法</strong></p><p>使用 jsoup HTML <code>Cleaner</code> 方法进行清除，但需要指定一个可配置的 <code>Whitelist</code>。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> unsafe </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  &quot;&lt;p&gt;&lt;a href=&#39;http://example.com/&#39; onclick=&#39;stealCookies()&#39;&gt;Link&lt;/a&gt;&lt;/p&gt;&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> safe </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Jsoup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clean</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(unsafe, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Whitelist</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">basic</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// now: &lt;p&gt;&lt;a href=&quot;http://example.com/&quot; rel=&quot;nofollow&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>说明</strong></p><p>XSS 又叫 CSS (Cross Site Script) ，跨站脚本攻击。它指的是恶意攻击者往 Web 页面里插入恶意 html 代码，当用户浏览该页之时，嵌入其中 Web 里面的 html 代码会被执行，从而达到恶意攻击用户的特殊目的。XSS 属于被动式的攻击，因为其被动且不好利用，所以许多人常忽略其危害性。所以我们经常只让用户输入纯文本的内容，但这样用户体验就比较差了。</p><p>一个更好的解决方法就是使用一个富文本编辑器 WYSIWYG 如 <a href="http://ckeditor.com/" target="_blank" rel="noopener noreferrer">CKEditor</a> 和 <a href="http://tinymce.moxiecode.com/" target="_blank" rel="noopener noreferrer">TinyMCE</a>。这些可以输出 HTML 并能够让用户可视化编辑。虽然他们可以在客户端进行校验，但是这样还不够安全，需要在服务器端进行校验并清除有害的 HTML 代码，这样才能确保输入到你网站的 HTML 是安全的。否则，攻击者能够绕过客户端的 Javascript 验证，并注入不安全的 HMTL 直接进入您的网站。</p><p>jsoup 的 whitelist 清理器能够在服务器端对用户输入的 HTML 进行过滤，只输出一些安全的标签和属性。</p><p>jsoup 提供了一系列的 <code>Whitelist</code> 基本配置，能够满足大多数要求；但如有必要，也可以进行修改，不过要小心。</p><p>这个 cleaner 非常好用不仅可以避免 XSS 攻击，还可以限制用户可以输入的标签范围。</p><p><strong>参见</strong></p><ul><li>参阅<a href="http://ha.ckers.org/xss.html" target="_blank" rel="noopener noreferrer">XSS cheat sheet</a> ，有一个例子可以了解为什么不能使用正则表达式，而采用安全的 whitelist parser-based 清理器才是正确的选择。</li><li>参阅<code>Cleaner</code> ，了解如何返回一个 <code>Document</code> 对象，而不是字符串</li><li>参阅<code>Whitelist</code>，了解如何创建一个自定义的 whitelist</li><li><a href="http://en.wikipedia.org/wiki/Nofollow" target="_blank" rel="noopener noreferrer">nofollow</a> 链接属性了解</li></ul><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考"><span>参考</span></a></h2><ul><li><a href="https://github.com/jhy/jsoup" target="_blank" rel="noopener noreferrer">jsoup github 托管代码</a></li><li><a href="https://jsoup.org/cookbook/" target="_blank" rel="noopener noreferrer">jsoup Cookbook</a></li><li><a href="http://www.open-open.com/jsoup/" target="_blank" rel="noopener noreferrer">jsoup Cookbook(中文版)</a></li><li><a href="https://github.com/code4craft/jsoup-learning" target="_blank" rel="noopener noreferrer">不错的 jsoup 学习笔记</a></li></ul>`,118)]))}const k=s(l,[["render",n],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/pages/5dd78d/","title":"Jsoup 快速入门","lang":"zh-CN","frontmatter":{"title":"Jsoup 快速入门","date":"2022-02-17T22:34:30.000Z","order":5,"categories":["Java","工具","其他"],"tags":["Java","Html","Jsoup"],"permalink":"/pages/5dd78d/","description":"Jsoup 快速入门 简介 jsoup 是一款 Java 的 HTML 解析器，可直接解析某个 URL 地址、HTML 文本内容。它提供了一套非常省力的 API，可通过 DOM，CSS 以及类似于 JQuery 的操作方法来取出和操作数据。 jsoup 工作的流程主要如下： 从一个 URL，文件或字符串中解析 HTML，并加载为一个 Document ...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/5dd78d/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"Jsoup 快速入门"}],["meta",{"property":"og:description","content":"Jsoup 快速入门 简介 jsoup 是一款 Java 的 HTML 解析器，可直接解析某个 URL 地址、HTML 文本内容。它提供了一套非常省力的 API，可通过 DOM，CSS 以及类似于 JQuery 的操作方法来取出和操作数据。 jsoup 工作的流程主要如下： 从一个 URL，文件或字符串中解析 HTML，并加载为一个 Document ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"Html"}],["meta",{"property":"article:tag","content":"Jsoup"}],["meta",{"property":"article:published_time","content":"2022-02-17T22:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Jsoup 快速入门\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-17T22:34:30.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"简介","slug":"简介","link":"#简介","children":[]},{"level":2,"title":"加载","slug":"加载","link":"#加载","children":[{"level":3,"title":"从 HTML 字符串加载一个文档","slug":"从-html-字符串加载一个文档","link":"#从-html-字符串加载一个文档","children":[]},{"level":3,"title":"解析一个 body 片断","slug":"解析一个-body-片断","link":"#解析一个-body-片断","children":[]},{"level":3,"title":"从 URL 加载一个文档","slug":"从-url-加载一个文档","link":"#从-url-加载一个文档","children":[]},{"level":3,"title":"从一个文件加载一个文档","slug":"从一个文件加载一个文档","link":"#从一个文件加载一个文档","children":[]}]},{"level":2,"title":"解析","slug":"解析","link":"#解析","children":[{"level":3,"title":"使用 DOM 方法来遍历一个文档","slug":"使用-dom-方法来遍历一个文档","link":"#使用-dom-方法来遍历一个文档","children":[]},{"level":3,"title":"使用选择器语法来查找元素","slug":"使用选择器语法来查找元素","link":"#使用选择器语法来查找元素","children":[]},{"level":3,"title":"从元素抽取属性，文本和 HTML","slug":"从元素抽取属性-文本和-html","link":"#从元素抽取属性-文本和-html","children":[]},{"level":3,"title":"处理 URLs","slug":"处理-urls","link":"#处理-urls","children":[]}]},{"level":2,"title":"数据修改","slug":"数据修改","link":"#数据修改","children":[{"level":3,"title":"设置属性的值","slug":"设置属性的值","link":"#设置属性的值","children":[]},{"level":3,"title":"设置一个元素的 HTML 内容","slug":"设置一个元素的-html-内容","link":"#设置一个元素的-html-内容","children":[]},{"level":3,"title":"设置元素的文本内容","slug":"设置元素的文本内容","link":"#设置元素的文本内容","children":[]}]},{"level":2,"title":"HTML 清理","slug":"html-清理","link":"#html-清理","children":[{"level":3,"title":"消除不受信任的 HTML (来防止 XSS 攻击)","slug":"消除不受信任的-html-来防止-xss-攻击","link":"#消除不受信任的-html-来防止-xss-攻击","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1749521666000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":13.84,"words":4153},"filePathRelative":"posts/01.Java/12.工具/99.其他/05.Jsoup.md","localizedDate":"2022年2月17日","excerpt":"\\n<h2>简介</h2>\\n<p>jsoup 是一款 Java 的 HTML 解析器，可直接解析某个 URL 地址、HTML 文本内容。它提供了一套非常省力的 API，可通过 DOM，CSS 以及类似于 JQuery 的操作方法来取出和操作数据。</p>\\n<p>jsoup 工作的流程主要如下：</p>\\n<ol>\\n<li>从一个 URL，文件或字符串中解析 HTML，并加载为一个 <code>Document</code> 对象。</li>\\n<li>使用 DOM 或 CSS 选择器来取出数据；</li>\\n<li>可操作 HTML 元素、属性、文本。</li>\\n</ol>\\n<p>jsoup 是基于 MIT 协议发布的，可放心使用于商业项目。</p>","autoDesc":true}');export{k as comp,d as data};
