import{_ as i,c as d,b as n,e,d as l,f as r,r as E,o as s,h as o}from"./app-C2NQDbvH.js";const p={};function u(f,t){const a=E("RouteLink");return s(),d("div",null,[t[12]||(t[12]=n('<h1 id="消息队列" tabindex="-1"><a class="header-anchor" href="#消息队列"><span>消息队列</span></a></h1><blockquote><p>消息队列（Message Queue，简称 MQ）技术是分布式应用间交换信息的一种技术。</p><p>消息队列主要解决应用耦合，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。</p><p>如果想深入学习各种消息队列产品，建议先了解一下 <a href="https://dunwu.github.io/waterdrop/pages/1fd240/" target="_blank" rel="noopener noreferrer">消息队列基本原理</a> ，有助于理解消息队列特性的实现和设计思路。</p></blockquote><h2 id="内容" tabindex="-1"><a class="header-anchor" href="#内容"><span>内容</span></a></h2><h3 id="mq-综合" tabindex="-1"><a class="header-anchor" href="#mq-综合"><span>MQ 综合</span></a></h3>',4)),e("ul",null,[e("li",null,[l(a,{to:"/posts/15.%E5%88%86%E5%B8%83%E5%BC%8F/21.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/02.MQ/00.MQ%E7%BB%BC%E5%90%88/01.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E9%9D%A2%E8%AF%95.html"},{default:r(()=>t[0]||(t[0]=[o("消息队列面试")])),_:1})]),e("li",null,[l(a,{to:"/posts/15.%E5%88%86%E5%B8%83%E5%BC%8F/21.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/02.MQ/00.MQ%E7%BB%BC%E5%90%88/02.%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86.html"},{default:r(()=>t[1]||(t[1]=[o("消息队列基本原理")])),_:1})])]),t[13]||(t[13]=e("h3",{id:"kafka",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#kafka"},[e("span",null,"Kafka")])],-1)),e("ul",null,[e("li",null,[l(a,{to:"/posts/15.%E5%88%86%E5%B8%83%E5%BC%8F/21.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/02.MQ/01.Kafka/01.Kafka%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"},{default:r(()=>t[2]||(t[2]=[o("Kafka 快速入门")])),_:1})]),e("li",null,[l(a,{to:"/posts/15.%E5%88%86%E5%B8%83%E5%BC%8F/21.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/02.MQ/01.Kafka/02.Kafka%E7%94%9F%E4%BA%A7%E8%80%85.html"},{default:r(()=>t[3]||(t[3]=[o("Kafka 生产者")])),_:1})]),e("li",null,[l(a,{to:"/posts/15.%E5%88%86%E5%B8%83%E5%BC%8F/21.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/02.MQ/01.Kafka/03.Kafka%E6%B6%88%E8%B4%B9%E8%80%85.html"},{default:r(()=>t[4]||(t[4]=[o("Kafka 消费者")])),_:1})]),e("li",null,[l(a,{to:"/posts/15.%E5%88%86%E5%B8%83%E5%BC%8F/21.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/02.MQ/01.Kafka/04.Kafka%E9%9B%86%E7%BE%A4.html"},{default:r(()=>t[5]||(t[5]=[o("Kafka 集群")])),_:1})]),e("li",null,[l(a,{to:"/posts/15.%E5%88%86%E5%B8%83%E5%BC%8F/21.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/02.MQ/01.Kafka/05.Kafka%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93.html"},{default:r(()=>t[6]||(t[6]=[o("Kafka 可靠传输")])),_:1})]),e("li",null,[l(a,{to:"/posts/15.%E5%88%86%E5%B8%83%E5%BC%8F/21.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/02.MQ/01.Kafka/06.Kafka%E5%AD%98%E5%82%A8.html"},{default:r(()=>t[7]||(t[7]=[o("Kafka 存储")])),_:1})]),e("li",null,[l(a,{to:"/posts/15.%E5%88%86%E5%B8%83%E5%BC%8F/21.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/02.MQ/01.Kafka/07.Kafka%E6%B5%81%E5%BC%8F%E5%A4%84%E7%90%86.html"},{default:r(()=>t[8]||(t[8]=[o("Kafka 流式处理")])),_:1})]),e("li",null,[l(a,{to:"/posts/15.%E5%88%86%E5%B8%83%E5%BC%8F/21.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/02.MQ/01.Kafka/08.Kafka%E8%BF%90%E7%BB%B4.html"},{default:r(()=>t[9]||(t[9]=[o("Kafka 运维")])),_:1})])]),t[14]||(t[14]=e("h3",{id:"rocketmq",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#rocketmq"},[e("span",null,"RocketMQ")])],-1)),e("ul",null,[e("li",null,[l(a,{to:"/posts/15.%E5%88%86%E5%B8%83%E5%BC%8F/21.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/02.MQ/02.RocketMQ/01.RocketMQ%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"},{default:r(()=>t[10]||(t[10]=[o("RocketMQ")])),_:1})])]),t[15]||(t[15]=e("h3",{id:"其他-mq",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#其他-mq"},[e("span",null,"其他 MQ")])],-1)),e("ul",null,[e("li",null,[l(a,{to:"/posts/15.%E5%88%86%E5%B8%83%E5%BC%8F/21.%E5%88%86%E5%B8%83%E5%BC%8F%E9%80%9A%E4%BF%A1/02.MQ/99.%E5%85%B6%E4%BB%96MQ/01.ActiveMQ.html"},{default:r(()=>t[11]||(t[11]=[o("ActiveMQ")])),_:1})])]),t[16]||(t[16]=n('<h2 id="技术对比" tabindex="-1"><a class="header-anchor" href="#技术对比"><span>技术对比</span></a></h2><table><thead><tr><th>特性</th><th>ActiveMQ</th><th>RabbitMQ</th><th>RocketMQ</th><th>Kafka</th></tr></thead><tbody><tr><td>单机吞吐量</td><td>万级，比 RocketMQ、Kafka 低一个数量级</td><td>同 ActiveMQ</td><td>10 万级，支撑高吞吐</td><td>10 万级，高吞吐，一般配合大数据类的系统来进行实时数据计算、日志采集等场景</td></tr><tr><td>topic 数量对吞吐量的影响</td><td></td><td></td><td>topic 可以达到几百/几千的级别，吞吐量会有较小幅度的下降，这是 RocketMQ 的一大优势，在同等机器下，可以支撑大量的 topic</td><td>topic 从几十到几百个时候，吞吐量会大幅度下降，在同等机器下，Kafka 尽量保证 topic 数量不要过多，如果要支撑大规模的 topic，需要增加更多的机器资源</td></tr><tr><td>时效性</td><td>ms 级</td><td>微秒级，这是 RabbitMQ 的一大特点，延迟最低</td><td>ms 级</td><td>延迟在 ms 级以内</td></tr><tr><td>可用性</td><td>高，基于主从架构实现高可用</td><td>同 ActiveMQ</td><td>非常高，分布式架构</td><td>非常高，分布式，一个数据多个副本，少数机器宕机，不会丢失数据，不会导致不可用</td></tr><tr><td>消息可靠性</td><td>有较低的概率丢失数据</td><td>基本不丢</td><td>经过参数优化配置，可以做到 0 丢失</td><td>同 RocketMQ</td></tr><tr><td>功能支持</td><td>MQ 领域的功能极其完备</td><td>基于 erlang 开发，并发能力很强，性能极好，延时很低</td><td>MQ 功能较为完善，还是分布式的，扩展性好</td><td>功能较为简单，主要支持简单的 MQ 功能，在大数据领域的实时计算以及日志采集被大规模使用</td></tr></tbody></table><p>综上，各种对比之后，有如下建议：</p><ul><li>一般的业务系统要引入 MQ，最早大家都用 ActiveMQ，但是现在确实大家用的不多了，没经过大规模吞吐量场景的验证，社区也不是很活跃，所以大家还是算了吧，我个人不推荐用这个了；</li><li>后来大家开始用 RabbitMQ，但是确实 erlang 语言阻止了大量的 Java 工程师去深入研究和掌控它，对公司而言，几乎处于不可控的状态，但是确实人家是开源的，比较稳定的支持，活跃度也高；</li><li>不过现在确实越来越多的公司会去用 RocketMQ，确实很不错，毕竟是阿里出品，但社区可能有突然黄掉的风险（目前 RocketMQ 已捐给 <a href="https://github.com/apache/rocketmq" target="_blank" rel="noopener noreferrer">Apache</a>，但 GitHub 上的活跃度其实不算高）对自己公司技术实力有绝对自信的，推荐用 RocketMQ，否则回去老老实实用 RabbitMQ 吧，人家有活跃的开源社区，绝对不会黄。</li><li>所以<strong>中小型公司</strong>，技术实力较为一般，技术挑战不是特别高，用 RabbitMQ 是不错的选择；<strong>大型公司</strong>，基础架构研发实力较强，用 RocketMQ 是很好的选择。</li><li>如果是<strong>大数据领域</strong>的实时计算、日志采集等场景，用 Kafka 是业内标准的，绝对没问题，社区活跃度很高，绝对不会黄，何况几乎是全世界这个领域的事实性规范。</li></ul><h2 id="📚-资料" tabindex="-1"><a class="header-anchor" href="#📚-资料"><span>📚 资料</span></a></h2><ul><li><strong>Kafka</strong><ul><li><a href="https://github.com/apache/kafka" target="_blank" rel="noopener noreferrer">Kafka Github</a></li><li><a href="http://kafka.apache.org/" target="_blank" rel="noopener noreferrer">Kafka 官网</a></li><li><a href="https://kafka.apache.org/documentation/" target="_blank" rel="noopener noreferrer">Kafka 官方文档</a></li><li><a href="https://github.com/apachecn/kafka-doc-zh" target="_blank" rel="noopener noreferrer">Kafka 中文文档</a></li></ul></li><li><strong>ActiveMQ</strong><ul><li><a href="http://activemq.apache.org/" target="_blank" rel="noopener noreferrer">ActiveMQ 官网</a></li></ul></li></ul><h2 id="🚪-传送" tabindex="-1"><a class="header-anchor" href="#🚪-传送"><span>🚪 传送</span></a></h2><p>◾ 💧 <a href="https://dunwu.github.io/waterdrop/" target="_blank" rel="noopener noreferrer">钝悟的 IT 知识图谱</a> ◾</p>',8))])}const k=i(p,[["render",u],["__file","index.html.vue"]]),B=JSON.parse('{"path":"/pages/dfe847/","title":"消息队列","lang":"zh-CN","frontmatter":{"title":"消息队列","date":"2022-02-17T22:34:30.000Z","categories":["分布式","分布式通信","MQ"],"tags":["Java","中间件","MQ"],"permalink":"/pages/dfe847/","hidden":true,"index":false,"description":"消息队列 消息队列（Message Queue，简称 MQ）技术是分布式应用间交换信息的一种技术。 消息队列主要解决应用耦合，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。 如果想深入学习各种消息队列产品，建议先了解一下 消息队列基本原理 ，有助于理解消息队列特性的实现和设计思路。 内容 MQ ...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/dfe847/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"消息队列"}],["meta",{"property":"og:description","content":"消息队列 消息队列（Message Queue，简称 MQ）技术是分布式应用间交换信息的一种技术。 消息队列主要解决应用耦合，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。 如果想深入学习各种消息队列产品，建议先了解一下 消息队列基本原理 ，有助于理解消息队列特性的实现和设计思路。 内容 MQ ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:tag","content":"中间件"}],["meta",{"property":"article:tag","content":"MQ"}],["meta",{"property":"article:published_time","content":"2022-02-17T22:34:30.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"消息队列\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-02-17T22:34:30.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"内容","slug":"内容","link":"#内容","children":[{"level":3,"title":"MQ 综合","slug":"mq-综合","link":"#mq-综合","children":[]},{"level":3,"title":"Kafka","slug":"kafka","link":"#kafka","children":[]},{"level":3,"title":"RocketMQ","slug":"rocketmq","link":"#rocketmq","children":[]},{"level":3,"title":"其他 MQ","slug":"其他-mq","link":"#其他-mq","children":[]}]},{"level":2,"title":"技术对比","slug":"技术对比","link":"#技术对比","children":[]},{"level":2,"title":"📚 资料","slug":"📚-资料","link":"#📚-资料","children":[]},{"level":2,"title":"🚪 传送","slug":"🚪-传送","link":"#🚪-传送","children":[]}],"git":{"createdTime":1749521666000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":1,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":3.76,"words":1129},"filePathRelative":"posts/15.分布式/21.分布式通信/02.MQ/README.md","localizedDate":"2022年2月17日","excerpt":"\\n<blockquote>\\n<p>消息队列（Message Queue，简称 MQ）技术是分布式应用间交换信息的一种技术。</p>\\n<p>消息队列主要解决应用耦合，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。是大型分布式系统不可缺少的中间件。</p>\\n<p>如果想深入学习各种消息队列产品，建议先了解一下 <a href=\\"https://dunwu.github.io/waterdrop/pages/1fd240/\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">消息队列基本原理</a> ，有助于理解消息队列特性的实现和设计思路。</p>\\n</blockquote>","autoDesc":true}');export{k as comp,B as data};
