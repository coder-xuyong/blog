import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,b as n,o as a}from"./app-BBxBSaFF.js";const t={};function l(r,s){return a(),e("div",null,s[0]||(s[0]=[n(`<h1 id="设计-pastebin-com-或者-bit-ly" tabindex="-1"><a class="header-anchor" href="#设计-pastebin-com-或者-bit-ly"><span>设计 <a href="http://Pastebin.com" target="_blank" rel="noopener noreferrer">Pastebin.com</a> (或者 <a href="http://Bit.ly" target="_blank" rel="noopener noreferrer">Bit.ly</a>)</span></a></h1><blockquote><p>本文搬运自 <a href="https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/pastebin/README-zh-Hans.md" target="_blank" rel="noopener noreferrer">设计 Pastebin.com (或者 Bit.ly)</a></p></blockquote><p><strong>注意: 为了避免重复，当前文档会直接链接到<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95" target="_blank" rel="noopener noreferrer">系统设计主题</a>的相关区域，请参考链接内容以获得综合的讨论点、权衡和替代方案。</strong></p><p><strong>设计 <a href="http://Bit.ly" target="_blank" rel="noopener noreferrer">Bit.ly</a></strong> - 是一个类似的问题，区别是 pastebin 需要存储的是 paste 的内容，而不是原始的未短化的 url。</p><h2 id="步骤一、需求分析" tabindex="-1"><a class="header-anchor" href="#步骤一、需求分析"><span>步骤一、需求分析</span></a></h2><blockquote><p>收集这个问题的需求和范畴。<br> 问相关问题来明确用例和约束。<br> 讨论一些假设。</p></blockquote><h3 id="用例" tabindex="-1"><a class="header-anchor" href="#用例"><span>用例</span></a></h3><h4 id="问题范围" tabindex="-1"><a class="header-anchor" href="#问题范围"><span>问题范围</span></a></h4><ul><li><strong>用户</strong> 输入一段文本，然后得到一个随机生成的链接 <ul><li>过期设置 <ul><li>默认的设置是不会过期的</li><li>可以选择设置一个过期的时间</li></ul></li></ul></li><li><strong>用户</strong> 输入一个 paste 的 url 后，可以看到它存储的内容</li><li><strong>用户</strong> 是匿名的</li><li><strong>Service</strong> 跟踪页面分析 <ul><li>一个月的访问统计</li></ul></li><li><strong>Service</strong> 删除过期的 pastes</li><li><strong>Service</strong> 需要高可用</li></ul><h4 id="超出范畴的用例" tabindex="-1"><a class="header-anchor" href="#超出范畴的用例"><span>超出范畴的用例</span></a></h4><ul><li><strong>用户</strong> 可以注册一个账户 <ul><li><strong>用户</strong> 通过验证邮箱</li></ul></li><li><strong>用户</strong> 可以用注册的账户登录 <ul><li><strong>用户</strong> 可以编辑文档</li></ul></li><li><strong>用户</strong> 可以设置可见性</li><li><strong>用户</strong> 可以设置短链接</li></ul><h3 id="约束和假设" tabindex="-1"><a class="header-anchor" href="#约束和假设"><span>约束和假设</span></a></h3><h4 id="状态假设" tabindex="-1"><a class="header-anchor" href="#状态假设"><span>状态假设</span></a></h4><ul><li>访问流量不是均匀分布的</li><li>打开一个短链接应该是很快的</li><li>pastes 只能是文本</li><li>页面访问分析数据可以不用实时</li><li>一千万的用户量</li><li>每个月一千万的 paste 写入量</li><li>每个月一亿的 paste 读取量</li><li>读写比例在 10:1</li></ul><h4 id="性能估算" tabindex="-1"><a class="header-anchor" href="#性能估算"><span>性能估算</span></a></h4><ul><li>每个 paste 的大小 <ul><li>每一个 paste 1 KB</li><li><code>shortlink</code> - 7 bytes</li><li><code>expiration_length_in_minutes</code> - 4 bytes</li><li><code>created_at</code> - 5 bytes</li><li><code>paste_path</code> - 255 bytes</li><li>总共 = ~1.27 KB</li></ul></li><li>每个月新的 paste 内容在 12.7GB <ul><li>(1.27 * 10000000)KB / 月的 paste</li><li>三年内将近 450GB 的新 paste 内容</li><li>三年内 3.6 亿短链接</li><li>假设大部分都是新的 paste，而不是需要更新已存在的 paste</li></ul></li><li>平均 4paste/s 的写入速度</li><li>平均 40paste/s 的读取速度</li></ul><p>简单的转换指南:</p><ul><li>2.5 百万 req/s</li><li>1 req/s = 2.5 百万 req/month</li><li>40 req/s = 1 亿 req/month</li><li>400 req/s = 10 亿 req/month</li></ul><h2 id="步骤二、顶层设计" tabindex="-1"><a class="header-anchor" href="#步骤二、顶层设计"><span>步骤二、顶层设计</span></a></h2><blockquote><p>概述一个包括所有重要的组件的高层次设计</p></blockquote><figure><img src="http://i.imgur.com/BKsBnmG.png" alt="Imgur" tabindex="0" loading="lazy"><figcaption>Imgur</figcaption></figure><h2 id="步骤三、核心组件设计" tabindex="-1"><a class="header-anchor" href="#步骤三、核心组件设计"><span>步骤三、核心组件设计</span></a></h2><blockquote><p>深入每一个核心组件的细节</p></blockquote><h3 id="用例-用户输入一段文本-然后得到一个随机生成的链接" tabindex="-1"><a class="header-anchor" href="#用例-用户输入一段文本-然后得到一个随机生成的链接"><span>用例：用户输入一段文本，然后得到一个随机生成的链接</span></a></h3><p>我们可以用一个 <a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Frdbms" target="_blank" rel="noopener noreferrer">关系型数据库</a>作为一个大的哈希表，用来把生成的 url 映射到一个包含 paste 文件的文件服务器和路径上。</p><p>为了避免托管一个文件服务器，我们可以用一个托管的<strong>对象存储</strong>，比如 Amazon 的 S3 或者<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%96%87%E6%A1%A3%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8" target="_blank" rel="noopener noreferrer">NoSQL 文档类型存储</a>。</p><p>作为一个大的哈希表的关系型数据库的替代方案，我们可以用<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E9%94%AE-%E5%80%BC%E5%AD%98%E5%82%A8" target="_blank" rel="noopener noreferrer">NoSQL 键值存储</a>。我们需要讨论<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#sql-%E8%BF%98%E6%98%AF-nosql" target="_blank" rel="noopener noreferrer">选择 SQL 或 NoSQL 之间的权衡</a>。下面的讨论是使用关系型数据库方法。</p><ul><li><strong>客户端</strong> 发送一个创建 paste 的请求到作为一个<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener noreferrer">反向代理</a>启动的 <strong>Web 服务器</strong>。</li><li><strong>Web 服务器</strong> 转发请求给 <strong>写接口</strong> 服务器</li><li><strong>写接口</strong> 服务器执行如下操作： <ul><li>生成一个唯一的 url <ul><li>检查这个 url 在 <strong>SQL 数据库</strong> 里面是否是唯一的</li><li>如果这个 url 不是唯一的，生成另外一个 url</li><li>如果我们支持自定义 url，我们可以使用用户提供的 url（也需要检查是否重复）</li></ul></li><li>把生成的 url 存储到 <strong>SQL 数据库</strong> 的 <code>pastes</code> 表里面</li><li>存储 paste 的内容数据到 <strong>对象存储</strong> 里面</li><li>返回生成的 url</li></ul></li></ul><p><strong>向面试官阐明你需要写多少代码</strong></p><p><code>pastes</code> 表可以有如下结构：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">shortlink </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">expiration_length_in_minutes </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">created_at </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">datetime</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">paste_path </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">255</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(shortlink)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们将在 <code>shortlink</code> 字段和 <code>created_at</code> 字段上创建一个<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%BD%BF%E7%94%A8%E6%AD%A3%E7%A1%AE%E7%9A%84%E7%B4%A2%E5%BC%95" target="_blank" rel="noopener noreferrer">数据库索引</a>，用来提高查询的速度（避免因为扫描全表导致的长时间查询）并将数据保存在内存中，从内存里面顺序读取 1MB 的数据需要大概 250 微秒，而从 SSD 上读取则需要花费 4 倍的时间，从硬盘上则需要花费 80 倍的时间。<sup><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#每个程序员都应该知道的延迟数"> 1</a></sup></p><p>为了生成唯一的 url，我们可以：</p><ul><li>使用 <a href="https://en.wikipedia.org/wiki/MD5" target="_blank" rel="noopener noreferrer"><strong>MD5</strong></a> 来哈希用户的 IP 地址 + 时间戳 <ul><li>MD5 是一个普遍用来生成一个 128-bit 长度的哈希值的一种哈希方法</li><li>MD5 是一致分布的</li><li>或者我们也可以用 MD5 哈希一个随机生成的数据</li></ul></li><li>用 <a href="https://www.kerstner.at/2012/07/shortening-strings-using-base-62-encoding/" target="_blank" rel="noopener noreferrer"><strong>Base 62</strong></a> 编码 MD5 哈希值 <ul><li>对于 urls，使用 Base 62 编码 <code>[a-zA-Z0-9]</code> 是比较合适的</li><li>对于每一个原始输入只会有一个 hash 结果，Base 62 是确定的（不涉及随机性）</li><li>Base 64 是另外一个流行的编码方案，但是对于 urls，会因为额外的 <code>+</code> 和 <code>-</code> 字符串而产生一些问题</li><li>以下 <a href="http://stackoverflow.com/questions/742013/how-to-code-a-url-shortener" target="_blank" rel="noopener noreferrer">Base 62 伪代码</a> 执行的时间复杂度是 O(k)，k 是数字的数量 = 7：</li></ul></li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> base_encode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;">num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> base</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">62</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    digits </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> []</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> num </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      remainder </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> modulo</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(num, base)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      digits.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">push</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(remainder)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      num </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> divide</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(num, base)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    digits </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> digits.reverse</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>取输出的前 7 个字符，结果会有 62^7 个可能的值，应该足以满足在 3 年内处理 3.6 亿个短链接的约束：</li></ul><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">url </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;"> base_encode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">md5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ip_address</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">timestamp))[:</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">URL_LENGTH</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>我们将会用一个公开的 <a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%A1%A8%E8%BF%B0%E6%80%A7%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBrest" target="_blank" rel="noopener noreferrer"><strong>REST 风格接口</strong></a>：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> curl</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> -X</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> POST</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> --data</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;{&quot;expiration_length_in_minutes&quot;:&quot;60&quot;, \\&quot;paste_contents&quot;:&quot;Hello World!&quot;}&#39;</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://pastebin.com/api/v1/paste</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Response:</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;shortlink&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;foobar&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>用于内部通信，我们可以用 <a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E5%8D%8F%E8%AE%AErpc" target="_blank" rel="noopener noreferrer">RPC</a>。</p><h3 id="用例-用户输入一个-paste-的-url-后可以看到它存储的内容" tabindex="-1"><a class="header-anchor" href="#用例-用户输入一个-paste-的-url-后可以看到它存储的内容"><span>用例：用户输入一个 paste 的 url 后可以看到它存储的内容</span></a></h3><ul><li><strong>客户端</strong> 发送一个获取 paste 请求到 <strong>Web Server</strong></li><li><strong>Web Server</strong> 转发请求给 <strong>读取接口</strong> 服务器</li><li><strong>读取接口</strong> 服务器执行如下操作： <ul><li>在 <strong>SQL 数据库</strong> 检查这个生成的 url <ul><li>如果这个 url 在 <strong>SQL 数据库</strong> 里面，则从 <strong>对象存储</strong> 获取这个 paste 的内容</li><li>否则，返回一个错误页面给用户</li></ul></li></ul></li></ul><p>REST API：</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">curl</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> https://pastebin.com/api/v1/paste?shortlink=foobar</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>Response:</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;paste_contents&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Hello World&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;created_at&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;YYYY-MM-DD HH:MM:SS&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;expiration_length_in_minutes&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;60&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用例-服务跟踪分析页面" tabindex="-1"><a class="header-anchor" href="#用例-服务跟踪分析页面"><span>用例： 服务跟踪分析页面</span></a></h3><p>因为实时分析不是必须的，所以我们可以简单的 <strong>MapReduce</strong> <strong>Web Server</strong> 的日志，用来生成点击次数。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HitCounts</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">MRJob</span><span style="--shiki-light:#C18401;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> extract_url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> line</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;Extract the generated url from the log line.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">        ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> extract_year_month</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> line</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;Return the year and month portions of the timestamp.&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">        ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> mapper</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> _</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> line</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;Parse each log line, extract and transform relevant lines.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        Emit key value pairs of the form:</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        (2016-01, url0), 1</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        (2016-01, url0), 1</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        (2016-01, url1), 1</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        url </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">extract_url</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(line)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        period </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">extract_year_month</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(line)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        yield</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (period, url), </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    def</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> reducer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#E5C07B;--shiki-dark-font-style:italic;">self</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> key</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-light-font-style:inherit;--shiki-dark:#D19A66;--shiki-dark-font-style:italic;"> values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">):</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;Sum values for each key.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        (2016-01, url0), 2</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        (2016-01, url1), 1</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">        &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        yield</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> key, </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">sum</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(values)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="用例-服务删除过期的-pastes" tabindex="-1"><a class="header-anchor" href="#用例-服务删除过期的-pastes"><span>用例： 服务删除过期的 pastes</span></a></h3><p>为了删除过期的 pastes，我们可以直接搜索 <strong>SQL 数据库</strong> 中所有的过期时间比当前时间更早的记录，<br> 所有过期的记录将从这张表里面删除（或者将其标记为过期）。</p><h2 id="步骤四、扩展设计" tabindex="-1"><a class="header-anchor" href="#步骤四、扩展设计"><span>步骤四、扩展设计</span></a></h2><blockquote><p>给定约束条件，识别和解决瓶颈。</p></blockquote><figure><img src="http://i.imgur.com/4edXG0T.png" alt="Imgur" tabindex="0" loading="lazy"><figcaption>Imgur</figcaption></figure><p><strong>重要提示: 不要简单的从最初的设计直接跳到最终的设计</strong></p><p>说明您将迭代地执行这样的操作：1)<strong>Benchmark/Load 测试</strong>，2)<strong>Profile</strong> 出瓶颈，3)在评估替代方案和权衡时解决瓶颈，4)重复前面，可以参考在 AWS 上设计一个可以支持百万用户的系统这个用来解决如何迭代地扩展初始设计的例子。</p><p>重要的是讨论在初始设计中可能遇到的瓶颈，以及如何解决每个瓶颈。比如，在多个 <strong>Web 服务器</strong> 上添加 <strong>负载平衡器</strong> 可以解决哪些问题？ <strong>CDN</strong> 解决哪些问题？<strong>Master-Slave Replicas</strong> 解决哪些问题? 替代方案是什么和怎么对每一个替代方案进行权衡比较？</p><p>我们将介绍一些组件来完成设计，并解决可伸缩性问题。内部的负载平衡器并不能减少杂乱。</p><p><strong>为了避免重复的讨论</strong>， 参考以下<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95" target="_blank" rel="noopener noreferrer">系统设计主题</a>获取主要讨论要点、权衡和替代方案：</p><ul><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F" target="_blank" rel="noopener noreferrer">DNS</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%86%85%E5%AE%B9%E5%88%86%E5%8F%91%E7%BD%91%E7%BB%9Ccdn" target="_blank" rel="noopener noreferrer">CDN</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E5%99%A8" target="_blank" rel="noopener noreferrer">负载均衡器</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%B0%B4%E5%B9%B3%E6%89%A9%E5%B1%95" target="_blank" rel="noopener noreferrer">水平扩展</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86web-%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener noreferrer">反向代理（web 服务器）</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BA%94%E7%94%A8%E5%B1%82" target="_blank" rel="noopener noreferrer">应用层</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">缓存</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9Frdbms" target="_blank" rel="noopener noreferrer">关系型数据库管理系统 (RDBMS)</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%95%85%E9%9A%9C%E5%88%87%E6%8D%A2" target="_blank" rel="noopener noreferrer">SQL write master-slave failover</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6" target="_blank" rel="noopener noreferrer">主从复制</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%B8%80%E8%87%B4%E6%80%A7%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">一致性模式</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%8F%AF%E7%94%A8%E6%80%A7%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">可用性模式</a></li></ul><p><strong>分析存储数据库</strong> 可以用比如 Amazon Redshift 或者 Google BigQuery 这样的数据仓库解决方案。</p><p>一个像 Amazon S3 这样的 <strong>对象存储</strong>，可以轻松处理每月 12.7 GB 的新内容约束。</p><p>要处理 <em>平均</em> 每秒 40 读请求(峰值更高)，其中热点内容的流量应该由 <strong>内存缓存</strong> 处理，而不是数据库。<strong>内存缓存</strong> 对于处理分布不均匀的流量和流量峰值也很有用。只要副本没有陷入复制写的泥潭，<strong>SQL Read Replicas</strong> 应该能够处理缓存丢失。</p><p>对于单个 <strong>SQL Write Master-Slave</strong>，<em>平均</em> 每秒 4paste 写入 (峰值更高) 应该是可以做到的。否则，我们需要使用额外的 SQL 扩展模式:</p><ul><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%81%94%E5%90%88" target="_blank" rel="noopener noreferrer">联合</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%86%E7%89%87" target="_blank" rel="noopener noreferrer">分片</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E9%9D%9E%E8%A7%84%E8%8C%83%E5%8C%96" target="_blank" rel="noopener noreferrer">非规范化</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#SQL%E8%B0%83%E4%BC%98" target="_blank" rel="noopener noreferrer">SQL 调优</a></li></ul><p>我们还应该考虑将一些数据移动到 <strong>NoSQL 数据库</strong>。</p><h2 id="额外的话题" tabindex="-1"><a class="header-anchor" href="#额外的话题"><span>额外的话题</span></a></h2><blockquote><p>是否更深入探讨额外主题，取决于问题的范围和面试剩余的时间。</p></blockquote><h3 id="nosql" tabindex="-1"><a class="header-anchor" href="#nosql"><span>NoSQL</span></a></h3><ul><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E9%94%AE-%E5%80%BC%E5%AD%98%E5%82%A8" target="_blank" rel="noopener noreferrer">键值存储</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%96%87%E6%A1%A3%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8" target="_blank" rel="noopener noreferrer">文档存储</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%97%E5%9E%8B%E5%AD%98%E5%82%A8" target="_blank" rel="noopener noreferrer">列型存储</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9B%BE%E6%95%B0%E6%8D%AE%E5%BA%93" target="_blank" rel="noopener noreferrer">图数据库</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#sql-%E8%BF%98%E6%98%AF-nosql" target="_blank" rel="noopener noreferrer">sql 还是 nosql</a></li></ul><h3 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存</span></a></h3><ul><li>在哪缓存 <ul><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">客户端缓存</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#cdn-%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">CDN 缓存</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#web-%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">Web 服务器缓存</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">数据库缓存</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BA%94%E7%94%A8%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">应用缓存</a></li></ul></li><li>缓存什么 <ul><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9F%A5%E8%AF%A2%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">数据库查询级别的缓存</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AF%B9%E8%B1%A1%E7%BA%A7%E5%88%AB%E7%9A%84%E7%BC%93%E5%AD%98" target="_blank" rel="noopener noreferrer">对象级别的缓存</a></li></ul></li><li>何时更新缓存 <ul><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%BC%93%E5%AD%98%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">缓存模式</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%9B%B4%E5%86%99%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">直写模式</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%9B%9E%E5%86%99%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener noreferrer">回写模式</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%88%B7%E6%96%B0" target="_blank" rel="noopener noreferrer">刷新</a></li></ul></li></ul><h3 id="异步和微服务" tabindex="-1"><a class="header-anchor" href="#异步和微服务"><span>异步和微服务</span></a></h3><ul><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97" target="_blank" rel="noopener noreferrer">消息队列</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97" target="_blank" rel="noopener noreferrer">任务队列</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%83%8C%E5%8E%8B" target="_blank" rel="noopener noreferrer">背压</a></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%BE%AE%E6%9C%8D%E5%8A%A1" target="_blank" rel="noopener noreferrer">微服务</a></li></ul><h3 id="通信" tabindex="-1"><a class="header-anchor" href="#通信"><span>通信</span></a></h3><ul><li>讨论权衡: <ul><li>跟客户端之间的外部通信 - <a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%A1%A8%E8%BF%B0%E6%80%A7%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BBrest" target="_blank" rel="noopener noreferrer">HTTP APIs following REST</a></li><li>内部通信 - <a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E8%BF%9C%E7%A8%8B%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8%E5%8D%8F%E8%AE%AErpc" target="_blank" rel="noopener noreferrer">RPC</a></li></ul></li><li><a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%9C%8D%E5%8A%A1%E5%8F%91%E7%8E%B0" target="_blank" rel="noopener noreferrer">服务发现</a></li></ul><h3 id="安全" tabindex="-1"><a class="header-anchor" href="#安全"><span>安全</span></a></h3><p>参考<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E5%AE%89%E5%85%A8" target="_blank" rel="noopener noreferrer">安全</a>。</p><h3 id="延迟数字" tabindex="-1"><a class="header-anchor" href="#延迟数字"><span>延迟数字</span></a></h3><p>见<a href="https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E6%AF%8F%E4%B8%AA%E7%A8%8B%E5%BA%8F%E5%91%98%E9%83%BD%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E5%BB%B6%E8%BF%9F%E6%95%B0" target="_blank" rel="noopener noreferrer">每个程序员都应该知道的延迟数</a>。</p><h3 id="持续进行" tabindex="-1"><a class="header-anchor" href="#持续进行"><span>持续进行</span></a></h3><ul><li>继续对系统进行基准测试和监控，以在瓶颈出现时解决它们</li><li>扩展是一个迭代的过程</li></ul>`,84)]))}const o=i(t,[["render",l]]),d=JSON.parse('{"path":"/pages/c72587/","title":"短地址服务","lang":"zh-CN","frontmatter":{"title":"短地址服务","date":"2021-11-08T08:15:33.000Z","categories":["设计","架构","解决方案"],"tags":["架构","解决方案"],"permalink":"/pages/c72587/","description":"设计 Pastebin.com (或者 Bit.ly) 本文搬运自 设计 Pastebin.com (或者 Bit.ly) 注意: 为了避免重复，当前文档会直接链接到系统设计主题的相关区域，请参考链接内容以获得综合的讨论点、权衡和替代方案。 设计 Bit.ly - 是一个类似的问题，区别是 pastebin 需要存储的是 paste 的内容，而不是原始...","head":[["meta",{"property":"og:url","content":"https://coder-xuyong.github.io/blog/pages/c72587/"}],["meta",{"property":"og:site_name","content":"coder-xuyong"}],["meta",{"property":"og:title","content":"短地址服务"}],["meta",{"property":"og:description","content":"设计 Pastebin.com (或者 Bit.ly) 本文搬运自 设计 Pastebin.com (或者 Bit.ly) 注意: 为了避免重复，当前文档会直接链接到系统设计主题的相关区域，请参考链接内容以获得综合的讨论点、权衡和替代方案。 设计 Bit.ly - 是一个类似的问题，区别是 pastebin 需要存储的是 paste 的内容，而不是原始..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://i.imgur.com/BKsBnmG.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-10T02:14:26.000Z"}],["meta",{"property":"article:tag","content":"架构"}],["meta",{"property":"article:tag","content":"解决方案"}],["meta",{"property":"article:published_time","content":"2021-11-08T08:15:33.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-10T02:14:26.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"短地址服务\\",\\"image\\":[\\"http://i.imgur.com/BKsBnmG.png\\",\\"http://i.imgur.com/4edXG0T.png\\"],\\"datePublished\\":\\"2021-11-08T08:15:33.000Z\\",\\"dateModified\\":\\"2025-06-10T02:14:26.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xuyong\\",\\"url\\":\\"https://github.com/coder-xuyong\\"}]}"]]},"headers":[{"level":2,"title":"步骤一、需求分析","slug":"步骤一、需求分析","link":"#步骤一、需求分析","children":[{"level":3,"title":"用例","slug":"用例","link":"#用例","children":[]},{"level":3,"title":"约束和假设","slug":"约束和假设","link":"#约束和假设","children":[]}]},{"level":2,"title":"步骤二、顶层设计","slug":"步骤二、顶层设计","link":"#步骤二、顶层设计","children":[]},{"level":2,"title":"步骤三、核心组件设计","slug":"步骤三、核心组件设计","link":"#步骤三、核心组件设计","children":[{"level":3,"title":"用例：用户输入一段文本，然后得到一个随机生成的链接","slug":"用例-用户输入一段文本-然后得到一个随机生成的链接","link":"#用例-用户输入一段文本-然后得到一个随机生成的链接","children":[]},{"level":3,"title":"用例：用户输入一个 paste 的 url 后可以看到它存储的内容","slug":"用例-用户输入一个-paste-的-url-后可以看到它存储的内容","link":"#用例-用户输入一个-paste-的-url-后可以看到它存储的内容","children":[]},{"level":3,"title":"用例： 服务跟踪分析页面","slug":"用例-服务跟踪分析页面","link":"#用例-服务跟踪分析页面","children":[]},{"level":3,"title":"用例： 服务删除过期的 pastes","slug":"用例-服务删除过期的-pastes","link":"#用例-服务删除过期的-pastes","children":[]}]},{"level":2,"title":"步骤四、扩展设计","slug":"步骤四、扩展设计","link":"#步骤四、扩展设计","children":[]},{"level":2,"title":"额外的话题","slug":"额外的话题","link":"#额外的话题","children":[{"level":3,"title":"NoSQL","slug":"nosql","link":"#nosql","children":[]},{"level":3,"title":"缓存","slug":"缓存","link":"#缓存","children":[]},{"level":3,"title":"异步和微服务","slug":"异步和微服务","link":"#异步和微服务","children":[]},{"level":3,"title":"通信","slug":"通信","link":"#通信","children":[]},{"level":3,"title":"安全","slug":"安全","link":"#安全","children":[]},{"level":3,"title":"延迟数字","slug":"延迟数字","link":"#延迟数字","children":[]},{"level":3,"title":"持续进行","slug":"持续进行","link":"#持续进行","children":[]}]}],"git":{"createdTime":1746520802000,"updatedTime":1749521666000,"contributors":[{"name":"XuYong","username":"XuYong","email":"1299461580@qq.com","commits":3,"url":"https://github.com/XuYong"}]},"readingTime":{"minutes":10.73,"words":3218},"filePathRelative":"posts/03.design/01.架构/99.解决方案/短地址服务.md","localizedDate":"2021年11月8日","excerpt":"\\n<blockquote>\\n<p>本文搬运自 <a href=\\"https://github.com/donnemartin/system-design-primer/blob/master/solutions/system_design/pastebin/README-zh-Hans.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">设计 Pastebin.com (或者 Bit.ly)</a></p>\\n</blockquote>\\n<p><strong>注意: 为了避免重复，当前文档会直接链接到<a href=\\"https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md#%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E4%B8%BB%E9%A2%98%E7%9A%84%E7%B4%A2%E5%BC%95\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">系统设计主题</a>的相关区域，请参考链接内容以获得综合的讨论点、权衡和替代方案。</strong></p>","autoDesc":true}');export{o as comp,d as data};
